import copy
import hashlib
import base64
import json
import os
import platform
import socket
import subprocess
import threading
import urllib.parse
from time import sleep
import paramiko
import requests
from pathlib import Path
import sqlite3
import PySimpleGUI as sg
from io import BytesIO
from PIL import Image, ImageDraw
import ipaddress
import logging
import sys
from enum import Enum
import re
from datetime import date, datetime

DEFAULT_BASE64_LOADING_GIF = b''
ICON_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAAMcAAADJCAYAAACXDya2AAAABmJLR0QA/wD/AP+gvaeTAAARR0lEQVR42u1dCZAU1RluLzzwjHgQQRHY3cGNaLJB1CiCioocO9Oz44EQMIUSj6CEmIgSXMUDNQKuO/16sujiRuKJWh4xokhpKEKhiEQFl+USOQJIIpco1+Z/vUh0WWBm+nX3+7r/v+ovqiy0nPe+r99//4bB4qHU72fERRsjbvUwEmKIkbQeNkzxNOlbpO+Tfky6kPRLw7Q20p/19PfW0Z+rd/7zOaQzSSeTVtPfGUHa10hmOhupiuP4fFlwxMy0JHBfZSTFGALztF2A90obiCSJdpdRZl9k9K9pzpfAooeknjvAMNPdDNMeu/MVqA9YtzovjXyh4uIsviAW/00l0+5Cr8J4AuIaDQixN5Wm2X1GaeZ0vjcW76R3pgWRYjiBrU5zQuxB7U/IDBtqpDJH8WWyKDKdrCICVxXp15ik2E3XE0nGOf4RC0tekrTaEogmEJi2hYQUjXUT6YNGT+sYvmyWLF+KMYcSaMpJN4eUFI11rZG0bzHKy/fny2fZs8hwqCmWRIQUjXWKYVa1YhCwNA7JNtuZoNseUWL8/xUxRYIBwdIgicpjKZLzTsRJ8X3dQWbWaDazOBJFkShrEROiSZ1oXJ85iEESyWhUJkYAWM4k2Gtu5DVjYPUhDJZIEcMuoMtfxeDPQpPWJDaxIuVjWLUM/JwIIhg4YRf5BWTnO0+1BjGAwixOPwQDPU/dbMTTZzKIQulnVBbvLOlmoOevs9j/COWrYb/E4FaiAxlMoXLC0x2c5BYDW4Xvschp8mIJy6shLAa1yuiVSDKowiA9Ko6kC93AoFaq/2RghePVGMxg9uT1+CmDC58c0xnMnuhjDC5oR7yykB1xz+qu/kt99YcxyHCTfvcziD2NXPVlkCGKUyoiljKAPe4eZAGUsvQlDF4fGqNS6fYMNjxHfCKD1wdNiHsZbHi5jU0MXl90pdG1/EAGHUyUSlzHoPX19ejFoMMhx3sMWl/1eQYdgpSmW/OInQB6PXgGL4AkrdsYrFzKztIkOcQHDNQg/A77TQafzhLPtGOgBqbbKOdxIoNQ21fDHskgDTRqNYRBqG3ijxa0MEi5z4OlcfjWPoPBqUOfBw3MY9Eut/EAg1OLSt0RDEbtTCqxgIGphc5jMGpFDOtsBqVGysPftDKpxjEotdIHGZQ6SENT0zIGpFa6lCcj6iBlomsIwESjg6xn6M8/kdaQrglBj3kXBmfgiT8aj49edtF43XEqfTiRZQY4QdIMziBFjqXEXkLzhdHn8SP2kLfpDt8ExWNDA3XELwQfjHZniIlPr6J1AYOUTao8wUMDrveeu6kCz5ZXMkiDi1KtAM4k1+77ZbQvY9OKJY/EX7pb6Kd2yFXHpljLUSuWHMlB0RDoLLJVkuXvrOaZuiwRMqnEEsOo3y/LoEMvNq1YcohSURQEO0o1Juvf2qPiYPp3voL+vWXW+Qxa/0yqxyIFFlM8BV7GXsGg9c+kWg4Mln/nbGaYIgFvWnGtlQ8iv7rYQLFz/s0Dqw+hf289dnQucx6D13OTip5obH/j0jyrAZ4F/92PMni9N6mAy9NpG1LquWb5VQOIK8BfzBVsWnkapaKnGRsgNXn/drliDH9y/C8YxJ6RA77jL+EySvcieFXAOAaxJ0JJM1N8DgyOTUb/muYuPw7XsGnF0kSUKn0uODBecH0GsvdDTjRn04qlUVb8EexojdVPyTkkxavghYhjGczqTaolwKD41oiPPVoNOawB4C/HkqzryliyAYT9c/DyiTeUnYUkmSQb9HlkfsagVpb4E/eBm1TXK06EvgFuWo1iUKsjxzxgMGxXvrfCtAaBk+MTBrUKSdmngdvY7yo/k96ZFvTf3Qp9LimriMHtPjpzJ7i/catHCdG3wT8av2dwuycH9o6/VNWpHp3LDbzoJtK+RuUpdIg7gAHwvmdn06fqBGcPH+7Z0L1WtWKQ5286DAU3qe7wOFDxLngZ+w0M8vzJ8R725WdiHp/PEHDTajKDPL+LPx7abEiIT72P5ImTwM3OLbsN0WbJxuGkxBknurIxraZzzVnknHH0LLBPJRKmGAZOjkkM9pzMhcxR4PVDi30rritNtwY3rTY5XY4sWZtU/cBH7z/i7ytLIWPsBT6lDPrsyTGJx9DklBC8Hbx9dgKDPiuTasyh5G9sjNTQNvcfk7bgId21RtfyAxn8+zYREuAOpgjmtbVng78eFzL4902OGuw5uOlLAorujeBVBWEWuawlKf4TyaFtrs1RKgHHJscybp/du2N5KXgt1ZPBvrrURAR9fulOTII9m1Q2uL8RD/j8ysE/LvczCZoS/G1NwSezSjOng5OjlonQlODPwX1ek9d3Hvbr63ElMyY5wIe2mVZfTciBPanFtIczGXa/1IXQpdeqhra5PkcqeMR+gWcyGcJ1oa9r9qFZAN0+K4spWXaFIEeBm1SD9DJR7YfA22dvZlKEIz6/zela1CpflOkM/hJPYVI4F2kXgNcETdXvUOF3mWxzBtfxq0HRCWxyDNH0XMeCJ1QHMDlkdALZeUxlTua8kSd+x8sRJwYN9cJu8dQ37NhQcbAc+Gy/dr0mDjvxBz53SXbg6e3PVXKtGi45pvKkcC9f5nQ38Gz5E9EkBv4Y/Y+1P2PZrmuKVcBn/KXvLcd6fNXAF7AkrLtBAh7YbQB+D6vQ5NJeh760ePpMDNPV7g4+tuehaBEDf5/2YpizllM9TLEG+Kzropb4u5KHtvl63k9w4APH33gGfMLIuVDnnbQv5xVpCNKj4mAK4a4DvqiVToINSeCnuohp0SBH3OoB/hVLgwZAkOeBqV9Xran9mwHP2l6MmXClYc3Y1Qi/Cjcx4CeM0NA2aaKwOcuFiMpFOrLYJlU1eG7paehCxFDv8TDFg+DtsH3ATdoybNPK7h1eciTEZ8CXs8FZj4As8suLvd6hKpzESFYWg3f8PRuS1/sF4HtYBRdGz44c4k5wclwVjnuwrwavtTonjP4GcjvsNxTtOTIU95BKH+44t7gfqQfCRQz0ZfJJ8WrIXvGXgT9Uc0PmiFs3cQJKq1e8P7ZpVVkYpst4C3qGUqriuFCRQ871xd7zPowvQo+s+DshzTkhN5u9GxL71uoH3uT/m3CG1slU5ImIHFfnid9N+YGVx0IPuICfiCiL3UyxHrhcZIYRZjHFZGByTEJPOPUGb4f9Q8jJMRj4w7XRGFh9CPDhW+O5d1ljgZ8dZvXEPPiG3o2VwLmNfxlREOipk9Q4Byll1vngvRvlkSCH3KKEe0crnF0kgFlx7O2wCfuMSJBD9mbLHm3Y4XriLERnD3g7rLXI6+OpN4wD6mKxc2pjseHzi4omzo/FZtCf80gXks4hnUpq1RYWDpoXi7Xx+K6mARci3ouW+OvIIyibls+KiooI9GNJvyStz0FnE1Fu+rS4+HAP/I6hPNDbvxDuSO4Z+KEsaNeudW1RUQ2BfFuOpGisq+sKC4d+UFKibtAD+hKhVLo9kkn1ITA5lqvuNiOTaTCBep1LUuz2ktAr1FFh2H0GsBl8KwgxKk/B7t2gbUiK5ItWrQ6l1+Iviknxfd1ExOuryBS+jTf6em9S3YI9B9e+SMUxrCgpOYzA+7aHxPhOd9QVFbn/cqaqTgX+qG1zasX0fzmoxBt5k5Ac2e9SyGluRi/GOz4QY5eSH3KjAnN4FnCtVT/NcxvglZ6KdtDNLyyc4CcxdupWCg1f6tLvuAPYHH5Od0d8YNSHhhFIrw2AGN/pmrkdOrR0YRIXQM8V07oQ0bRfivLhUh7iJA+iUjkpmXPuZsrKmjLcEPxlmpYh0DRA6Gl6tFDHpZBZ82SQxNjlf8Ril7h4/e8C/sBZumbF4+DtsFe6MqcKCjoQMLfrQA7SmfnfI/RkyuV6FiImxIQoD22jr/WfNSFGgxYUdHHxeszFLUS0SjQzqZxl8MAbS61XFOQ0NuhEDpl8dOE7jgL+0N2jmSOe7gbeDnutS0f8Sq1ejQZdt7hNm/wCDHLHOu59fqSbSTUuymNedHHEd9PCwotdmFZ1uIWIlO3XKL+xGJgcUxTkNhbqSA7qFbnbRc5jNHCt1RA9iIH9BNc7baJuXo327Y/U8tVo0FdcmMqdgMnxti6Fhsi9GzucXgYXsiAWK9GYHHNdWgSo3ZxbjJ7WMTqYVO8Dk2O6a5MqFuulMTnWufMlgecAyCU9wRIj0xK7d4N6GNyT42qNybGdetXzT4ohb/9NiL8GHaW6Lup7HqhUvL/G5Kif2rWrixJ8yjabYino/X5F+bdmAb4clDyLeDycXo6kxuTY7N6nFI9GvXEtz0JDsQmYHHepOAbq475QV3JQlnylgkrrLsCRyEeDMql6QZtUpZnTVRyDnCmlKzmofXaa6x/YMNZ1Beg9LwmqdyMDTI46VcdADu/+zqADPV+O8YoikhZw0KWjz8xwHLUvgMN8o1Weht/94jm8HGoWfUrbHbeodITPWXEqC4bOimc6qzwOiliN1LS2qq3CquvVoPc902eTiiaQ45JjmeqGGKrKjWlIjlmK77wqqlUQuR7ULOBntsKLI6GQ7oeaFR2qXUcs+7NxP4iD/SFGn8d+DJ0Vl70nHgiBcYBG5FhPvRxHK/2B12cOovNbC9oC/ZpfrwbwHjk1Q9uaEjnIjUC5SBNyjPbk7nFbob8x+jx+hB8h3NeATarxXh4NRYdSGhBj9cK2bY/yqAIbdwFqwjY5Kx7ggkVZ5EfgfD1QcqgaLN2UNKzO/gr0/qu9rqXqA2xSrfdjIt7i4uITCaSrAiLHUz6Y1RNhTWoZkvbwYKpwn1X/SpgptNvJ96w5RcvmdOzY3PuyITJPYDGQOc/LrPgy4AkjKT9TQUSQOIH2W786/lzNyM3dtN7A6+x+8GoA9xSbYrM/0YpGuY+Cgp4+zLP6gFaqHe9z0emzUa+pa2xS3QNcuvyyEZDUnXZaMUWxaj0qD5kgt0f5/qOS4grcsT1WkRdhvNnAlZkDjABFApjA/DDpFkXEWCbNtsB+UO/MYbBRSwWt0T+U0nRr4Kz4VrdD21TJguLi9jsHwH2TJymWk+P9u0Bei90tiRdBw/n/UJ34uxHY35hsaCb01W9B5SY3k7n1NwL8xn0QYinp40Sq3pRHOUCbH5EQ18BOuExVHKcyv/EGsL9xg6GxyGYpGgzXbn6HDt1lht2p0YrFTCLQeZJE2v6PywCHDHRg4mKgmkPoX9Mc+BC2O4WSLF455q+C+h2TVNmWCWCTahoj2FO/A3QHJG0gU1ItITes4pJjGCPYQ4mPPZrO+Nto1tk1TJ5YCRzCbcsI9vz1+DsoPmy3jvjZwEMUZjNyfYlaoU69XOGuXdoU9wGTYyQj15eEYAsnl4TZFdrJTTQCeCe1+Akj1zfTagpo++yo/H5wKnMysCM+nxHrJzlgk8Rz8n01bgZ+NR5gxPqZEKw6wck8R2Z/IG4UgnZRi7MYsb475u9FY38gdlZc+dA2lqzIMSQa+wORe8UDGzsfcUmJk0Art3PcH4g8Qb1MdGWkBha1mh7+/YGm+ByUHGu8GtrGkhVuhoV7+EbCPgM4hFvFCA1Q4qINqGmV5f5A0x4OnBW/nBEa+OuBuXo7q/2Bssybh7ax5CtJcXs4Azmp8T/CrZOhSXwsGpCDKqFDuT/QtPri+ht2GSNTG9Pqo/DtDzTFU6Dk+NpJXLLoQo4/hmt/YMPetzWgr8ZLjEidEoI0OC1U+wPL0ucC7174JSNSM0mIT8OzPzAh7gUlxxYnkMCiGTmsu8OzPxB13GfCfpORqGXUqmM49gciL8FM2L9mJGrrmM/D3x+I2yS/3TAzLRmFupLDuh9/f6CM9vBQYBbVErdKsPcHyoIrWXqBWUv1W0ag9qbVAtz9gQm7Ow9tY/EuakWrxmD3BybEOFByzGLkIUStMp1x9wfKMTahSvWz6CXOolXE5rm6/wGZ2bRwzwfZsgAAAABJRU5ErkJggg=='
ICON_BLANK_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZSURBVDhPY/hPIhjVQAwY1UAMGHQa/v8HAK+t/R8kTA7nAAAAAElFTkSuQmCC'
ICON_SHOW_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAPFJREFUOE+10zFKg0EQBeAviEEEC9HCVrCxtBJsBLGJOYA2egUPkMJUXsATiIieQAWRaJsiBxAtLUQrwUJBIxsmsPxEjPnJVLO7M2/evNmpKGmVkvnGBrCBIyzRK/KAfVwXGRcZLOIeEzjFMbrYwy6+sByAPawcYBvnOEQjKq1hEndxbuIgAE9ygM2gt4p2BD9hIfw3zIa/gg62cJkYTOMdNVxF0DxeMoapjaTHY7wnjW4w8xvAHF4xhW98BpvnQQDpblALt1iPhBZS1WT9Fuq4yEXcwVlBxGq08fGXiP3xlhpj/kdG/kj/Xo2x7cLQTH4AHKU1KbsxXsMAAAAASUVORK5CYII='
ICON_HIDE_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAU9JREFUOE+V088rp2EUBfCPYSZJmcgsSGOhzExpsrCwMMWfYGMnyU7ZKAsLNJtpasrGYmYxK/4IFpQdUhJSI+Xnhkg2mmGGnum+9fbN1zfP7n3ec84999z7lHn+eYF/Ga3s+Xy36MJK4pYSKA/MXRQawwSqn3LwGktoL3C3iY9owX4xgW8YxSr6cBTAJmzFd1teON/CIrrRHMBKzONliB0j3X1GJz7lM/iBoQCkkNJJSW/gdxB+BqYi7mYxkBx8wA7qcJmzfIAUYgfWCgKvwVXKJGvhL75jOASS1Rv0YAGDmMv1Po0RVGQCtbjAF4wHMInNhFBVjjyFSbzBeT7ERpxgN0b4J3JoxS+8wjrSFN5mEypcpNTzNt5F5UO8xxnqsReZZYtVdBMbcIpkvTdIX3FduPrFVjlVXkZ/qbfymEAWaKl38l+7GCjd35eqnv4/AN2DP0ArBQAaAAAAAElFTkSuQmCC'
ICON_CHECK_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAsQAAALEBxi1JjQAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAASfSURBVFiFzZdfbBRFHMc/M7t3Vwq09qCAxPKnJbYFKqSatCgEMdGgCKT+xagxkGCID0bA+CT4NyEN/iHBF6I+qPFBTCu+8IKQGMSWllJLQFqsEdoCd71ry9Frr3d7N+PD9Y52uS1XbaLfZLOzs7/5fT87szs7A/+xxCRipwOPAZVAEZALRIA+4BzQCLRPNSDA48IQR4UUMUBPdEhTdgC7gRlZ5K0AKibqgUphigM6rtcACCkoKPfiLZuFp8CDJz8HZSmioSihzgH6zgeJhqIACEMEdULvBr52yL0BqAOGnAC2CSEOaa1Nd56bJU+Xcs/DRbjz3I60OqHpbfXTWXeJgfZ+hCES1furZzbsaog4mHuA/ZkAaoG3ABY/WULpC+WYuaajcSb1tvhACOZUzm1Qluupo8997xu9tR74AcgBDgA77QBvAJ9Kl6Rix0qKHlkwKWMHdZhQfaTmSLXdHGDsoz2K4GOAyl0PMK96/lSYA5ReOdlzHFhqNweQo2e3dMkv0MjSLeVTaU6g1U/bwdbKTOZjAXYoSy2YuTCPJc/eO6XmzfuaUFaCRU8UR2vqaz60x0hACkPuASh/eRlCTGZuys588cYSlm+/zxOTaqc9TgKrdELNnj5/BnPun5sxWd+FIG2ftRK9MZKVeW+Lj+Z9p9Pmy7ZVJM202JIJYDPAvKq7HRNeO3mV7uNXaNhz6o4QvS0+ztQ2oSxF8aZb5gAaSjbU1ywfByBMYx1A4Yo5jknLXlpKfsldhHsGaXj7F0b6M0MEWv2cqW1GWYrFG0tYurVi3P3ojSh/1nVsHweAVsUA0wqnOQK4ZriofvehJMTVMI17b4ewj/nYJ0/p/OdttH/7++tA1S0ARR6Ax5vjCJAJomHPLYhszAF0XKeK89IA6SptD88MUbX3QfIW5TN0LUzj3lN0n+hKv3D2MbcrEUukiioNICQhwHFc7XLnuVn1werRnhik7eBZxzG3a2Qg7XEjDYCgEyASGM4KAMYPBzBht6ektSYSSP8YO1MFU8f1CaAq0OqncKXzl5AJYtX7q7l5JYS3fNYd4wfa+4kPW0iX7FKWup6ql8CPAL7TPsfGTjJzzazMAfxNSU9lqe/G1kugSZrSN+wfwtd4PVPbfy0rbNH1U1fqst4OoFVcvQNw8ZsL6IRiqtVZdwkrHEOY4gTJxWtaxui5Tbrki7FQ1KvjmtkrCqfMvP9iH+cPtaG11iieAcaNdep3HFeW2iqESHTWX+Lqz91TYh4JDNNS24SKK9B8ArTaY4wx5S6gG9jsb/ZhmEbWL1gm3bwc4vR7DYz0jyAMcRzNK2SY7gzb9W9IQLE2eC4gIsFhvGVeDE/2i1Kd0HQdu8zZj5qJ3YwhTKNRJ9QmkpuY2+S0+nheSPGVVtpj5poUb15C0boFTCvMdTSOj8TxN/v443AH4Z7BZKXkSxSvATGndhMtf8qFIfbrhN6QqsgvzqegbBY5BTl4CjzEh+NE+iKEewYJnguirORcL13yL2WpN7F9cv9Ua6SUh4UhhphoayZICFP8CrwKuLJNPpkFoBtYS3JzupDk5jQKBIALwDEgOIl8/w/9DR5k79YG7eHTAAAAAElFTkSuQmCC'
ICON_MODIFY_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAA3QAAAN0BcFOiBwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAKZSURBVFiFzdfPi1ZVGAfwz3lHZWgkUipaRCFIC4MQIbOmxSSBLRIFcRdE4cpZtNWV9AcELSZBK7WpNm7ClUKgFa2KKBF0U4tcRD+MtEn8MTZPi3tHTsf7zr3vO++ADxzuPef5Puf7Pc8999znpoiwUpZS2oDd2IQJfIfTEXHxLigiRt6QMI1/EEWbx9tYHRHSYgZSSlvxGrZgbcvibmM2ImYaVt3DB3ijZY7DETG9qPgA7jSoXaot4Mli5T0cK3BzOIJ38GcR/xK8XHcGIQ/8jDUF+fECcwprM8w4vs/8JxPOYEedlkt4F7+1pG8e5yLiBnfTfgyvZ5jLeCoibuWBKaV9eL/u/gRXMkVTQ2y4Hk70ydJhqn2W4Scz/1+KgMeGIP+omGNuKRGYzXznhhZQk88W8WfwML5qEoHtuJWNHxxKwBLk47V/Al8U/s9wPetfwJqBBdTkH/cjz3ATdYqb9sZVbF48gzoLwBg+aSPP8A/gmwJ/Dc9lmIEEfNiVvMZvL9J+DdsKTDcB2DNq8s4C8Ah+z3CfD0j+N57vg+0k4FCG+QOPjoJ8EAGnMsxbA5K/0LKvOgm4nGG2joq8kwDVYZFj1jVgdjSQT7aRdxUwXmAeynyPY8b/P+dzXcmHFXABP6g+2eUJN4cXi/hn8cRyH0GXguVLbCxi36x9d1S1wT0CelosIm7jdB/3vKrCmVbVEj8W/lfr6xheaZpgVZuA2nZiCg9mY7/gfBQVT2G9PveDCYiIBZztgh3UWh/BStt9ISCvgDePauKUUsLT2dCvTbhVqoJhZ90/mlJ6T3tZ3mZj2IWN2di3/cDb8K/293w57dO+B1F9YOzHzRUiP4v1/QTkP6ebsBfPqArK5diC6q/na5yMRZIG+w8Ygbg8bIo6hwAAAABJRU5ErkJggg=='
ICON_ADD_BASE_64_WHITE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cGBBYXLZ9A5EwAAAC4SURBVFjD7dfBCYQwEAXQH1GwDk8mZzuwCxvK0SpShh3YgUkfguLfQ2D34sVx0ct8CMwlkxdCIAGEIZ3jkRKPGMm2lfYRh/Se33gv7VPICXV9Xj8G+E8UoAAFKEABhnQOGAagLC/NZN/DdF2u5xlmmq4tve9ACIZHSjBN887+YywA8p3FcwxpbT6Cqro08/YRbBsQglhOjuPvQTKO0j6v3wIFKEABClDADcC6ntcPhbSWXJY85N/zD9XJWNi47SReAAAAAElFTkSuQmCC'
# ICON_ADD_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAYAAAAj6qa3AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAAAAAAAAPlDu38AAAAJcEhZcwAAAGAAAABgAPBrQs8AAAAHdElNRQfnBgYJFxxz7ciwAAABq0lEQVRo3u2YP0gCYRiHf+95QZu0lUuQm1PD2RIV6BJhkwYhVAYShSQ1N4R70BFFDQ0VCIFJRNEQWTREgxpCBEE69mdpCBoC9fuazk0w4u6N+p7xveF9eOA43iM4TN/j2Nj8qc8n50WH0I+PMYhphKUUWSToMhQqFrO368bDg1M+mtMB5IDwyNjEBN7whqOeHhxiBZNer/aEAYxMTTnt43gAbNOJDLe3tzz/cwF+GSoAtwA3KgC3ADcqALcANyoAtwA3KgC3ADdkXWciJdz1j2gU4zJJO7pu28YAzeI5GKQhdKHfMKyxvMILrgsFXMgteHI52/bv05qM1Wr6vbjBUjpN/uHwTOKsUmlcZ/8FU2bQXS5r1j3O7cOF7sqIuOwcHa2tucrkjkbxLvIotbXZtpH7FXBrfvRWqzIJgwLpNNm2qAn+k4g3Mbe6ipTshbaw0HiwTCUI08yHDiobm4uLTvn8+6+ACsAtwI0KwC3AjQrALcCNCsAtwI0KwC3AjfMB4jJE2c/Pluc2Y9+Pjya4usS5cO/t1U26o+5IxJqLJBk43d3FKwDjBwu+yRfVWJFYbEc2CQAAAABJRU5ErkJggg=='
ICON_ADD_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAABFSURBVHgB7daxDQAhDARB//dEJZRB/zGIGg7JyazkfOTErgoac+07FfRXcwAAAAAAAO2ALz2nae0biPKQAAAAAAAAvOgAwKsJ9ovGESQAAAAASUVORK5CYII='
ICON_MODIFY_BASE_64_WHITE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cGBBU6HgL8YewAAALXSURBVFjDzZc/LHNRGMafU0UoCbrSSVlUhPgTkVSaELNEDDYGO4MgkZBIWEwGg6XJNwgTCW1i0EkTKk38GUgaAwYVA3H9Ses833Bxvktb19Um3zvdc9/n7fM75z339lyBHAZZWwsMDAB1dYDdDpycAKurQkSjufQFmZdHzs2RySS/hJTk8jJlYSEACFXU2QkMDYHV1RD5+ZktpASCQSGmplKZA36/PvNMlGtrEP39b0Wzs7QSsr7+68z//DGKTk/JsTFydJQ8ODDmentB2ddnyZzxOFlentl8c5MsKvrQSLudcntb5QMBQRkOQ7S16YpoFFhYAF5eMi6fSCTA3V1hi8fTL/vlJeB2C/H8bFwlrxcIhfTR7S3Ix0dF1NhobcN9nvl7LC2RQhj0sq5O5TUNxp5WVv7e/O4uEwQ5Oalyh4eWAdL3vKKCcmcnFQTp85FPT+r+zIwlgLTmb8826XCQoZAxv75OapoaX12R5eU/BvjOXOlSQbzH/T1lS8ub0DyAWXMDhNzf/2LO9vZ/ROYA9B76/WbN9Rqfz7jsn8x/BjA+nnVzswCULpdx9wYCWTE3DcD5eaWJxShLS7Nibh7g+FhphoezZm4GQN98z89K43ZnzdwcgMNh3HzqH/BDI7u6LJmbApAlJUaAsjJV63SS09NkImHJ3BKAjEbJSIQ8O/t65DKak0JQdneTDQ2/aEFxMc2EjMUoPR5j7diYnnx9pWxtTeVv+26FhHh8BPb20ivOz4GJCQiPR9iOjoz0b+972GxAc3Oqaru5Rvl8gNcLOhyK7OYGuLgQIhbLQC9SXv8UQAhNA7a2zMH+LL5tQa7jPwCgpn2MRFVVdn/e5VLXDw+pFHaISATwevWh30+5uIhPR2lr0dEBNDWpcZoniezp0b/XchkbGxlZyZER8vU1J94yHCadznTe6rwuPR6IwUGgpgYsKPh1B8T1NRgMAisrwpZMppP9BbWc4qhCs8IrAAAAAElFTkSuQmCC'
# ICON_MODIFY_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAYAAAAj6qa3AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAAAAAAAAPlDu38AAAAJcEhZcwAAAGAAAABgAPBrQs8AAAAHdElNRQfnBgYJFCB3r+f0AAAE30lEQVRo3uWZa0wUVxiG3292W0O9Fa2VYEldLlGsYBWwoKYC1sYogbIwNYiA0KSiLNZrExOjQuOl1WpCAI23gkWQLqK0GOsFCrSNGrCIxKQWwxKo1laLRlcNhp2vP+xM7G42s6CwLH1/7jnzTZ7nXGbmLMHFEjo19q3lfv7+lkTBQOb9+xGIw0icMgUXUYqc6mpcEdZw0dKl9UajMf/DW7fU6pGzgXoMDuE+LaquhhbTccfDw7ofH8YwXtXSoh0mPJI+iYi44GU07j1544bLCnAUvLciBGcD2kvQNDHe8HpAgGW50EXutbU24M2IRll3N1bxGrQfPWp9PSXDTLv9/CyrLYWaXVVVU2dE/2SI9vQc8ALkERdYusjLzpzBPkxByJgxcjsfQhfmWCzIoB+5ccmS+kXlM/K+S0jgWnxOp9atsynYRknImTBBc/Cl/dKumprQDlFMXzBunCLK2cByQkRRXBE6bx6ypcfdqysrkYwhVKvRKB3+HXHu5Dq6sHhxwyvlB3N1paXWdYJ/12dn3Fy/nmKpCVu2brW50Xj+GiuuXQM0KdwUHu50AfJUF2Isu/jv8+dRSauQPnSodb+nI79pU0PAsco8fXa2Wl1VEQc4D+9UVDhtCSjgy6TLPL6qyh64EnfMRejatcHu+pWG9TNnqtVveKN8Y57ntm0chgfYXlJi02EB7qM4IqLfBdiA21vjEXjAWU+eyL9TLOqwZfhwWonV/MXp00EcxxkcHm7vPsGP9B8ZTAsX0j4kwlcUbTqE4TJONTb22xJQA7de4/yEZ/H3nZ2Ct1CIvRUV8MFozHJzU/pH8W7sffhQ2khe6I6KukTHKI9qahTwUfQuhxYVIQDfIl6rVa77GE2ov31bky8N4buzZ/e5ALXnuDziVEAeHJqSUv9l2YF8zyNHFHH3Yr/K2DN3rpoI/gN1fGXHDiogC0Vu2GAPXNojvE1tc+Zc+sVYlvtXc3OfCXhecJsZpCbCXuyAy80vfA940eByLr16PDVv2dmzUquUgvSYGOs9oqfgcrR4QekrcJuYqJRHjxzJSXiZ6jQa+uG/zXTt6V5i2SMQsX1wOc89A/oLPKhRP2/5N/HxQhglUGZJCaVhCKqeeVHagptwM5st7ZKEzfPnq4ErwlwN3NHNzdH6PRYwWMB7LKC/wKeHxMcZMkSRmzmay4qL+wrcYQGDFVxVwGAHtyvg/wIuR3kMBi+OXZt+evJk1RMYHx5LUxMTewsuv6s7G1wRIIqiKIoaDU0S4jTxJ06ofaTYO4hwFFztI6W/wBUBpj+lSI/UwEAcx04k+/jIDfJUH6zgigDhMZ3jk76+Ni2/QsK4q1d7Cy6v8YEKrgjgHM5hX29vmxYJYxmtrb0FHyhrXFUAvLgQM3Q6mwYD7xRSTabBCq5wcgVthp+tANzF+2hVF+Cq4HK0iEQCd+p0KID52ZcCfo1mYYSn5/Q7ehiQmcknhHuc6u0NL+lnhOl0/BulYYJOx0kczdGTJrkauBwKydK3Z2jMZtVTWUfjIuByBJShC7ktLc9bSP4vjmulDyyfRUYOdHA5Wnanc8KbaWl0l7dLOHSIyzEC0yZORDd9yqM7OlCNEhplMqELw7ittVUo52TBaDKhS+jAfZNJcuP3aMH16w3+k9NH+TQ1AVmU5StJzgZzNP8AFdhd7LR0w/4AAAAASUVORK5CYII='
ICON_MODIFY_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAG4SURBVHgBzZcxT8JAFMffa2VnVoeOEhdILDjC6FbhA6iDicrCNwA/AQ7GuOkH0KSjG7oZcGCS0TrI3FlSzrvKkVJ6FEvv8J807aOP/H45XugVQHJM6zS/6L4OElOs1Y9A05+2cyZ8DXovoFKAwQnAvV8glkUSUgSCcALERsAdkYQGKScIR8TLt8ebQyDkxJdBbBWrF81gf6orEIZ3H65b7Ho46PW3cuYn/dAKr0RqAiI4j0gCIYXMwAGcby9T6NtXblTvXq3eoT1l3rfyDMxMO4BLr42MPurkrUY23GvW6nccrnlehUmuJBBedt3zCkjAoWU+LMHg9HTM4a/2reN/DxJG9JvvW2fGWNM7BMGgZX/kZSpUph0FTywQN3BBCdrnUkg2Cp5IIA4elPB0/WMCiYSz/GkGloWzUHgzDj65nz5cNHCJBWTBlxKQCY8VkA1fKKACLhRQBY8UUAmfE1ANnxFYB3wqsC44i/9XvC74VIBHNXxOQDV8KQGZcJaNYFGqnjdwTGxeTx6p0uAsv0NIh4+dx6i12SaCH7LhLP57wfC9+7y5W0K6oTRo6U4PBIduNA9kwf9FfgD1H5EO9RKFuwAAAABJRU5ErkJggg=='
ICON_DELETE_BASE_64_WHITE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cGBBYPOp6I+dIAAAHISURBVFjDxVdNzgFBEO2aiIifDXu2XEFYIU7DNbDkOMwOS5eQcAF/mUzU+xatfejp+dN4m0mqu1+9elU9gxAJAM5mgckE2O+hYbcDxmNwNpuEMxGA8RiRGI0+KGC3k0maTd2dVks58UEBEmnXg+A8V1GrgV0X8Lwgc18TJVv3PPBiAa5WzRWy60b3+E3wfB5isaq8XLbfvkpFOZG6x++L0PmdtGS2kDEp/ZaAFwdWq8+nXC5Dl8HDoezUdGorJTCbSc7BIMIBIQQdj/JUsWivasV14w4VoDbRswBgvQae7YsbuxcDXUDAEKpNrw7o7//4sRsXxXEAJgFvgMwOBMzA4SA3l0rWBCguxR3LAfqZAx9owc9nQJgd0PPDcQBm4HoFiP7j+ockTgwgklzMgKMVrAWImAXOZyEcR4h8/u3iUShIrtOJiDlSgFShrLJwE0hxBNtv+Byrq2hhDu4c+hU0C7B5FSl8AMNbYNMBStSC7zmQCT6lHHgcwtVKiNdfSnFi4UNoEHAbmAcHiNptrbhYsTRDKLZb+ez1wBmDyGgAuZwQ/b5UpjhjHWw0gMvF3r+RywWo15Op524X2GwA30+f2PclR6djyvMHRma5BDgyq2gAAAAASUVORK5CYII='
ICON_DELETE_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAYAAAAj6qa3AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAAAAAAAAPlDu38AAAAJcEhZcwAAAGAAAABgAPBrQs8AAAAHdElNRQfnBgYJDQjZGuYWAAAFKklEQVRo3uVZbUxTZxR+zm3FrpTMDDdjkbnNqYE5F9QqoZJOjRo3MUgpOhCMc05D/cjmB5owCbgsc5sfgKgzcYu6NAtF3eZMjJIRRFSG1CVkKCNmRpRlGagLbYO13LMfeO0d7q4VW1u359/t+573Pue5zz3n7X0JIUJipSWziKOitF/z6T+2bNlCen6H1uXmogGtWD98uGLgWnyIjo4O1vFd3Dl0yO1WlQw9vnlzS5a9qpg8nmDzVIdKAK22d3PnmyUl1E7F9OKGDWhHK9YHELgNhdDr9QQCUFAQ3S6O6BrG3De4adMTIwA5aRAG5+ZK11yLrWKJ0XhBe/jlPbFnzyrFTZxgycyvnDpVUIlMtXV12IkVbMzLw0KU4mjwBRBCJYD0JKVLf4lLaHLYq3ZnnTmjtE6wQUoDSZ9l7LJmjxyp3kGFSN6/HzmYzNmpqahBDBVFRYVMuEfFNHRzsceDLhjRdvq0eFFoVo9durTJYa8qe+batYAFMMSZh1jLqquhxwy0zpgR7rwGjI04gFunTjWaD+sqbLNm9R9WrgG+Jw4qAlRHBCEqJzb2fLzdviPl5s1w56UEw/X0S9aG2FjMVxXiYGcnGpDBZSYTAMD24HzlGtDP6pGeuITGEd8kVEzp6lLKI3AB/icIuA0aDGaz1Sr14/8OlB3wBS+BUdaOnlBwORxcUFc34AUMH5nPWWNWr5YcMMmd4bF+W1oa7sT6Y9K+zIR8V1mZxHOyOmPiSs2qVf7i/NYAPoGfoHM6pWu6TOPRqdOFO+H+oCviRnh8vMQzwusY5+M9YAEoC7UYIltoMsbilrIAhtnmRGtbfb2hOeN7q03ZesGex6lIwl0fL2EVrmKKfwH8FkExHUcw1OkUDiANAHASo/CnTofpCgE3kYCdKSl4m77814WDPI9qkAivzAHL0II3nE40AqhQjvPrAKGBtyNepmQ6nkd35L0CbKHRcgEEJ9fT8iC8AlxKKmFRd/f9H5bgO14TExPuhPuDlvFJOu7jxeeE5b3bZbwHKoAqDmuo16ckr0A8eiPPAdiLUXJnet8DA0FwgPcX8UbPMVkXqEAc6SNQgJU0Ei4fL/UOUFAE0FztbfU+LXPARgzD7QgUYCtGyAVwWYLkgPquJGP8Jy4XDDBjJTNV83LkREf3jRL5i388IEIH16BJq5V4tmQl2p+1uN2PLABQTMUkihjGUzHO7UYF5SBREMZ/mvvcukVabbhTT6y0ZOZXRkdLvJCOcux3ue7zfnQB+sDryYNBPksN/rHH5J4X/m7w1FbvHm+1jEcBriPav/UfWgC6yC+hxNdW+qps+GuBeowQp0nz8WAbpnOu//b30AJgBa4gxqdsX5UNvwC9N1DKKh8P2ot2qELgANjQClk3EK9EhgOEdCzAuzIHvIVfQyOAhVLkf4qEUd73I0EAUUdG/lzmADu3QR0KAarxG2JlG6Krqm1C7T8UwXsfUvx+iAjSPPLwa7xOtgWehpaHESDwk6FyvsBjuruBvkMrsRwvoEGnQ/LfpzW+emRuRXZqqr/lgjWPK2HCbZ2OgGoAID1l0bFQFMGPKY+GyA4WbNzMNTNnmtjERawO2RGbEky8mBezRkNncQJrZ8++L8g+LuTkBw9AlBDwTi45af4r+aMTEryV9AN95XBQNuXjoEbzuBNXAtt4N/J6enghzSFVUlJT02HHrkmXL/uLC9gB5y8e/Xl326VLaMXvwtK0NHyABbjjcKAZ81Dl9T72jKX73uNBB4XRPGHu3EATl/AXbnI9SypdsUoAAAAASUVORK5CYII='
ICON_CLONE_BASE_64_WHITE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAGYSURBVFiF7ZaxK0VhGMZ/r25iMCElgwzKbCApdzBYZDEoEv+AySCTBQOTzSAUoW5GgwyUf8CqdDeUDeHm1mO4Hz469zjnnnuznKdOX9/3ve/3/s5z3nM6EEGStlW5FsLOzkQB8HQHvEaMbQJagVVJRTNbj1nrW54D2Rg5My6n4MbFoLiMpOEI57W7sVfSp2sPZnYVIXcfGAeWJWFmK79JK1VR0nS5qp4DS5KGJD27+fwPB9z4BBxEuJtPjQFtwJakgpkdhQWb2YWkEeAEWJNU/+WEo8rHKI6kc5f37pyYCoj5csBbG5T06PdE3Lfgt+aADWDHPd+9gJisDwHkgElKPZFJ6kCnpPEgJzwHQpXUAcwsJwlKPeQ7cQnMhqSuAS2JHfDWAp0IOSNfDQcOJb1582ugB9iV9GJmx38dkBSgr8y6AaNAzQAmgIYye/3E+KZUBGBm9+X2/L6IorpKAKqpFCAFSAFSgBQg8Q9JiAYkbYbsN9caoNtdoaolwCml365/A7g1s7OoAB2SbqpUuDFOcMYbu6oEEEsfZ4a0SYpYgA4AAAAASUVORK5CYII='
ICON_CLONE_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAJDSURBVFiF7ZY9iBNBGIbfbzaKFlYqB2IhFop1Mio2Z2EhwiFmN+CpxWkjZjf2VmoRFc7KSyIWcqfccUpyucoT1ELhKjcWtqKNhQpqJfhzJvNaxGguuU02boJNXhhmd76feWY+ZhhBCGnbnQYwEca3TYoX/GLhWpA51ls2eQ/wW0jnTQC2wshV7XhVv5S7HhmAghOVUv5pGF+dTE9AZBqQFZCTCcddXynlr7QBaDtzqOvE4DYBIUbi2s7EAEAMPj5fnHrZlUQ4B8IRIptwXLRCxADzuGuOPx/m7zYq1BLHMmcqi1N3O8fKW6raGIx6IERWO95KczkaJfgCYL7rahqiHKVwRJS5rZPeD7+cu9/J3S/efBZPpQ8rI0ut5WgAfPYX8mfDzq+T3m4AI/Ulck7b3jp/ITfbKeZFsbAcT6WPKCNLzeXo8RS06TyAGwBntO1hLQgaHNzreJfqPwCFJVBOCpnVqXOxSABWrfawqtS4iMwHQghHSYy2YNU7oy6rKAAAUCkXSiTH61k5o23vFADULCyDPB3YBJ+Ani+iYIhEMo1VO1HMzQJ4HRSjbfcigC2RAIxl3dNJ73vT0CuQe6h4Rzvpr36pUO6WIxIAgX0Qrh4UQAgBZAzAgAAsc9z6aTasZaqKtV9U+DvlnwD8YuFDkC3heDtABpnbFPkURNUQYAgwBBgCDAH68h4I0AFtu7c62DcPGmDX79ZRAwMg5JFAJv8bgIDv/IXck7AA27XtvunLzMTGXtxjTf3OvgAg/GMEAH4Bd0/lFie5kocAAAAASUVORK5CYII='
ICON_BLOCK_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAARBSURBVHgB7ZdtSFtXGMefmxvbukyjRLMZB4uMaHOVkc6XVvxyQ6HsDUy7Mcq2QuxYkbqXlEHZvixmIGPfWjptYWwNjLGXDzOCXRkDkwykManNpS8xaKEpdVbWVjK1MTXNvXvOsVdSvSE3ar/1DzecnHNz/r/7nOc85wbgqZ4KNVZf74AnqFGOs41aLDalMU2Y484Cyw5GOM4NT0DEXAvg12q1/gs7d5rXAWRFMUgaoiT1bjWEbA6SVCEyzMn2eDyx9h6GfCCZU8MwZykRw/S2xmIe2KTWmHvaY7FepfsYubGVEGrNHwPYKohizNcBbBaiWHNFgI1AtDi6+ebUXOfh6atOYv5HdR3gFcChhJgVh8Z9p31FAaiFIMYMy7pr0wu8KxGFUvEhPDJfe2sCwTyR3we8qgEKQbQcOOpmsA/NQTbXOw9DubOLjs/cmYOpxDT8PByA23fuyT/zZrIlxwTfiaQqgHwQSua1PT30UtJwIATf/XpeBhEQwi5DsIUAvr97V/igquomGjokAL7lpUY+qn/OqWS+cH8JXH0DEIxcgX0dzatz1JtfAL7tZQiGr8Biaul5lhF3zExE/qQPBSqEFcyLlZLGdtf8v/xbs1OKT754PwXj16Zg8satdXPUGA1wxvMJlOlKSdxdLW9/xKsGkCEulVefJG373K2CYVcSgTj4hp22GUlyFwVANGJ4sXNJo4XNiADQKOBy2hyuCtUApMj03BTM5Mkr9+6lff/099OrGBFzC+YEkUaz7FAFIFc4Yj7L7wPLqVNQ19e3YYjmRssKAIC5IEBueSUF5vyjIlO9f39eCMx03HJzoEasWvNouTHwW02D2YSJ9KZ9Dx3XWa2wzWSC5MgILEQimNwMhJZZuJech1/O+em2bGqog+0lJY/Newl3CrlQQY0ac3KweGusdBtOYnXLVW4k/vP+AANNRvjwndfpdwLx/mdf00KUq8kbK3NgFUywaszJqTYdv5is5dpcy5mHO17BNSSRkLU2EmSN3z3+MS08ZCmC4cs0+ZrqV5av/6chukysKB5j1ZjLYyZraylWRJ5MKi9DPogy3TNwxHN8NeSfHzlI+0g0zgXGSLcQHjz9DavWnMjY0CGwGrEbAdZFQQmCiO96D/c+D4ZKPY3GV9/+SJ8ePb7Aciywas2JZuOhtKmx7QGu3at/Ry5D+y4ODBXlBSGqOjqoefeXJ+Td4cWjmZ6srFpzWTOxSAhzoQ5zwfbX6Dhs31ayurb5IBZxN3w6GKTmNPGy2S6SUxRgI69RGDpfDbe7MpPJ7LkgTMCwPwRlz9LyuhqReYMRriZToI9fgwdClIb9uq5S0GSzr4V8ZxLyXEzYavWTY1atea5aDxx14t53SwyY892zO3kbDs1M0PakTm8/dDEUyB1nojZbRTqddpDTDjYoAoIQnTidGUO88hdMggT24auYONR7fQwMy6mkksf//DVoTYcYxJ4AAAAASUVORK5CYII='
ICON_UNBLOCK_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAASuSURBVHgB7VZtTJtVFD63fUsLAwIhTnCaVRSygBGSFYYxxhcTlS9DmcsCukQwsgCTpWhIiDFQEqPhjy0uG/iRrT9cQsyEEgeMaAQ0i3zNVRcynDM22ogDa0r4hrbXe277ln6MWpxjf3iS9j33632ee865574Au9jFLu4xCOwQagwFaqIgQ4QS05n6/lapXwY7BJmC9AAFNQWqr2kv0O+ogNoPCg2UQrbUJjJikWwB7jLqThW1sF3rpDazWzvrL5n/VwEabY1IBHkpoVRNKfHslIA1+aF5BwW7dpMc2hm53n/tHSUhJ5bLW5gpBo9FqZyQqbGBXHDz9tqq4Djb+EVi8Lz/LEBzuK6FEKJHO25PDBSLh+BgZhqkq/eBfXEWPhnUw7prgc9dXxVg2vIAPk0bLkWDxWx03JEAf/Ly4nyoPlrIRUh4t6sebH/9wu0Y5R54MrUaTBcuw8ycHbssTES+JEIO20TO4bpKRm5Eu/nEMXil7DlQRin42MLSCujPvgVziz/55r/6fBOIB0UQcx+HkfFrsLi8kiwnbtUf1ycGcXxbxzBbW6NmTsOYwxtVL0JJfl7A+DdT3TDvnPK1i3NfhqzUJ7idsjcJOltPMk9Fo991miOvi9sWoJDJRLZYjbFG1/tjdPor6Bs/H0COP3+gCGkdOzEtIQKwXNaeKuzRGcSE20vw7P61o0UBvfaFW3Dh2w83OzYSQ8gloADuBXZysrW6BJ8ARqwlArnKTO26IsYQvBAn4+5xMXrAn9zY3QTLa0u8jRk/9/t+2Aq4Pk39ILdlsnXtpgdYnWb/fOeU0kpWPnX+CwVY5QUm3bsYgaRIjiIQSnmc57ithK9v0gYYudonoOPkgBErlW8WgZbq089mh3tRP4u5RI546elG7gGW6ezI/Q2RICAHVE6lnj2kiyJBoMKW+YAJ9/UPvpIOR546Dgf2Z0LKfUn8OJbWNsP75z6HBSYmYgHGBrODOmkZMz2VioVlTYg+hyZzqhWfN6w2GGLEwRn/TJaWx7e3o5UVJk+SdvUNwbE334OLw6MBpDd+tfEnq4LWkEI0OXjTkVOUhpWk3Nt1IKcwbd5s6Lq0LyNXJ1cuqeacw775Wal5UCHWB7wDY1zCSjMWHgzFyPiPXNxj6Q/z8dPne3mY5G53w20r4eTAzWlNUVoiU5jnlVqgKXp0ZHE++tYjGbOidMEkxd8PJ154BxRCVMg7sDRXlHjO/PdTP0PT8XLeh97oGx7Dbst4T0db2LuAHc0hkG464gmB97Rwcl1ZGyTF7YV/w8LSMidHb9Q0Gz0JSmnVRPcZU9hKyPKhCvzyQSJHXB2LB7t9HSJBCDmACcnRCHsZYT4w148RIJX+/X/+lmCZsamSv7x8hV9EUmy3whUWgsa2jzg5TzyXq8o2PRnZbcjywcpEECZCxDZ+Un36trkiJeNQ4sbGRt53lutwcWgU4mJ5eYWkhHj+nJm1w8jENTCwo/jxZ/086Ri5ReZyFY6aO63S+yP+HvDmg6OjfqBM6uNXM7sfKNkMzRZwUELaY52CcdjvYwQR8Tch5oMKVgMWe+NoQiFMRCnbj5rtyFM9KVgpJi5198a6laZgYgn/AHyK0qEpHnfuAAAAAElFTkSuQmCC'
ICON_APPLY_BASE_64_WHITE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cGBQkPDYnz3/UAAADaSURBVFjD7ZQ9CsIwAEYtpGtGCb2LnqGXk5Br6JaphRxBpIfRPIeAVeyf2MTBvD3fexCSzSaT+Qfw+z3UNb4s04opCtCaB87hpUwoN4Y3jscfygGuV7wQP5IDNE1k+eEwLu86qKosnx7zZRne7G63XD5155cLKLVQLiU41x/WGooiiTwMnk7vI8YMRawv90LA7TY89hqxurwfbtvx0RARTR4ClAoDUxGR5P1VbLdwPvMxK77zzyMifDLLI2L+cLMREeXzEQnk4xEJ5Y8IlMJbi7f266eWyWSeuAN4YjZi8rn4owAAAABJRU5ErkJggg=='
# ICON_FILTER_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYEAYAAACw5+G7AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAAAAAAAAPlDu38AAAAJcEhZcwAAAGAAAABgAPBrQs8AAAAHdElNRQfnBgYJJA3tNo1yAAADuUlEQVRYw+1VbWxTZRQ+7123McQR5t36gyyZMphYIrDdC8qqa8LQaMY277trpCHKgLVp3xKCEjDLcND5Y9HJcO4jA+OoCYotbJAuSJQEMsiypq2QukkGGZpucWCFGYpNtq73+MeSODMrW1k14fn55jnnPM85555LhK9opdnV1UUa4C75vLwc/uvgoRiEUIi7htn4dUmJilTBSvJlRgasAB42ut1chDutnDaZEq1zKlCHauLVaDCIC4nl6NHJI0Qin6WlwepeucJsz80Vv6HPs93BoChLdrN9y5ZEC44it+mV3B1nUlOFX+kp9sSVK0K35DP/Yrf/jSisrthv/tFoFA9IfpZ07544Un6VuZYtS7SBNZnSbcszBw+KQN9hTw0Pa7V6vcm0aNG0AeIIHWAuh0MI0XVsldtdkG+oMlQlJ8+18ILfXutgbRs2iPOojanD4QKkyFCnm8rjpj4opSmXwp+aTGQP6KB38WJu6+1g8qWamjkTnr+p3VDF81wNdx3estnwW2KAbfX1XnKStJALF2bcAeF7WTZ9UVT0sA1Ed1zolnws4PHMegNEmX5kth86JGqpjx3x+2Pu4CyEs4DBEP0GhTpZNqXk5cWK42IRxl4ItSUt2LsXT8ENePfOnfHl436ytakpXsKjVxBWkfMQbmggHhgibTt3evY5HG0Tg4Nx65DYTN9gyzUaMYPq2MpQaM1jUo0lS6+fab4iLMJaVKnEHprP3u/ri/5QHzRPzAlE4bacPN5ydWAA9+M8eLG6Gl8lZ/BYa+taLEMj5uQ8aOHQe5kLA5NWK/wMx8CbnU0KI3sIbN8et47/MwgRbtBqlnP2rNBHnzT7e3pkWZZlOSkpVmT0GNw/Dt2Sb8eK4uKZKvnXE/grEFFWdoVfqqyEpTAfHtdofmpUhKzdmzdPH1OLtchxpFSZ5HwtLXCCWEFqbvaUdD77Sf+5c3NsAMDr7co8fHh0lHsae7hCmw0qsYJoS0un46/d1J861r1kCfDAQVCj4e6O96pG6utnWn/WBu4jD+qg7OZNcBEnMp6fjqZ8yJVFsngeRKBgQXTpneqPnbduJd5AgvHIQKLxyECi8b83oHpYiZ8bluVdvWlpk2Flafg8pTAWWYdDRiNKxAMpgQC0xqdO/CbwMhrApFaLH9DjLLO9PfK2MjTx++gosWI50sZGsJJBVHm9kflcPyqFhfEqS2abQNxXkW4Or18PHYqHbOzsxDqSTr67eBEuw5s41NER0nLp/AKn84fXHScOkImJuDXsT/wBYvGEKnzpsjgAAAAASUVORK5CYII='
ICON_FILTER_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAI7SURBVHgB7VZNUupAEO6eBNccAW5AlbjPO4Epdf/C7j21CjwBcAKhSix34lpRbyBLS1hwAzkCGzdgMnZPJooIJkPwr8qvKplOpjP5vqnpbwbgi4F8K+7sVVDCIXwS6KfDu04rz7HgW/+i1SACQ/gkSCnrUWxHQSCwhFLeUDia+Jn84LoxghWiuLVbRcSaUn953I7eiyjoXxx1JUCXwuyaGFdghSi4/3KAqMYMEEvTfeJVJqKaGolYVh+tCBnLqpLyLIVtFrqQgO48A54FS6xkUWohHseW79dn+8XsC0qqUTOSgG5xZ9+BlGD1OmzfXp8MYwlwEq3SJse0KKuQAhtbux41Hi+8eernEmA8BmsNargKnPXtfReWBioBAUJznvqFBLgEJUI9TJCHBbeSBUMo9Qg5Vs8+syhPLOrQHw3oypmWZUg4VD9tOkYE1MeIB7otm8yCLcblSH1vynSMCUybU0ZMEi1ILjt2PDW47/+JyxdxCSjkQRhAJYk5xZWdMYHe+fEgAGzqwU/fy40znaUIMHzfroEuy/fMyX4miM0k6hMTUGUZY05cdrTonNB0HhuQEIkIMNic9JnB0Q43g5eyS6reiADPQgDyTP2EvOHt/8N3cWW3NIGPwi+BXwI/kwBtNpvr7v8UB5UX2CbJ7HI6LAhLXG1s7/Fzd5LQ9+fBaAbYZGiTyZPdlbQr5ujyaJO6hyWBkAK8MdHe4FG4CeG5H3qdltGYqQhEcOi09CDGLp2c/vY7rdhDyLfCE93c3zZs1MgRAAAAAElFTkSuQmCC'
# ICON_CLEAR_FILTER_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYEAYAAACw5+G7AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAAAAAAAAPlDu38AAAAJcEhZcwAAAGAAAABgAPBrQs8AAAAHdElNRQfnBhAOESB65Q13AAADQElEQVRYw+2VX0hTYRjG3++opK2FESpEjaLMnDdunnMmapFBOS1X29nRQUGombizRUKSRRCW/bGoiJrG7B/Rha6WimmSxm5cqTUHaogsupBJlKZeaIa683XjKSjkmC6L2O/u8L3fy/M+3/NyAAIECLBEnManMUEokjRtJs2aNcL3YrsuuoEYFMuyRlt8POXswcOX+/uD34XweIXDQal7C4ZbPB4ymtWbw2h6aUz8DRIStENcmVJJVTN9nHZwkGK1L402tVo4V23UPTVmpaYK5wlK5hUnVan+tu4fjs8Ko29rhwrdu3fPVU+u0h01nUhOJp1MJNfh9dIenbpwU2LikgsXHBeEJIxp73GVO3fO9z59lRkxr9269fvgmSxrsm7Y8M8L/xnyLLOJo4uLSZ0+0nimvFysfsFLrDy5V2eSp6WhbNQFroYGHMeXQ1dOjiu8NsdS2NKy0L6oFXqwOjQUlmMNbJme9vsAguNBniA3vl5TgyrRLYgZHQ3d6IuefN/evlDhlFdPcR179oAPPGhdfj7u4y/MtFosfhtAWE7CRVyEu/X1+CDUE0V6PU6G1VhZVzdFhhwOO9zcnLxa05ZbLJXOty9p1ceaGtPTwYDvQHdFBV7PP/DJMjJcrtoIq/XDh4Ua8sNxJas/MiKTiWWcPMAcMtrKyqg0Rs55nE7as99sblq5UsxxKoXp5qoGBqibjIGLjYtbtOBfhM0uE8UySqOtpES0XmQQSsGsM+ZlZvpLuHiEcvlW1I4xvob3oRSExMrfPLTfrsg6dQpHQBJ2OxzY9PUFH/3sGfmFZQs/Z2eDBBpRosUCBjgPV9PTX5vs1Za+t2/97rzAfCM05/1OvcF4yW6nSpkRU/j4+B+Lihi//YedXU4hKnSMpq0glyT9rUs0Er8I28ZUmpsUChQFVXyIwwEqyOfDe3uhDz6hmclJuIfK0UWJBAbwR1ykUIAMRaFrbjfk4OO4ZGJirr5YCedQDM8Tu/AOoj0vrzP6SfONDK/X7wMI0J69KeYmuRzvWtbouyKREJH4EN7M8+gx4OD7QUE+K3Flar1USjznjxHbx8bE+vEyAJTq871+JLdFsN3dAKWoFPG8Hx8rQID/km/eQo5c4yC21gAAAABJRU5ErkJggg=='
ICON_CLEAR_FILTER_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAGPSURBVHgB7ZW7UsJAFIbPbsDaWp2RGhsKBy3JG6BjL3aOFuITGN7AQhw7sFZm8AnEziEW2EhLI3Vqks16NnEzIS4hF7Tyb7LX799zds8E4JdFIIN2D8+uCJCGByBgDHvt+5UZeHBCjAikschEg4xw/LY4IS8Ir2G3vlWuTj7H5ntmgyh8+HhjTD+Gg42dPRJnkshABZdzy0xoHrjUG45hulqizQG64TmaFy7lOE5XNU5XAa/UT0tFqj17awEm4bmCEn503iQcjFRwAiUBp4zpEBdBpd5cR/ix7HPOt9PAX/t3k/AaLQovarYItSI2oJGFm2ub5WppOjaf0sK9DCyCy1BdhHCEYLNr9tonaeCBgQouN+wjLGxiM9ZKCvcM4uBSERN5sqVwIVrQZh0BFx3OZgeqDWLMpbSfFu4bMPcSL9NfqK11RETRRV5NcLeJTQsrdZAU/n2YHykY2ayoj/rXVgD3C84CynXz4XYEKRS8IpVJgc4u8sDnDBQmiYRPN/anNVfJIq/UZXpwJ//6C30BOkUEgAeCF3MAAAAASUVORK5CYII='
ICON_UPDATE_LOG_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAYAAAAj6qa3AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGYktHRAAAAAAAAPlDu38AAAAJcEhZcwAAAGAAAABgAPBrQs8AAAAHdElNRQfnBhQNLSJqPDyqAAAKYklEQVRo3tVZeVxURxL+6s1wCAFRDg+MAdSo8QBhBl0NAZGoSxIRhknEa4OJiAx4rKgRFQJeSNgcchgHJRGVGDlk8PpJPICgLiAYs4oxihckGAQRDxBm5vX+ge/p6rJmvUi+f+ZX3dU1/VVXv67qJrxguDgHbAiaaWVFMS1/kUjNzaWOkhXsSkuLdmLzYt62oaGsbLdMrW5qelHzoWdtUJ6omKQaOGgQ1rOp1O+99xBIVazU05NNQivKhg4lXxRilZlZuwaMEAWnqip0YqYUUlrKVnDJcNy92zjcsEYvz8kpKkpPX7++oeEP4wDXxb67QhscHZmGG8WOxcbCDDOxZ/z4Z+1YVKIeRc3NrJrlISYlhbmxRu2e2Niysp3WanVNzQtzgIvL28eDgkxMaKJRtdRr3Tp6mY2n9YGBSKIpeI3jBD22E29g6a1bZIdDSN+3j/ogkAoPH2YmCOOtf/mFJ+ygHbW1gr4khO/LF1pZ8Wc5CSdzdIQduuOauzstQAoGenpiCHLhL5WKE7HDRUxsbKS77B90ccGCkl3ZoxODNm1qb95KpVKpVEokF4/wy637zpnDaZktp6mo+N0OGFGlVAa/ZWurO6lfLvlao6FoisbHLi6ighe+Y7FXrkCFpVQRGdmQ3ZTC1W/ffn7OvvMJ3i0tT7pCI4f6hgfvt7HR+kjUnOe8eXBjg2hJWBiWoieaX3pJVNyA03BOTeU/tHTT/jM4uKxcnaJO0WrFhfvJ3yOkwceHm8YsaVlODgIwApobNx7rABdnpf+c6717UwJfqD939CjNgxvSbG0hhwKhjMGSglnf2FiTGNPGO9KYmALaTJvp7t0nJfw4DIv3S1RNfuUVyTgKQnpqKs1AAFSenqLCRpaE4RqN3UpJWO0uhSIjIyMjI0Ovl/n524TErF1LVcyNflu0iGUyNYuvqODa+6Ohn0yzCZ9qaspp9Wv032o0InFhL8azg2QcEFC6IvNmskFExPMmLuBEeHZoUvrly/Yx3JRa5dix2MlcMH3DBlHhQ1Kh2MfnUr3eodvVdeuEZpLwibR8+HBR9qBSulpS0m4EyOYoxqpupafTMZjho4AAccW301Y2wd+/9Hrm3uRz2dnPm/DvA5F8sd/mkIZNm3CIcmlZYKDYVUnNLE+hwHbWQD6bNwtbh25iGlXNnv1IBMi6+M0LXTJqlEhcwGn4sm+iojqauOuniuthvdzc5EqlMmSHk5M7c2dRTCLhv7Mq0i2aNYtFsSh8XFYmDpjLf0kX0tIe/mbw3VBDwcXFjziAXCmPzYiLExv+BgMc+uknk/w6Y+voNWs6irhLtcJQ5ebtzb7BTN6nsBCXeJ4KTpxo8rb6su7rxkZKrj8gXX7wIK6RDQ26elUcuJvmI9jUVJSt4AVZUxO7bVnesvPUKfFYkWf5Jaomv/EGYnEYn48cKTrkR/xMW5YsKaACiiadrqMcIGnmfLglly6xRn4Yn1Vfj84og7GlJepwAMdNTCgMznTczQ2Aiin/h6E49jKMysvLhqhnq1O02vsRMBw3MXfyZFEuhR32VVeXqLPKE2UaTUcRF1DSLyMjwbuiwuRs3RKrjd27kyf/Pq10cmoL+VmzhGMQQ/ABPjt1iqWiBWP0+kcMdYEF+hQWCuL9xCKNRsPLywtAGaYDSEUCbDUazABwgbGOdoCA/4zEkyex9t4vAECtBuCND4BRmglFMxaamekspDeMr8lkfAGdpgW9e/M+rcbaTRkZgj1ycVb6B83s3JmT8MzA8MYNoYPfQvVs5cSJZQMy85O7dHwEPC9w9BI/xsjXweGRnin6DEqqquroCT4ryO39eoWMCQmRXVBEhK6aOlVolyKJO6S7YW6OGTwePhK0V568yPijwMVZ6R9qM2QIJDxjA5KSKB6DmR9jI6qUyvmj9+7l0Kf1ZYy7cEEoLlAHHmanT7dVWQ8cJ39WHNK9xaK7dxflUmQhkUji1DK3cadWyx030Xy63rKqqsXVpLrTZltbvoullbZ+2LA27T/Ox+9JwW3l9mNdly5iw78wAZk63ZH63NdTP7l9W4z6HxduqY3feufOw1XUnx1sInsNB/v0ERu+hitGCmU4Y49kgi4uvteCgnr0kFdPPKMqtrTsaAJPjQb6CD29vEQ5C80s4PvvBVF0gFBmchc5pUFxZSVWS07A/No1+VyFZ8jF8nJ5qSJCtT4uzvWcf68Q87FjR1QplfOPdurU0fzag3C8w5g1oPh+ZoswyqSfDxwQRLEalPXzawrZERpKFjSNChISHvcHLJ0lY/rdu+RB/VF85AjZs/epJi+v5Xv9Z5LVavVJ0tAXdD+veNGQuyuaQyKXL0cTplJ9TAxG4xaLbm3VFWkjuRn29ieO5r6emPvrr2IEUCZu0t0HQuVhDGKLEVZXJ+pPphCkGRujJ8bg7JgxrIWq2M21aw2aJVpdbnR0RxF3ZD5sLrOwYNmQYf68eWLHHOZBlV99JRAXmqVt5aRU2vQuudQd8PAAYP9fLa8kUzTm59NsjiPHRYv4WfrlzPfNNwGAMS8vXKdaOjx4MJfOGvneeXkdQ5/IMEkaoHtt40ZsxgDy7NoVJiwVPbRa3XZswRePVrPSO81WlbXXXV3pEuy5nM6dxZ5VCEOnLVuwFAlonjYNvohEmr8/s+Mv8u5lZcffzh6abB0b26asVncM4fuQVytsVMXz58MXWqQpFGKHDY1mr0ZGngjPKk9edvnyw+M4VGIeV/BA6OtQAqurV+1SuKTay4GB7H3swooHVtQa4TRk9WrZCkVflevChR1NXLZQcV0liYjAanwO8/h4oZ3tYV/hzO7dpRlZ5cnvrl3b3niOwIJxty2UAQCX2SbIDx4ULhONIrWHmtf4+2M8W8g+LykRMinKhSPkcXGyfMUxldm2bW2nQteuz5uwcDzL8xT5qvC0NMrHTASvWiXMixWgBkeOHzf2Mw7m+0+ffs8d7SZ0HGpoFcqdnIQGmsnlspj7K96WMd261RqjH24gHTeOfYv+2LN/v6i/EPGYPnmy7iw/qPXXM2dkTYrzoQ7h4a7npoSF7TU3f1rCwkdNbqowDJ05dy77gdPi6Llz4tYUVjwESZSxZ09rksn5ToM9PH7vCxK59lfkhE4IDmZDUclPHTDgjpI7Zq1ctKji3YzMaGptfXiA8MBwqZZPsx4YEYE52Ebnly5FLPahi5GROCHhmGwCw9n9+1k/uk0fFxVhK72DhNOnaQ1/i/+0ro5JJSMkR4monjXpe/XqxarZOk7v4IDbzIbZubtTPPmzHWPH4jDMKMrQUJzIvdtp1OMwfoiLM0EdrLBy5f97c/XUT2NtIfnqq6iQ/IaMZcuwig2DxaRJaKIZqDEweFr7Iu7l8HgHQ1hCVpZuODtKOYsXC9fkT2r2mT+ODhs5oSh0Qs+ekmtSZ36qnx9NgCFe9/ZmK+gSOTg7kzsW44Nu3R4eJ1xhURXscbi6Gn9HNP565gzrROvYwJwcRgY9dKuzssrKv5mlTrmfjzwtnrkDHodRlm1XVS1VlG30kYWFPlniwIVxXEtvSb7Vtpqa9rbe88K/AYtyq+GYk/nhAAAAAElFTkSuQmCC'
ICON_SAVE_BASE_64_BLUE = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAEJSURBVHgB7ZZBCoJAFIbfS7tEtGgbbVxobT1CaQdwGRZ0hPQGLaI6RJRHcC0FrVq36hIhNk8IKqQZNTJiPhgc8J/5f58PZgAkJTDscUIDSlCDipEBZAAZQAaQAVSeQOuPWnVF2WGSBNF26YMAhu1OAdC5xvHgGKzP77TcCqiq2qIcCaLXtdwZT6+nGpzTGgVQ4+m5AfabRcjM0y/nhSBzZBqas6d/CFYBb3+hHmAhPF6IV/OIrRHYGhQQ5HKKwkanhwhgMgez2TbIyaR3DTYvYp7qISf6cOKxhsz8DXnNCeEK3HmqREnzQgGyQhQ1L41huQ4N+As+ccMt4iMPo987Db/RB49UXgHJDWyLW9JxL6HiAAAAAElFTkSuQmCC'
ICON_LEFT_ARROW_BASE_64 = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3/OAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAFXSURBVEiJndbLbhMxFIDhT0kGnoYNqKVcciNJuyvP1jeoEOIeoKUtb8St2+7NIk41ScaecSx5dTT/b9nnMkIISjZOcIfQsk9DCErhx/iFx4l4hQt8waBIgEWEP8nAv2G5hncWYI7fOEjEBxH8FdVGrAN8FuGHGfjnePpqJ94CfxXhR4l4Hx/xvQmeFWCKP3iWgX/AJR4kOYmPJxH+IgN/hx85eKMA4wh/mYD38BZXbfAdAUb4i1EG/gbXXeAbAgwjfJyBn+MGD7vA7wV4FOHTzKOf4WcJPISgZ7X68YS5VbXEm9dWzt9i0pI55VdUg8yiJPUOfbzf65EbJKlMWhdYeZrWIHP8wzARH+CTfQqtQZIquHWTK28VNcgiSlItY2A1XMqbXYPkeUaytE+7rkGOrQox1VnX06x84DRIUrOhildVPjJrkJMoeZqR7Df0tyRdfltehxD8B8k8yTaHLwT/AAAAAElFTkSuQmCC'
WARN_FREE_SPACE = 80
ALARM_FREE_SPACE = 95
WARN_LIC_DAYS = 30
SYMBOL_UP = '▲'
SYMBOL_RIGHT = '►'
SYMBOL_LEFT = '◄'
SYMBOL_DOWN = '▼'
SYMBOL_SQUARE = '█'
SYMBOL_CIRCLE = '⚫'
SYMBOL_CIRCLE_OUTLINE = '◯'
SYMBOL_X = '❎'
SYMBOL_CHECK = '✅'
SYMBOL_CHECK_SMALL = '✓'
SYMBOL_X_SMALL = '✗'
SYMBOL_BALLOT_X = '☒'
SYMBOL_BALLOT_CHECK = '☑'
SYMBOL_LEFT_DOUBLE = '«'
SYMBOL_RIGHT_DOUBLE = '»'
# SYMBOL_LEFT_ARROWHEAD = '⮜'
SYMBOL_LEFT_ARROWHEAD = '‹'
# SYMBOL_RIGHT_ARROWHEAD = '⮞'
SYMBOL_RIGHT_ARROWHEAD = '›'
SYMBOL_UP_ARROWHEAD = '⮝'
SYMBOL_DOWN_ARROWHEAD = '⮟'
MAX_LEN_LOGIN = 25
MIN_LEN_LOGIN = 2
MAX_LEN_USERNAME = 20
MIN_LEN_PASSWORD = 6
MAX_LEN_PASSWORD = 20
MAX_LEN_GROUPNAME = 20
MAX_LEN_GROUPDESC = 100
MIN_CALL_TM = 10
MAX_CALL_TM = 120
MIN_CALL_END_TM = 1
MAX_CALL_END_TM = 10
MIN_TONAL_CALL_END_TM = 3
MAX_TONAL_CALL_END_TM = 60
MIN_AMB_LIST_TM = 3
MAX_AMB_LIST_TM = 90
MIN_AUDIO_PORT = 1025
MAX_AUDIO_PORT = 65535
MIN_PORTS = 20
MAX_PORTS = 1000
MIN_PING_TM = 2
MAX_PING_TM = 120
MIN_DEL_DAYS = 10
MAX_DEL_DAYS = 1095
MAX_DEPTH_LOG = 100000
DEF_PING_TM = 5
LOG_DEPTH = 1000
SSH_PORT_DEF = 22
SSH_PORT = 22
SSH_LOGIN_DEF = b'b21lZ2E='
SSH_LOGIN = ''
SSH_PWD_DEF = b'b21lZ2ExMjM0NQ=='
SSH_PWD = ''
LICS = ['', '', '']
LOCAL = False
COMPANY = 'ООО "АСТРАКОМ"'
SALT = 'omega'
DEF1 = '58eb7b6988ea079322a6a3f143166e595500e36f6317cdf169c0131573665313'
DEF1A = '04533cc2be3af54c7f5c827f07417a14ea8f1ba5ec2b6a2756b101c5446cd0ae'
DEF2 = '1d053666c10241ec97f4b70a168d5060425476a34416ee20c9d9d7629b083292'
DEF3 = '0b85f52e2913b7299ec0198b5a97029e6c85aea67dec83c685029865881674ae'
DEF3A = 'adda822db661d29dbf6a00fe86c446df41c9c71bf70b82454c829504a17d847f'
DEFSSH = '738344928e9d24022d6c7f66f0a200032a66d4524b649553d4261ed23916cb86'
role = Enum('role', 'allow_ind_call allow_delete_chats allow_partial_drop allow_ind_mes')
user_type = {'disabled': -1, 'user': 0, 'box': 1, 'dispatcher': 15, 'admin': 30, 'tm': 100}
# OMEGA THEME
omega_theme = {'BACKGROUND': '#ffffff',
                   'TEXT': '#000000',
                   'INPUT': '#f2f2f2',
                   'TEXT_INPUT': '#000000',
                   'SCROLL': '#bfbfbf',
                   'BUTTON': ('white', '#35536b'),
                   'PROGRESS': ('#699349', '#D0D0D0'),
                   'BORDER': 1,
                   'SLIDER_DEPTH': 0,
                   'PROGRESS_DEPTH': 0}
button_color = omega_theme['BUTTON'][1]
button_color_2 = '#a6674c'
status_bar_color = '#699349'
disabled_input = 'dark gray'
sg.theme_add_new('OmegaTheme', omega_theme)
sg.theme('OmegaTheme')
#OMEGA THEME end
version = '2.0.1'


def get_branch():
    try:
        get_branch_com = "git rev-parse --symbolic --abbrev-ref HEAD"
        branch = subprocess.Popen(get_branch_com, shell=True,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
        err = branch.stderr.read().decode('utf-8').rstrip('\n')
        if not err:
            try:
                output = branch.stdout.read().decode('utf-8').rstrip('\n')
            except Exception as e:
                print(f'{e}')
                return 'Неизвестно'
        else:
            return 'Неизвестно'
        return output[:10]
    except Exception as e:
        print(f'{e}')
        return 'Неизвестно'


def icon(check):
    box = (12, 12)
    background = (255, 255, 255, 0)
    rectangle = (0, 0, 11, 11)
    line = ((2, 6), (5, 9), (9, 2))
    im = Image.new('RGBA', box, background)
    draw = ImageDraw.Draw(im, 'RGBA')
    draw.rectangle(rectangle, outline='black', width=1)
    if check == 1:
        draw.line(line, fill=button_color_2, width=2, joint='curve')
    elif check == 2:
        draw.line(line, fill='red', width=2, joint='curve')
    with BytesIO() as output:
        im.save(output, format="PNG")
        png = output.getvalue()
    return png


check = [icon(0), icon(1), icon(2)]


def init_db():
    drop_db('all')
    users = get_users_from_server()
    add_users(users)
    add_groups(get_groups_from_server())
    add_user_in_groups(users)


def create_db():
    with open('adm.db', 'w'):
        print('Файл БД создан')
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    with open(Path(Path.cwd(), 'config', 'pashi_db.db.sql'), 'r') as c_sql:
        sql_to_create = c_sql.read()
    cur.executescript(sql_to_create)
    con.commit()
    con.close()


def get_users_from_server() -> list[dict]:
    res = []
    try:
        res = requests.get(BASE_URL + 'users', headers=HEADER_dict)
    except Exception as e:
        print(e)
    if res:
        users = json.loads(res.text)
    else:
        users = []
    return users


def get_groups_from_server() -> list[dict]:
    res = []
    try:
        res = requests.get(BASE_URL + 'groups', headers=HEADER_dict)
    except Exception as e:
        print(e)
    if res:
        groups = json.loads(res.text)
    else:
        groups = []
    return groups


def add_users(users_list):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    for user in users_list:
        is_dispatcher, is_admin, is_blocked, is_gw, previous_type, enabled_ind, enabled_ind_mes, en_del_chats, \
            en_partial_drop, priority = 1 if user["userType"] == 15 or user['previousType'] == 15 else 0, \
            1 if user["userType"] == 30 or user['previousType'] == 30 else 0, \
            1 if user["userType"] == -1 else 0, \
            1 if user["userType"] == 1 or user['previousType'] == 1 else 0, \
            user['previousType'], \
            1 if role.allow_ind_call.value in user["userRoles"] else 0, \
            1 if role.allow_ind_mes.value in user["userRoles"] else 0, \
            1 if role.allow_delete_chats.value in user['userRoles'] else 0, \
            1 if role.allow_partial_drop.value in user['userRoles'] else 0, \
            user['priority']
        db_insert_user = """insert or replace into Users(id, login, Display_name, is_dispatcher, is_admin, 
        is_blocked, is_gw, previous_type, en_ind, en_ind_mes, en_del_chats, en_partial_drop, priority) Values (?, ?, 
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
        user_data = user['id'], user['login'], user['displayName'], \
            is_dispatcher, is_admin, is_blocked, is_gw, previous_type, enabled_ind, enabled_ind_mes, \
            en_del_chats, en_partial_drop, priority
        cur.execute(db_insert_user, user_data)
    con.commit()
    con.close()


def add_groups(groups_list):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    for group in groups_list:
        description, is_disabled, group_type = '' if group['description'] is None else group['description'], \
            1 if group['isDisabled'] else 0, \
            1 if group['groupType'] else 0
        db_insert_group = """insert or replace into Groups(id, Name, description, is_emergency, is_disabled) 
        Values (?, ?, ?, ?, ?)"""
        group_data = group['id'], group['name'], description, group_type, is_disabled
        cur.execute(db_insert_group, group_data)
    con.commit()
    con.close()


def add_user_in_groups(users_list):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    for user in users_list:
        for group_id in user['userGroupIds']:
            db_insert_user_in_groups = "insert or replace into Users_in_Groups(user_id, group_id) Values " \
                                       "('" + user['id'] + "', '" + group_id + "')"
            cur.execute(db_insert_user_in_groups)
    con.commit()
    con.close()


def add_del_groups_to_user_after_apply(groups_for_user_dict):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    print(groups_for_user_dict)
    for user_id in groups_for_user_dict['UserIds']:
        for group_id in groups_for_user_dict['addGroupIds']:
            db_insert_group_for_user = "insert or replace into Users_in_Groups(user_id, group_id) Values " \
                                       "('" + user_id + "', '" + group_id + "')"
            cur.execute(db_insert_group_for_user)
    for user_id in groups_for_user_dict['UserIds']:
        for group_id in groups_for_user_dict['removeGroupIds']:
            db_delete_group_for_user = "delete from Users_in_Groups where user_id = '" + user_id + \
                                       "' and  group_id = '" + group_id + "'"
            cur.execute(db_delete_group_for_user)
    con.commit()
    con.close()


def add_del_users_to_group_after_apply(users_for_group_dict):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    for group_id in users_for_group_dict['GroupIds']:
        for user_id in users_for_group_dict['addUserIds']:
            db_insert_user_for_group = "insert or replace into Users_in_Groups(user_id, group_id) Values " \
                                       "('" + user_id + "', '" + group_id + "')"
            cur.execute(db_insert_user_for_group)
    for group_id in users_for_group_dict['GroupIds']:
        for user_id in users_for_group_dict['removeUserIds']:
            db_delete_user_for_group = "delete from Users_in_Groups where user_id = '" + user_id + \
                                       "' and  group_id = '" + group_id + "'"
            cur.execute(db_delete_user_for_group)
    con.commit()
    con.close()


def del_users_in_groups_after_delete_group(del_group_id):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_delete_group_for_user = "delete from Users_in_Groups where group_id = '" + del_group_id + "'"
    cur.execute(db_delete_group_for_user)
    con.commit()
    con.close()


def del_users_in_groups_after_delete_user(del_user_id):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_delete_group_for_user = "delete from Users_in_Groups where user_id = '" + del_user_id + "'"
    cur.execute(db_delete_group_for_user)
    con.commit()
    con.close()


def drop_db(table):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    if table == 'all':
        db_delete_groups = "delete from Groups"
        db_delete_users = "delete from Users"
        db_delete_users_in_groups = "delete from Users_in_groups"
        db_delete_users_in_groups_seq = "delete from sqlite_sequence where name='Users_in_Groups'"
        cur.execute(db_delete_users)
        cur.execute(db_delete_groups)
        cur.execute(db_delete_users_in_groups)
        cur.execute(db_delete_users_in_groups_seq)
    elif table == 'users':
        db_delete_users = "delete from Users"
        cur.execute(db_delete_users)
    elif table == 'groups':
        db_delete_groups = "delete from Groups"
        cur.execute(db_delete_groups)
    elif table == 'user_in_groups':
        db_delete_users_in_groups = "delete from Users_in_groups"
        cur.execute(db_delete_users_in_groups)
        db_delete_users_in_groups_seq = "delete from sqlite_sequence where name='Users_in_Groups'"
        cur.execute(db_delete_users_in_groups_seq)
    con.commit()
    con.close()


def get_users_from_db() -> list[dict]:
    """
    Get users from DB sorted by user login in list[dict]
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from users')
    users = cur.fetchall()
    users_for_table = list()
    for user in users:
        user_for_table = {'login': user[1],
                          'name': user[3],
                          'id': user[0],
                          'is_dispatcher': user[4],
                          'is_admin': user[5],
                          'is_blocked': user[6],
                          'is_gw': user[7],
                          'previous_type': user[8],
                          'en_ind': user[9],
                          'en_ind_mes': user[10],
                          'en_del_chats': user[11],
                          'en_partial_drop': user[12],
                          'priority': user[13],
                          }
        users_for_table.append(user_for_table)
    con.close()
    users_for_table.sort(key=lambda i: i['login'])
    return users_for_table


def get_groups_from_db() -> list[dict]:
    """
    Get groups from DB sorted by group name in list[dict]
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from groups')
    groups = cur.fetchall()
    groups_for_table = list()
    for group in groups:
        group_for_table = {'name': group[1],
                           'id': group[0],
                           'desc': group[2],
                           'is_emergency': group[5],
                           'is_disabled': group[6]}
        groups_for_table.append(group_for_table)
    con.close()
    groups_for_table.sort(key=lambda i: i['name'])
    return groups_for_table


def get_users_for_group_from_db(gr_id):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_query_users_for_group = "Select ug.user_id, u.login, u.display_name FROM Users_in_Groups ug " \
                               "LEFT JOIN Users u on ug.user_id = u.id " \
                               "LEFT JOIN Groups g on ug.group_id = g.id WHERE g.id = '" + gr_id + "'"
    cur.execute(db_query_users_for_group)
    users = cur.fetchall()
    users_for_table = list()
    for user in users:
        user_for_table = {'id': user[0],
                          'login': user[2],
                          'name': user[1]}
        users_for_table.append(user_for_table)
    con.close()
    return users_for_table


def get_groups_for_user_from_db(us_id):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_query_groups_for_user = "Select ug.group_id, g.name, g.description FROM Users_in_Groups ug " \
                               "LEFT JOIN Users u on ug.user_id = u.id " \
                               "LEFT JOIN Groups g on ug.group_id = g.id WHERE u.id = '" + us_id + "'"
    cur.execute(db_query_groups_for_user)
    groups = cur.fetchall()
    groups_for_table = list()
    for group in groups:
        group_for_table = {'id': group[0],
                           'name': group[1],
                           'desc': group[2]}
        groups_for_table.append(group_for_table)
    con.close()
    return groups_for_table


def get_group_name_by_id_from_db(gr_id):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_query_group_name_by_id = "Select name from Groups where id = '" + gr_id + "'"
    cur.execute(db_query_group_name_by_id)
    group_name = cur.fetchone()[0]
    con.close()
    return group_name


def get_user_name_by_id_from_db(us_id):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_query_user_name_by_id = "Select Display_name from Users where id = '" + us_id + "'"
    cur.execute(db_query_user_name_by_id)
    data = cur.fetchone()
    if data is not None:
        user_name = data[0]
    else:
        user_name = None
    con.close()
    return user_name


def get_user_list(users):
    """Get users from DB and return users[] in list and in sg.Treedata for Tabs Users and Groups
    Input:
    users: [{}]
    Output:
    user_list: [id, login, name, is_dispatcher, is_blocked]
    user_treedata :sg.Treedata: '', id, login, name"""
    user_treedata = sg.TreeData()
    user_list = []
    for index, user_from_db in enumerate(users):
        user_list.append([user_from_db['id'], user_from_db['login'], user_from_db['name']])
        if user_from_db['is_dispatcher']:
            user_list[index].append(u'\u0020\u0020\u0020\u2713')
        else:
            user_list[index].append('')
        if user_from_db['is_admin']:
            user_list[index].append(u'\u0020\u0020\u0020\u2713')
        else:
            user_list[index].append('')
        if user_from_db['is_gw']:
            user_list[index].append(u'\u0020\u0020\u0020\u2713')
        else:
            user_list[index].append('')
        if user_from_db['is_blocked']:
            user_list[index].append(u'\u0020\u0020\u0020' + SYMBOL_X_SMALL)
        else:
            user_list[index].append('')
        if users != [{}]:
            user_treedata.insert('', user_from_db['id'], '', values=[user_from_db['login'], user_from_db['name']],
                                 icon=check[0])
    return user_list, user_treedata


def get_group_list(groups):
    """Get groups from DB and return groups[] in list and in sg.Treedata for Tabs Users and Groups
    Input:
    groups: [{}]
    Output:
    gr_list: [id, name, desc, is_emergency, is_disabled]
    group_treedata :sg.Treedata: '', id, login, name"""
    group_treedata = sg.TreeData()
    gr_list = []
    for index, gr_from_db in enumerate(groups):
        gr_list.append([gr_from_db['id'], gr_from_db['name'], gr_from_db['desc']])
        if gr_from_db['is_emergency']:
            gr_list[index].append(u'\u0020\u0020\u0020\u2713')
        else:
            gr_list[index].append('')
        if gr_from_db['is_disabled']:
            gr_list[index].append(u'\u0020\u0020\u0020' + SYMBOL_X_SMALL)
        else:
            gr_list[index].append('')
        if groups != [{}]:
            group_treedata.insert('', gr_from_db['id'], '', values=[gr_from_db['name'], gr_from_db['desc']],
                                  icon=check[0])
    return gr_list, group_treedata


def make_main_window(ip):
    if server_status['run']:
        users_online_text = 'Данные загружаются...'
    else:
        users_online_text = 'Сервер не запущен...'
    user_list = list()
    group_list = list()
    treedata = sg.TreeData()
    treedata2 = sg.TreeData()
    label_text = 'Панель администратора ОМЕГА К100 ' + ip + ' Версия ' + version + ', ' + val_login['Логин']
    branch_name = get_branch()
    if branch_name != 'Неизвестно':
        label_text += ' Ветка: ' + branch_name
    if https_on:
        label_text += ' https: ' + str(https_on)
    if users_from_db != [{}] and groups_from_db != [{}]:
        user_list, treedata2 = get_user_list(users_from_db)
        group_list, treedata = get_group_list(groups_from_db)
    # noinspection PyTypeChecker
    tab1_layout = [
        [
            sg.Frame('Пользователи',
                     [
                         [
                             sg.Column([[
                                 sg.Image(data=ICON_FILTER_BASE_64_BLUE),
                                 sg.Input(size=(15, 1),
                                          enable_events=True,
                                          disabled_readonly_background_color=disabled_input,
                                          key='-filterUser-'),
                                 sg.Button('', disabled_button_color='white',
                                           image_data=ICON_CLEAR_FILTER_BASE_64_BLUE,
                                           button_color='white',
                                           tooltip='Очистить фильтр',
                                           key='-ClearFilterUser-',
                                           disabled=True,
                                           pad=((0, 5), 0))]],
                                 vertical_alignment='bottom'),
                             sg.Push(),
                             sg.Button('', disabled_button_color='white',
                                       image_data=ICON_ADD_BASE_64_BLUE,
                                       button_color='white',
                                       tooltip='Добавить',
                                       key='-AddUser-',
                                       pad=(4, (0, 3))),
                             sg.Button('', disabled_button_color='white',
                                       disabled=True,
                                       image_data=ICON_MODIFY_BASE_64_BLUE,
                                       button_color='white',
                                       tooltip='Изменить',
                                       key='Изменить пользователя', pad=(5, (0, 3))),
                             sg.Button('', disabled_button_color='white',
                                       disabled=True,
                                       button_color='white',
                                       image_data=ICON_CLONE_BASE_64_BLUE,
                                       tooltip='Клонировать',
                                       key='-CloneUser-', pad=(4, (0, 3))),
                             sg.Button('', disabled_button_color='white',
                                       disabled=True,
                                       button_color='white',
                                       image_data=ICON_BLOCK_BASE_64_BLUE,
                                       tooltip='Заблокировать',
                                       key='-BlockUser-', pad=(4, (0, 3))),
                             sg.Button('', disabled_button_color='white',
                                       disabled=True,
                                       image_data=ICON_DELETE_BASE_64_BLUE,
                                       button_color='white',
                                       tooltip='Удалить',
                                       key='-DelUser-', pad=(4, (0, 3)))],
                         [sg.Table(user_list, headings=['id', 'Логин', 'Имя', 'Дисп', 'Адм', 'К500', 'Блок'],
                                   justification="left",
                                   # num_rows=20,
                                   key='-users-', expand_y=True, expand_x=True,
                                   enable_click_events=True,
                                   enable_events=True,
                                   # row_colors=list_block_user_with_color,
                                   auto_size_columns=False,
                                   visible_column_map=[False, True, True, True, True, True, True],
                                   # right_click_selects=True,
                                   # right_click_menu=[1, 'Изменить пользователя'],
                                   select_mode=sg.TABLE_SELECT_MODE_BROWSE,
                                   selected_row_colors='black on lightblue',
                                   # auto_size_columns=False,
                                   metadata=[],
                                   size=(450, 300),
                                   col_widths=[0, 10, 18, 5, 5, 5, 5],
                                   )], ],
                     size=(471, 300),
                     # expand_x=True,
                     expand_y=True,
                     ),
            sg.Frame('Группы', [[sg.Column([[
                sg.Checkbox('Выбрать все группы',
                            enable_events=True,
                            key='-checkAllGroups-',
                            default=False,
                            pad=(13, (14, 0)),
                            disabled=True)]],
                vertical_alignment='bottom')],
                [
                    sg.Tree(data=treedata,
                            headings=['Имя', 'Описание'],
                            col0_width=5,
                            # col0_heading="",
                            col_widths=[20, 20],
                            num_rows=10,
                            key='-TREE-',
                            # row_height=20,
                            metadata=[],
                            auto_size_columns=False,
                            show_expanded=False,
                            enable_events=True,
                            justification='left',
                            expand_y=True,
                            expand_x=True,
                            select_mode=sg.TABLE_SELECT_MODE_BROWSE,
                            selected_row_colors='black on lightblue',
                            ),

                ]], expand_y=True,
                     # expand_x=True,
                     size=(471, 300)
                     ),
            sg.Column([[sg.Button('', key='Apply',
                                  disabled=True,
                                  image_data=ICON_APPLY_BASE_64_WHITE,
                                  tooltip='Применить',
                                  button_color=button_color_2,
                                  disabled_button_color='gray',
                                  pad=((0, 4), 2)
                                  )]], vertical_alignment='bottom'),
            # sg.Push()
        ],
    ]
    # noinspection PyTypeChecker
    tab2_layout = [
        [sg.Frame('Группы',
                  [
                      [sg.Column([[
                          sg.Image(data=ICON_FILTER_BASE_64_BLUE),
                          sg.Input(size=(15, 1),
                                   enable_events=True,
                                   disabled_readonly_background_color=disabled_input,
                                   key='-filterGroup-'),
                          sg.Button('', disabled_button_color='white',
                                    image_data=ICON_CLEAR_FILTER_BASE_64_BLUE,
                                    button_color='white',
                                    tooltip='Очистить фильтр',
                                    key='-ClearFilterGroup-',
                                    disabled=True,
                                    pad=((0, 5), 0))]],
                          vertical_alignment='bottom'),
                          sg.Push(),
                          sg.Button('', disabled_button_color='white',
                                    image_data=ICON_ADD_BASE_64_BLUE,
                                    button_color='white',
                                    tooltip='Добавить',
                                    key='-AddGroup-',
                                    pad=(4, (0, 3))),
                          sg.Button('', disabled_button_color='white',
                                    disabled=True,
                                    image_data=ICON_MODIFY_BASE_64_BLUE,
                                    button_color='white',
                                    tooltip='Изменить',
                                    key='Изменить группу', pad=(4, (0, 3))),  # TODO
                          sg.Button('', disabled_button_color='white',
                                    disabled=True,
                                    button_color='white',
                                    image_data=ICON_BLOCK_BASE_64_BLUE,
                                    tooltip='Заблокировать',
                                    key='-BlockGroup-', pad=(4, (0, 3))),
                          sg.Button('', disabled_button_color='white',
                                    disabled=True,
                                    image_data=ICON_DELETE_BASE_64_BLUE,
                                    button_color='white',
                                    tooltip='Удалить',
                                    key='-DelGroup-', pad=(4, (0, 3)))],
                      [sg.Table(group_list, headings=['id', 'Имя', 'Описание', 'Э', 'Блок'],
                                justification="left",
                                # num_rows=40,
                                key='-groups2-',
                                expand_y=True,
                                expand_x=True,
                                enable_click_events=True,
                                enable_events=True,
                                auto_size_columns=False,
                                visible_column_map=[False, True, True, True, True],
                                # right_click_selects=True,
                                # right_click_menu=[1, ['Изменить группу', 'Очистить чат']],
                                select_mode=sg.TABLE_SELECT_MODE_BROWSE,
                                selected_row_colors='black on lightblue',
                                size=(450, 300),
                                col_widths=[0, 10, 27, 5, 5],
                                )], ],
                  expand_y=True,
                  size=(471, 300)),
         sg.Frame('Пользователи', [[sg.Column([[
             sg.Checkbox('Выбрать всех пользователей',
                         enable_events=True,
                         key='-checkAllUsers-',
                         default=False,
                         pad=(13, (14, 0)),
                         disabled=True)]],
             vertical_alignment='bottom')],
             [
                 sg.Tree(data=treedata2,
                         headings=['Логин', 'Имя'],
                         col0_width=5,
                         col_widths=[20, 30],
                         num_rows=10,
                         key='-TREE2-',
                         # row_height=20,
                         metadata=[],
                         auto_size_columns=False,
                         show_expanded=False,
                         enable_events=True,
                         justification='left',
                         expand_y=True,
                         expand_x=True,
                         select_mode=sg.TABLE_SELECT_MODE_BROWSE,
                         selected_row_colors='black on lightblue',
                         ), ]],
                  expand_y=True,
                  # expand_x=True,
                  size=(471, 300)
                  ),
         sg.Column([[sg.Button('',
                               key='Apply2',
                               disabled=True,
                               image_data=ICON_APPLY_BASE_64_WHITE,
                               tooltip='Применить',
                               button_color=button_color_2,
                               # bind_return_key=True,
                               disabled_button_color='gray',
                               pad=((0, 4), 2))]],
                   vertical_alignment='bottom'),
         ], ]
    tab1_journal = [
        [sg.Column([[
            sg.Image(data=ICON_FILTER_BASE_64_BLUE),
            sg.Input(size=(15, 1),
                     enable_events=True,
                     disabled_readonly_background_color=disabled_input,
                     key='-filterJournal-'),
            sg.Button('', disabled_button_color='white',
                      image_data=ICON_CLEAR_FILTER_BASE_64_BLUE,
                      button_color='white',
                      tooltip='Очистить фильтр',
                      key='-ClearFilterJournal-',
                      disabled=True,
                      pad=((0, 5), 0))]],
            vertical_alignment='bottom'),
            sg.Push(),
            sg.Button('', disabled_button_color='white',
                      image_data=ICON_SAVE_BASE_64_BLUE,
                      button_color='white',
                      # initial_folder='.',
                      tooltip='Сохранить',
                      key='-SaveLog-',
                      pad=((10, 165), (0, 3))),

        ],
        [sg.Multiline(key='journal', write_only=True, disabled=True, expand_x=True, expand_y=True,
                      autoscroll=True, auto_refresh=True,
                      background_color='white'),
         sg.Frame('Типы',
                  [
                      [sg.Checkbox('Инфо', enable_events=True, key='info', default=True)],
                      [sg.Checkbox('Предупреждение', enable_events=True, key='warning', default=True)],
                      [sg.Checkbox('Ошибка', enable_events=True, key='error', default=True)],
                      [sg.Checkbox('Критическая', enable_events=True, key='critical', default=True)],
                  ],
                  size=(150, 140),
                  vertical_alignment='top')
         ],
        [sg.T('Количество записей:'), sg.Multiline(key='countLogs', no_scrollbar=True,
                                                   write_only=True, disabled=True, auto_refresh=True,
                                                   background_color='lightgray',
                                                   # auto_size_text=True,
                                                   size=15,
                                                   justification='right'
                                                   )]
    ]
    tab2_journal = [
        [sg.Column([[
            sg.Image(data=ICON_FILTER_BASE_64_BLUE),
            sg.Input(size=(15, 1),
                     enable_events=True,
                     disabled_readonly_background_color=disabled_input,
                     key='-filterJournalServer-'),
            sg.Button('', disabled_button_color='white',
                      image_data=ICON_CLEAR_FILTER_BASE_64_BLUE,
                      button_color='white',
                      tooltip='Очистить фильтр',
                      key='-ClearFilterJournalServer-',
                      disabled=True,
                      pad=((0, 5), 0))]],
            vertical_alignment='bottom'),
            sg.Push(),
            sg.Button('', disabled_button_color='white',
                      image_data=ICON_UPDATE_LOG_BASE_64_BLUE,
                      button_color='white',
                      # initial_folder='.',
                      tooltip='Обновить',
                      key='-UpdateLogServer-',
                      pad=((10, 5), (0, 3))),
            sg.Button('', disabled_button_color='white',
                      image_data=ICON_SAVE_BASE_64_BLUE,
                      button_color='white',
                      # initial_folder='.',
                      tooltip='Сохранить',
                      key='-SaveLogServer-',
                      # pad=((10, 5), (0, 3))),
                      pad=((10, 165), (0, 3))),

        ],
        [sg.Multiline(key='journalServer', write_only=True, disabled=True, expand_x=True, expand_y=True,
                      autoscroll=True, auto_refresh=True,
                      background_color='white'),
         sg.Frame('Типы',
                  [
                      [sg.Checkbox('Инфо', enable_events=True, key='info_server', default=True)],
                      [sg.Checkbox('Предупреждение', enable_events=True, key='warning_server', default=True)],
                      [sg.Checkbox('Ошибка', enable_events=True, key='fail_server', default=True)],
                  ],
                  size=(150, 110),
                  vertical_alignment='top')
         ],
        [sg.T('Количество записей:'), sg.Multiline(key='countLogsServer', no_scrollbar=True,
                                                   write_only=True, disabled=True, auto_refresh=True,
                                                   background_color='lightgray',
                                                   # auto_size_text=True,
                                                   size=15,
                                                   justification='right'
                                                   )]
    ]
    tab3_layout = [
        [sg.Frame('Логи',
                  [
                      [sg.TabGroup([[sg.Tab('Локальный', tab1_journal, key="Tab1_journal")],
                                    [sg.Tab('Сервер', tab2_journal, key="Tab2_journal")]],
                                   expand_x=True,
                                   expand_y=True,
                                   enable_events=True,
                                   key='Tabs_journal'), ]],
                  expand_x=True, expand_y=True
                  ),

         ],
    ]
    layout = [[sg.Menu([
        ['Сервер', ['Установить лицензию...', '!Настройки', 'Очистка БД', ['Частично', 'Полностью']]],
        ['Помощь', 'О программе'], ], key='-Menu-', )],
        [sg.Frame('Сервер', [[sg.Column([[sg.Push(),
                                          sg.Button('Старт', key='-Start-',
                                                    disabled_button_color='gray',
                                                    size=8,
                                                    pad=((20, 10), (5, 10))),
                                          sg.Button('Стоп', key='-Stop-',
                                                    disabled_button_color='gray',
                                                    size=8,
                                                    # image_data=DEFAULT_BASE64_LOADING_GIF,
                                                    pad=((10, 20), (5, 10))),
                                          sg.Push()]], vertical_alignment='center')]]
                  # size=(200, 80),
                  ),
         ],
        [sg.TabGroup(
            [[sg.Tab('Пользователи', tab1_layout, key="Tab1"),
              sg.Tab('Группы', tab2_layout, key="Tab2"),
              sg.Tab('Журнал', tab3_layout, key="Tab3"),
              ]], key="Tabs", size=(1020, 660),
            pad=((4, 0), (0, 3)),
            enable_events=True),
            sg.B(SYMBOL_LEFT_ARROWHEAD, pad=(5, 0),
                 disabled_button_color='gray',
                 font='Arial 20 bold',
                 size=1,
                 # mouseover_colors='white',
                 k='-hide-online-'),
            sg.pin(
                sg.Frame('Онлайн', [[sg.Multiline('',
                                                  # expand_x=True,
                                                  horizontal_scroll=True,
                                                  size=(20, 1),
                                                  expand_y=True,
                                                  key='online-users',
                                                  write_only=True,
                                                  disabled=True,
                                                  auto_refresh=True, )]],
                         expand_x=True, expand_y=True,
                         pad=((0, 5), (18, 2)),
                         key='-frame-online-'
                         ),
                expand_x=True,
                expand_y=True,
                shrink=True,

            )
        ],
        [sg.StatusBar(users_online_text, key='-StatusBar-',
                      size=(37, 1),
                      p=((5, 0), 0),
                      # expand_x=True
                      ),
         sg.StatusBar('', key='-StatusBar2-',
                      size=(37, 1),
                      p=(0, 0),
                      ),
         sg.StatusBar('', key='-StatusBar3-',
                      size=(30, 1),
                      p=((0, 5), 0),
                      ),
         ]
    ]
    return sg.Window(label_text, layout, icon=ICON_BASE_64,
                     use_ttk_buttons=True,
                     enable_close_attempted_event=True,
                     relative_location=(0, -50),
                     finalize=True)


def make_login_window():
    try:
        ip = ipaddress.ip_address((([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2]
                                     if not ip.startswith("127.")] or [
                                        [(s.connect(("8.8.8.8", 53)), s.getsockname()[0], s.close()) for s in
                                         [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) + ["no IP found"])[
                                      0]).exploded
    except Exception as e:
        print(f'Не могу получить локальный ip, {e}')
        ip = ''
    print(ip)
    # global active_config
    config_app = {"ip": "", "login": "", "ssh_login": "", "ssh_port": ""}
    if os.path.isfile(Path(Path.cwd(), 'config', 'app.json')):
        print(os.stat(Path(Path.cwd(), 'config', 'app.json')).st_size)
        try:
            with open(Path(Path.cwd(), 'config', 'app.json'), 'r') as f_app_config:
                config_app = json.load(f_app_config)
                print(config_app)
                global SSH_PORT, SSH_LOGIN
                SSH_PORT, SSH_LOGIN = config_app['ssh_port'], config_app['ssh_login']
        except Exception as e:
            print(f'{e}')
            # config_app = {'ip': '', 'login': ''}
    else:
        with open(Path(Path.cwd(), 'config', 'app.json'), 'x') as f_app_config:
            f_app_config.write(json.dumps(config_app, sort_keys=True, indent=4))
    global active_config, ip_config
    if config_app['ip']:
        active_config = True
        ip_config = config_app['ip']
    else:
        active_config = False
        ip_config = ''
    layout_login = [[sg.Text("Адрес сервера", background_color='white'),
                     sg.Push(background_color='white'),
                     sg.Input(
                         # default_text="10.1.4.73",
                         default_text=config_app['ip'],
                         focus=True,
                         key="ip",
                         pad=((0, 40), (0, 0)),
                         enable_events=True)],
                    [sg.Text("Логин", background_color='white'),
                     sg.Push(background_color='white'),
                     sg.Input(
                         # default_text="radiotech",
                         default_text=config_app['login'],
                         key="Логин",
                         pad=((0, 40), (2, 0)), disabled=False, enable_events=True)],
                    [sg.Text("Пароль", background_color='white'),
                     sg.Push(background_color='white'),
                     sg.Input(
                         # default_text='radiotech',
                         key="password",
                         enable_events=True,
                         password_char='*'),
                     sg.Button(key='showLoginPassword',
                               button_color='#ffffff',
                               image_data=ICON_SHOW_BASE_64,
                               disabled=False)
                     ],
                    [sg.Checkbox('Запомнить данные',
                                 default=True,
                                 enable_events=True,
                                 key='remember_credentials'), sg.Push(),
                     sg.Checkbox('https', default=False, key='https_on')],
                    [sg.Push(background_color='white'),
                     sg.Button('Вход', key="OK button", size=10,
                               bind_return_key=True),
                     sg.Push(background_color='white')]]
    return sg.Window('Вход на сервер', layout_login,
                     icon=ICON_BASE_64,
                     background_color='white',
                     use_ttk_buttons=True,
                     finalize=True)


def make_add_lic():
    # noinspection PyTypeChecker
    layout_lic = [[
        sg.Frame('Загрузка лицензии', [
            [
                sg.Input(
                    default_text='Выберите файл лицензии -->',
                    disabled=True,
                    text_color='gray',
                    enable_events=True,
                    expand_x=True,
                    key='-FILENAME-'),
                sg.Push(),
                sg.FileBrowse('Выбрать',
                              target='-FILENAME-',
                              disabled=False,
                              initial_folder='../',
                              file_types=(("Файл лицензии", "*.lic"),))],
            [sg.Button('Получить id сервера', disabled=False), sg.Push(),
             sg.Button('Текущая лицензия',
                       disabled=True,
                       key='show_cur_lic'
                       ),
             sg.Button('Загрузить',
                       disabled=True,
                       bind_return_key=True)]], expand_x=True)],
        [sg.Frame('Лицензия',
                  [[sg.Table([], headings=['Наименование', 'Количество', 'Дата'],
                             justification="left",
                             select_mode=sg.TABLE_SELECT_MODE_NONE,
                             key='-lic-',
                             auto_size_columns=False,
                             col_widths=[27, 9, 10]
                             )
                    ]], expand_x=True)],
        [sg.Frame('Загрузка ключа сервера', [
            [sg.Input(
                # size=(60),
                default_text='Выберите файл ключа -->',
                disabled=True,
                text_color='gray',
                enable_events=True,
                expand_x=True,
                key='-KEYNAME-'),
                sg.Push(),
                sg.FileBrowse('Выбрать',
                              target='-KEYNAME-',
                              disabled=False,
                              initial_folder='../',
                              file_types=(("Файл ключа сервера", "*.pem"),))],
            [sg.Text('*Загружайте только при необходимости!')],
            [sg.Push(),
             sg.Button('Вернуть ключ',
                       # disabled=True,
                       key='restore-key'),
             sg.Button('Загрузить ключ',
                       disabled=True,
                       key='install-key')
             ]
        ], expand_x=True)],
        [sg.Push(), sg.Button('Перезагрузить', disabled=True, key='restart'), sg.Button('Выйти'), sg.Push()]]
    return sg.Window('Лицензия', layout_lic, icon=ICON_BASE_64, background_color='white', modal=True, finalize=True)


def make_credential_window():
    layout_ssh_credentials = [[sg.Text("Логин", background_color='white'),
                               sg.Push(background_color='white'),
                               sg.Input(
                                   default_text=SSH_LOGIN,
                                   key="ssh_login",
                                   focus=True,
                                   pad=((0, 40), (2, 0)), disabled=False, enable_events=True)],
                              [sg.Text("Пароль", background_color='white'),
                               sg.Push(background_color='white'),
                               sg.Input(
                                   key="ssh_password",
                                   enable_events=True,
                                   password_char='*'),
                               sg.Button(key='showLoginPasswordCred',
                                         button_color='#ffffff',
                                         image_data=ICON_SHOW_BASE_64,
                                         disabled=False)
                               ],
                              [sg.Text("SSH порт", background_color='white'),
                               sg.Push(background_color='white'),
                               sg.Input(
                                   default_text=SSH_PORT,
                                   key="ssh_port",
                                   pad=((0, 40), (2, 0)), disabled=False, enable_events=True)],
                              [sg.Checkbox('Запомнить данные',
                                           default=True,
                                           enable_events=True,
                                           key='remember_ssh_credentials'), sg.Push()],
                              [sg.Push(background_color='white'),
                               sg.Button('Вход', key="OK cred", size=10,
                                         bind_return_key=True),
                               sg.Push(background_color='white')]]
    return sg.Window('Данные для входа на сервер', layout_ssh_credentials,
                     icon=ICON_BASE_64,
                     background_color='white',
                     use_ttk_buttons=True,
                     modal=True,
                     use_default_focus=True,
                     finalize=True)


def make_settings():
    settings = get_settings(BASE_URL_SETTINGS)
    if settings:
        layout_settings = [
            [sg.Frame('Таймауты',
                      [
                          [sg.Push(), sg.Text('Индивидуальный вызов (сек)'),
                           sg.Input(default_text=settings['privateCallTimeout'],
                                    size=20,
                                    key='-Индивидуальный-таймаут-',
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Групповой вызов (сек)'),
                           sg.Input(default_text=settings['groupCallTimeout'],
                                    size=20,
                                    key='-Групповой-таймаут-',
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Таймаут окончания вызова (сек)'),
                           sg.Input(default_text=settings['finalizeCallTimeout'],
                                    size=20,
                                    key='-таймаут-окончания-',
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Длительность тонального вызова (сек)'),
                           sg.Input(default_text=settings['finalizeTonalTimeout'],
                                    size=20,
                                    key='-таймаут-тонового-сигнала-',
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Длительность скрытого прослушивания (сек)'),
                           sg.Input(default_text=settings['ambientCallDuration'],
                                    size=20,
                                    key='-таймаут-прослушивания-',
                                    enable_events=True)],
                      ], expand_x=True)
             ],
            [sg.Frame('Голосовые порты',
                      [
                          [sg.Push(), sg.Text('Минимальный порт аудио (UDP)'),
                           sg.Input(size=20, key='-Мин-аудио-порт-',
                                    default_text=(settings['udpPortsRange'].rpartition('-')[0]
                                                  if 6 < len(settings['udpPortsRange']) < 12 else 0),
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Максимальный порт аудио (UDP)'),
                           sg.Input(size=20, key='-Макс-аудио-порт-',
                                    default_text=(settings['udpPortsRange'].rpartition('-')[2]
                                                  if 6 < len(settings['udpPortsRange']) < 12 else 0),
                                    enable_events=True)]
                      ], expand_x=True)
             ],
            [sg.Frame('Настройки сервера',
                      [
                          [sg.Push(), sg.Text('Таймаут опроса сервера (сек)'),
                           sg.Input(size=20, key='-пинг-таймаут-',
                                    default_text=ping_timeout,
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Глубина лога сервера (строки)'),
                           sg.Input(size=20, key='-глубина-сервера-',
                                    default_text=LOG_DEPTH,
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Удалять данные старше (дней)'),
                           sg.Input(size=20, key='-auto-del-',
                                    default_text=settings['autoCleanDays'],
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Порт SSH'),
                           sg.Input(size=20, key='-порт-ssh-',
                                    default_text=SSH_PORT,
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Логин'),
                           sg.Input(size=20, key='-логин-ssh-',
                                    default_text=SSH_LOGIN,
                                    enable_events=True)],
                          [sg.Push(), sg.Text('Пароль'),
                           sg.Input(size=20, key='-пароль-ssh-',
                                    default_text=SSH_PWD,
                                    password_char='*',
                                    enable_events=True)],
                      ], expand_x=True)
             ],
            [sg.Push()],
            [sg.ProgressBar(max_value=10, orientation='horizontal', key='-Progress-Bar-',
                            size_px=(400, 10),
                            pad=((30, 30), (30, 10))
                            )],
            [sg.Push(), sg.Button('OK', disabled=True, key='-OK-set-'), sg.Button('Выйти', key='-Exit-set-'), sg.Push()]
        ]
    else:
        layout_settings = [
            [sg.Push(), sg.Text('Настройки недоступны', justification='center', size=60), sg.Push()],
            [sg.Push(), sg.Button('Выйти', key='-Exit-set-'), sg.Push()]
        ]
    return sg.Window('Настройки', layout_settings, icon=ICON_BASE_64, background_color='white',
                     modal=True,
                     # size=(500, 400),
                     finalize=True)


def make_apply_set():
    layout_apply = [
        [sg.ProgressBar(max_value=10, orientation='horizontal', key='-Progress-Bar-')],
        [sg.Push(), sg.Button('OK', disabled=True), sg.Button('Отменить'), sg.Push()]
    ]
    return sg.Window('Применение настроек на сервере', layout_apply, icon=ICON_BASE_64, background_color='white',
                     modal=True,
                     finalize=True)


def make_get_id(srv_id):
    layout_get_id = [[sg.InputText(srv_id, key='-id-'), sg.Button('Скопировать', key='-Скопировать-')],
                     [sg.Push(), sg.Button('OK'), sg.Push()]]
    return sg.Window('id сервера', layout_get_id, icon=ICON_BASE_64, background_color='white', modal=True,
                     finalize=True)


def make_add_user_window():
    layout_add_user = [
        [sg.Text('Логин'), sg.Push(), sg.Input(key='UserLogin', pad=((0, 40), (0, 0)), enable_events=True,
                                               tooltip=('Не меньше' + str(MIN_LEN_LOGIN) + 'и не больше ' +
                                                        str(MAX_LEN_LOGIN) + ' символов'))],
        [sg.Text('Имя'), sg.Push(), sg.Input(key='UserName', pad=((0, 40), (2, 0)), enable_events=True,
                                             tooltip=('Не больше ' + str(MAX_LEN_USERNAME) + ' символов'))],
        [sg.Text('Пароль'), sg.Push(), sg.Input(key='UserPassword',
                                                password_char='*', enable_events=True,
                                                tooltip=('Не меньше ' + str(MIN_LEN_PASSWORD) + ' и не больше '
                                                         + str(MAX_LEN_PASSWORD) + ' символов')),
         sg.Button(key='showPassword',
                   button_color='#ffffff',
                   image_data=ICON_BLANK_BASE_64,
                   disabled=True)],
        [sg.Frame('Тип', [
            [sg.Radio('Пользователь',
                      default=True,
                      key='user',
                      group_id='u_type',
                      enable_events=True)],
            [sg.Radio('Диспетчер', key='disp', group_id='u_type', enable_events=True)],
            [sg.Radio('Концентратор К500', key='gw', group_id='u_type', enable_events=True)],
            [sg.Radio('Администратор', key='adm', group_id='u_type', enable_events=True)]],
                  pad=((8, 0), (10, 10)))],
        [sg.Frame('Дополнительные разрешения', [
            [sg.Checkbox('Разрешить индивидуальные вызовы',
                         default=True,
                         enable_events=True,
                         key='addUserIndCallEn'), sg.Push()],
            [sg.Checkbox('Разрешить индивидуальные сообщения',
                         default=True,
                         enable_events=True,
                         key='addUserIndMesEn'), sg.Push()],
            [sg.Checkbox('Разрешить удалять переписку в чатах',
                         default=False,
                         disabled=True,
                         enable_events=True,
                         key='addUserAllowDelChats'), sg.Push()],
            [sg.Checkbox('Разрешить удалять данные БД',
                         default=False,
                         disabled=True,
                         enable_events=True,
                         key='addUserAllowPartialDrop'), sg.Push()]
        ],
                  # size=(300, 110),
                  pad=((8, 0), (10, 10)))],
        [sg.Text('Приоритет'), sg.Input(default_text='0',
                                        key='UserPriority',
                                        size=(4, 1),
                                        enable_events=True,
                                        tooltip='От 0 до 15')],
        [sg.Push(), sg.Checkbox('Заблокирован',
                                default=False,
                                disabled=False,
                                text_color='red',
                                enable_events=True,
                                key='addUserBlock')],
        [sg.Push(), sg.Button(button_text='Добавить', key='addUserButton',
                              disabled=True,
                              disabled_button_color='gray')]
    ]
    return sg.Window('Добавить пользователя', layout_add_user,
                     icon=ICON_BASE_64,
                     use_ttk_buttons=True,
                     finalize=True,
                     # disable_minimize=True,
                     modal=True
                     )


def make_modify_user_window(user: dict):
    layout_modify_user = [
        [sg.Text('Логин'), sg.Push(), sg.Input(disabled=True, pad=((0, 40), (0, 0)),
                                               default_text=user['login'], key='UserModifyLogin')],
        [sg.Text('Имя'), sg.Push(), sg.Input(default_text=user['name'],
                                             pad=((0, 40), (2, 0)), enable_events=True, key='UserModifyName',
                                             tooltip=('Не больше ' + str(MAX_LEN_USERNAME) + ' символов'))],
        [sg.Text('Пароль'), sg.Push(), sg.Input(default_text='', enable_events=True,
                                                key='userModifyPassword', password_char='*',
                                                tooltip=('Не меньше ' + str(MIN_LEN_PASSWORD) + ' и не больше '
                                                         + str(MAX_LEN_PASSWORD) + ' символов')),
         sg.Button(key='showModifyPassword',
                   button_color='#ffffff',
                   image_data=ICON_BLANK_BASE_64,
                   disabled=True)],
        [sg.Frame('Тип', [
            [sg.Radio('Пользователь',
                      default=True,
                      key='modifyUserUser',
                      group_id='u_type',
                      disabled=True if user['is_blocked'] or user['is_admin'] else False,
                      enable_events=True)],
            [sg.Radio('Диспетчер',
                      default=user['is_dispatcher'],
                      key='modifyUserDispatcher',
                      group_id='u_type',
                      disabled=True if user['is_blocked'] or user['is_admin'] else False,
                      enable_events=True)],
            [sg.Radio('Концентратор К500',
                      default=user['is_gw'],
                      key='modifyUserGw',
                      group_id='u_type',
                      disabled=True if user['is_blocked'] or user['is_admin'] else False,
                      enable_events=True)],
            [sg.Radio('Администратор',
                      default=user['is_admin'],
                      key='modifyUserAdm',
                      group_id='u_type',
                      disabled=True,
                      enable_events=True)]],
                  # size=(300, 140),
                  pad=((8, 0), (10, 10)))],
        [sg.Frame('Дополнительные разрешения', [
            [sg.Checkbox('Разрешить индивидуальные вызовы',
                         default=user['en_ind'],
                         enable_events=True,
                         disabled=True if user['is_admin'] else False,
                         key='modifyUserIndCallEn'), sg.Push()],
            [sg.Checkbox('Разрешить индивидуальные сообщения',
                         default=user['en_ind_mes'],
                         enable_events=True,
                         disabled=True if user['is_admin'] else False,
                         key='modifyUserIndMesEn'), sg.Push()],
            [sg.Checkbox('Разрешить удалять переписку в чатах',
                         default=user['en_del_chats'],
                         disabled=False if user['is_dispatcher'] else True,
                         enable_events=True,
                         key='modifyUserAllowDelChats'), sg.Push()],
            [sg.Checkbox('Разрешить удалять данные БД',
                         default=user['en_partial_drop'],
                         disabled=False if user['is_dispatcher'] else True,
                         enable_events=True,
                         key='modifyUserAllowPartialDrop'), sg.Push()]
        ],
                  # size=(300, 110),
                  pad=((8, 0), (10, 10)))],
        [sg.Text('Приоритет'), sg.Input(key='UserModifyPriority',
                                        default_text=user['priority'],
                                        size=(4, 1),
                                        disabled=True if user['is_admin'] else False,
                                        enable_events=True,
                                        tooltip='От 0 до 15')],
        [sg.Push(), sg.Checkbox('Заблокирован',
                                default=user['is_blocked'],
                                disabled=True if user['is_admin'] else False,
                                text_color='red',
                                enable_events=True,
                                key='modifyUserBlock')],
        # [sg.Text('Таймаут (сек)', size=(13)), sg.Input(size=(10), enable_events=True, key='userTimeout')],
        [sg.Push(), sg.Button(button_text='Изменить', key='modifyUserButton',
                              disabled=True,
                              disabled_button_color='gray')]
    ]
    return sg.Window('Изменить пользователя', layout_modify_user,
                     icon=ICON_BASE_64,
                     use_ttk_buttons=True,
                     finalize=True,
                     # disable_minimize=True,
                     modal=True)


def make_modify_group_window(group: dict):
    layout_modify_group = [
        [sg.Push(), sg.Text('Имя Группы'),
         sg.Input(size=(40, 1), default_text=group['name'],
                  disabled=True,
                  enable_events=True,
                  key='GroupModifyName')],
        [sg.Push(), sg.Text('Описание Группы'),
         sg.Multiline(enter_submits=True, no_scrollbar=True, size=(40, 3),
                      default_text=group['desc'],
                      enable_events=True,
                      key='GroupModifyDesc')],
        [sg.Button(button_text='Очистить чат', key='modifyGroupDelChat'), sg.Push(),
         sg.Checkbox('Экстренная', default=group['is_emergency'],
                     enable_events=True,
                     key='GroupModifyEmergency')],
        [sg.Push(), sg.Checkbox('Заблокировать', text_color='red',
                                enable_events=True,
                                default=group['is_disabled'],
                                key='GroupModifyBlocked')],
        [sg.Push(), sg.Button(button_text='Изменить',
                              disabled=True,
                              disabled_button_color='gray',
                              key='modifyGroupButton')]
    ]
    win = sg.Window('Изменить группу', layout_modify_group, icon=ICON_BASE_64,
                    use_ttk_buttons=True,
                    # disable_minimize=True,
                    finalize=True, modal=True)
    return win


def make_del_user_window(user):
    delete_text = 'Вы уверены, что хотите удалить пользователя ' + user + '?'
    layout_del_user = [
        [sg.Text(delete_text)],
        [sg.Button('Да', key="okDel"), sg.Button('Нет', key='noDel')]
    ]
    return sg.Window('Удалить пользователя', layout_del_user, icon=ICON_BASE_64, use_ttk_buttons=True,
                     finalize=True, modal=True)


def make_clone_user_window(user):
    layout_clone_user = [
        [sg.Text('Логин'), sg.Push(), sg.Input(key='CloneUserLogin', pad=((0, 40), (0, 0)), enable_events=True,
                                               tooltip=('Не меньше' + str(MIN_LEN_LOGIN) + 'и не больше ' +
                                                        str(MAX_LEN_LOGIN) + ' символов'))],
        [sg.Text('Имя'), sg.Push(), sg.Input(key='CloneUserName', pad=((0, 40), (2, 0)), enable_events=True,
                                             tooltip=('Не больше ' + str(MAX_LEN_USERNAME) + ' символов'))],
        [sg.Text('Пароль'), sg.Push(), sg.Input(key='CloneUserPassword', password_char='*', enable_events=True,
                                                tooltip=('Не меньше ' + str(MIN_LEN_PASSWORD) + ' и не больше '
                                                         + str(MAX_LEN_PASSWORD) + ' символов')),
         sg.Button(key='CloneUserShowPassword',
                   button_color='#ffffff',
                   image_data=ICON_BLANK_BASE_64,
                   disabled=True)],
        [sg.Push(), sg.Ok(button_text='Клонировать', key='cloneUserButton')]
    ]
    return sg.Window(('Клонировать пользователя ' + user), layout_clone_user, icon=ICON_BASE_64, use_ttk_buttons=True,
                     finalize=True, modal=True)


def make_add_group_window():
    layout_add_group = [
        [sg.Push(), sg.Text('Имя Группы'), sg.Input(size=(40, 1), key='GroupName',
                                                    enable_events=True,
                                                    tooltip=('Не больше ' + str(MAX_LEN_GROUPNAME) + ' символов'))],
        [sg.Push(), sg.Text('Описание Группы'),
         sg.Multiline(enter_submits=True, no_scrollbar=True, size=(40, 3), key='description',
                      enable_events=True,
                      tooltip=('Не больше ' + str(MAX_LEN_GROUPDESC) + ' символов'))],
        [sg.Push(), sg.Checkbox('Экстренная', key='emergency',
                                enable_events=True,
                                pad=(0, 10))],
        [sg.Push(), sg.Checkbox('Заблокирована',
                                default=False,
                                disabled=False,
                                text_color='red',
                                enable_events=True,
                                key='addGroupBlock')],
        [sg.Push(), sg.Button(button_text='Добавить', disabled=True, key='addGroupButton',
                              disabled_button_color='gray')]
    ]
    return sg.Window('Добавить группу', layout_add_group, icon=ICON_BASE_64, use_ttk_buttons=True,
                     finalize=True,
                     # disable_minimize=True,
                     modal=True)


def make_del_group_window(group):
    delete_text = 'Вы уверены, что хотите удалить группу ' + group + '?'
    layout_del_group = [
        [sg.Text(delete_text)],
        [sg.Button('Да', key="okDelGroup"), sg.Button('Нет', key='noDelGroup')]
    ]
    return sg.Window('Удалить пользователя', layout_del_group, icon=ICON_BASE_64, use_ttk_buttons=True,
                     finalize=True, modal=True)


def make_exit_window():
    exit_text = 'Вы уверены, что хотите выйти?'
    layout_exit = [
        [sg.Text(exit_text)],
        [sg.Push(), sg.Button('Да', key="okExit", pad=((0, 10), (10, 10)), size=10),
         sg.Button('Нет', key='noExit', pad=((10, 0), (10, 10)), size=10), sg.Push()]
    ]
    return sg.Window('Выход', layout_exit, icon=ICON_BASE_64,
                     # disable_minimize=True,
                     use_ttk_buttons=True,
                     finalize=True, modal=True)


def make_confirm_window(message):
    layout_exit = [
        [sg.Text(message)],
        [sg.Push(), sg.Button('Да', key="okExit", pad=((0, 10), (10, 10)), size=10),
         sg.Button('Нет', key='noExit', pad=((10, 0), (10, 10)), size=10), sg.Push()]
    ]
    return sg.Window('Подтверждение', layout_exit, icon=ICON_BASE_64,
                     # disable_minimize=True,
                     use_ttk_buttons=True,
                     finalize=True, modal=True)


def get_online_users(users: list):
    usernames = []
    for user in users:
        username = get_user_name_by_id_from_db(user)
        if username is not None:
            usernames.append(username)
    return "\n".join(sorted(usernames))


def set_window_running_server():
    bar_text = 'Онлайн: ' + str(server_status['online']) + ', БД: ' + str(server_status['db']) \
               + (', Резервный' if server_status["isReserved"] else ', Основной')
    bar_text2 = update_free_space(server_status)
    window['-StatusBar-'].update(bar_text, background_color=(button_color_2 if
                                                             server_status["isReserved"] else status_bar_color))
    window['-StatusBar2-'].update(bar_text2)
    window['-Menu-'].update([
        ['Сервер', ['Установить лицензию...', 'Настройки', 'Очистка БД', ['Частично', 'Полностью']]],
        ['Помощь', 'О программе'], ])
    update_free_space(server_status)
    window['online-users'].update(get_online_users(server_status['onlineUserIds']))
    set_lic_status_bar()


def set_lic_status_bar():
    lic = get_current_lic()
    if lic:
        lic_date_format = datetime.strptime(str(lic['ExpirationDate']), '%d/%m/%Y')
        delta = lic_date_format - datetime.today()
        delta_days = int(delta.days)
        window['-StatusBar3-'].update('Лицензия до: ' + str(lic['ExpirationDate']).replace('/', '-') +
                                      ', осталось дней: ' + str(delta_days))
        window['-StatusBar3-'].update(background_color=status_bar_color if delta_days > WARN_LIC_DAYS
        else button_color_2)
        logging.info(f'Лицензия истечёт через {str(delta_days)} дней')
        if delta_days <= WARN_LIC_DAYS:
            logging.warning(f'Заканчивается срок действия лицензии! Осталось {str(delta_days)} дней')


def the_thread(ip):
    try:
        sleep(5)
        num = 0
        print('Запускаем поток')
        while True:
            if additional_window:
                sleep(ping_timeout)
                continue
            res_ping = ''
            global change_state
            change_state = False
            try:
                res_ping = requests.get(ip, timeout=3)
            except Exception as e:
                print(f'Сервер не доступен {e}')
            if res_ping == '':
                if server_status['run']:
                    logging.info(f'[{num}] Сервер НЕ доступен ')
                    change_state = True
                default_status_dict = {"onlineUsersCount": -1,
                                       "databaseVersion": 0,
                                       'run': server_status['run'],
                                       'freeSpace': 0,
                                       'spaceTotal': 1,
                                       'onlineUserIds': [],
                                       'isReserved': False}
                default_json = json.dumps(default_status_dict)
                # print(f' Thread {num} after - {default_status_dict}')
                print(f' Thread {num} ')
                window.write_event_value('-THREAD-', (threading.current_thread().name, default_json))
            else:
                if res_ping.status_code == 200:
                    if not server_status['run']:
                        logging.info(f'[{num}] Сервер доступен ')
                        change_state = True
                    # print(f' Thread {num} after - {res_ping.text}')
                    print(f' Thread {num}')
                    window.write_event_value('-THREAD-', (threading.current_thread().name, res_ping.text))
            num += 1
            sleep(ping_timeout)
    except Exception as e:
        global thread_started
        thread_started = False
        print(f'Exception! {e}, thread_started = {thread_started}')
        window.write_event_value('-THREAD-', (threading.current_thread().name, json.dumps({'restart': 'true'})))


def check_server(url_ping):
    status = {
        'run': False,
        'online': 0,
        'db': 0,
        'freeSpace': 0,
        'spaceTotal': 1,
        'onlineUserIds': [],
        'isReserved': False}
    res_ping = ''
    try:
        res_ping = requests.get(url_ping, timeout=3)
    except Exception as e:
        print(f"Ошибка подключения. {e}")
    if res_ping == '':
        print('Сервер не отвечает')
        logging.info(f'Сервер НЕ доступен при запуске приложения')
    else:
        if res_ping.status_code == 200:
            status['run'] = True
            logging.info(f'Сервер доступен при запуске приложения')
            res_dict = json.loads(res_ping.text)
            status['online'] = res_dict['onlineUsersCount']
            status['db'] = res_dict['databaseVersion']
            status['freeSpace'] = res_dict['freeSpace']
            status['spaceTotal'] = res_dict['spaceTotal']
            status['onlineUserIds'] = res_dict['onlineUserIds']
            status['isReserved'] = res_dict['isReserved']
            print(status)
        else:
            print(f'Некорректный ответ {res_ping.status_code} от сервера {url_ping}')
    return status


def get_token(url_auth):
    token = ''
    res_auth = ''
    dict_auth = {'login': val_login['Логин'], 'password': val_login['password']}
    try:
        res_auth = requests.post(url_auth, json=dict_auth)
    except Exception as e:
        print(f"Ошибка подключения. {e}")
    if res_auth == '':
        print('Сервер не отвечает')
    else:
        if res_auth.status_code == 200:
            res_dict = json.loads(res_auth.text)
            error = res_dict['error']
            if error:
                print(f'Ошибка сервера: {error}')
                my_popup('Ошибка сервера: ' + error + '. Попробуйте авторизоваться снова!')
                if window:
                    window.hide()
                window_login.un_hide()
                window_login.Element('Логин').SetFocus()
                window_login['Логин'].update(background_color=omega_theme['BACKGROUND'],
                                             text_color=omega_theme['TEXT'])
            else:
                token = res_dict['token']
        else:
            print(f'Некорректный ответ {res_auth.status_code} от сервера {url_auth}')
    return token


def get_settings(url):
    res = ''
    res_dict = dict()
    try:
        res = requests.get(url, timeout=3, headers=HEADER_dict)
    except Exception as e:
        print(f"Ошибка подключения. {e}")
    if res == '':
        print('Сервер не отвечает')
        logging.info(f'Сервер НЕ доступен при запуске приложения')
    else:
        if res.status_code == 200:
            res_dict = json.loads(res.text)
        else:
            print(f'Некорректный ответ {res.status_code} от сервера {url}')
    return res_dict


def filter_journal(journal: list):
    if filter_journal_info:
        if filter_journal_warning:
            if filter_journal_error:
                if filter_journal_critical:
                    return list(
                        filter(lambda x: 'INFO' in x or 'CRITICAL' in x or 'ERROR' in x or 'WARNING' in x, journal))
                else:
                    return list(filter(lambda x: 'INFO' in x or 'ERROR' in x or 'WARNING' in x, journal))
            elif filter_journal_critical:
                return list(filter(lambda x: 'INFO' in x or 'CRITICAL' in x or 'WARNING' in x, journal))
            return list(filter(lambda x: 'INFO' in x or 'WARNING' in x, journal))
        elif filter_journal_error:
            if filter_journal_critical:
                return list(filter(lambda x: 'INFO' in x or 'CRITICAL' in x or 'ERROR' in x, journal))
            else:
                return list(filter(lambda x: 'INFO' in x or 'ERROR' in x, journal))
        elif filter_journal_critical:
            return list(filter(lambda x: 'INFO' in x or 'CRITICAL' in x, journal))
        else:
            return list(filter(lambda x: 'INFO' in x, journal))
    elif filter_journal_warning:
        if filter_journal_error:
            if filter_journal_critical:
                return list(filter(lambda x: 'CRITICAL' in x or 'ERROR' in x or 'WARNING' in x, journal))
            else:
                return list(filter(lambda x: 'ERROR' in x or 'WARNING' in x, journal))
        elif filter_journal_critical:
            return list(filter(lambda x: 'CRITICAL' in x or 'WARNING' in x, journal))
        else:
            return list(filter(lambda x: 'WARNING' in x, journal))
    elif filter_journal_error:
        if filter_journal_critical:
            return list(filter(lambda x: 'CRITICAL' in x or 'ERROR' in x, journal))
        else:
            return list(filter(lambda x: 'ERROR' in x, journal))
    elif filter_journal_critical:
        return list(filter(lambda x: 'CRITICAL' in x, journal))
    else:
        return []


def check_os():
    running_os = os.name
    running_platform = platform.system()
    print(running_os)
    print(running_platform)
    return running_platform


def get_id(os):
    start_command = 'cat /var/lib/dbus/machine-id'
    if ip != '127.0.0.1':
        global SSH_PORT, SSH_LOGIN, SSH_PWD
        ssh, remotepath = get_ssh_connection()
        try:
            stdin, stdout, stderr = ssh.exec_command(start_command)
            stdout = stdout.readlines()
            ssh.close()
            output = ''
            for line in stdout:
                output = output + line
            print(output)
            system_id = output.rstrip('\n')
        except Exception as e:
            print(f'{e}')
            logging.error('Не удалось соединиться с сервером')
            my_popup("Не удалось соединиться с сервером")
            return ''
    else:
        if os == 'Windows':
            command = 'reg query HKLM\Software\Microsoft\Cryptography /v MachineGuid'
            output_list = str(subprocess.getoutput(command)).split()
            system_id = output_list[-1]
        else:
            process = subprocess.Popen(start_command, shell=True,
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE)
            system_id = process.stdout.read().decode('utf-8').rstrip('\n')
            print(system_id)
    with open('system_id', 'w') as f:
        f.write(system_id)
        print('Файл c id создан')
    return system_id


def show_app(icon):
    window.un_hide()
    icon.stop()


def block_user(set_flag, us_id):
    user_dict = {'id': us_id}
    res = False
    if set_flag:
        try:
            res = requests.post(BASE_URL +
                                'disableUser',
                                json=user_dict,
                                headers=HEADER_dict)
        except Exception as e:
            print(f'Не удалось заблокировать абонента - {e}')
            logging.error("Не удалось заблокировать абонента")
    else:
        try:
            res = requests.post(BASE_URL +
                                'enableUser',
                                json=user_dict,
                                headers=HEADER_dict)
        except Exception as e:
            print(f'Не удалось разблокировать абонента - {e}')
            logging.error("Не удалось разблокировать абонента")
    return res


def block_group(set_flag, gr_id):
    group_dict = {'id': gr_id}
    res = False
    if set_flag:
        try:
            res = requests.post(BASE_URL +
                                'disableGroup',
                                json=group_dict,
                                headers=HEADER_dict)
        except Exception as e:
            print(f'Не удалось заблокировать группу - {e}')
            logging.error("Не удалось заблокировать группу")
    else:
        try:
            res = requests.post(BASE_URL +
                                'enableGroup',
                                json=group_dict,
                                headers=HEADER_dict)
        except Exception as e:
            print(f'Не удалось разблокировать группу - {e}')
            logging.error("Не удалось разблокировать группу")
    return res


def disable_input(win):
    win['-OK-set-'].update(disabled=True)
    win['-Exit-set-'].update(disabled=True)
    win['-Индивидуальный-таймаут-'].update(disabled=True)
    win['-Групповой-таймаут-'].update(disabled=True)
    win['-таймаут-окончания-'].update(disabled=True)
    win['-таймаут-тонового-сигнала-'].update(disabled=True)
    win['-таймаут-прослушивания-'].update(disabled=True)
    win['-Мин-аудио-порт-'].update(disabled=True)
    win['-Макс-аудио-порт-'].update(disabled=True)
    win['-пинг-таймаут-'].update(disabled=True)
    win['-auto-del-'].update(disabled=True)
    win['-глубина-сервера-'].update(disabled=True)
    win['-порт-ssh-'].update(disabled=True)
    win['-логин-ssh-'].update(disabled=True)
    win['-пароль-ssh-'].update(disabled=True)
    win.DisableClose = True


def enable_input(win):
    win['-OK-set-'].update(disabled=False)
    win['-Exit-set-'].update(disabled=False)
    win['-Индивидуальный-таймаут-'].update(disabled=False)
    win['-Групповой-таймаут-'].update(disabled=False)
    win['-таймаут-окончания-'].update(disabled=False)
    win['-таймаут-тонового-сигнала-'].update(disabled=False)
    win['-таймаут-прослушивания-'].update(disabled=False)
    win['-Мин-аудио-порт-'].update(disabled=False)
    win['-Макс-аудио-порт-'].update(disabled=False)
    win['-пинг-таймаут-'].update(disabled=False)
    win['-auto-del-'].update(disabled=False)
    win['-глубина-сервера-'].update(disabled=False)
    win['-порт-ssh-'].update(disabled=False)
    win['-логин-ssh-'].update(disabled=False)
    win['-пароль-ssh-'].update(disabled=False)
    win.DisableClose = False


def change_role(role: Enum, set_flag, us_id):
    user_dict = {'userIds': [us_id], 'roles': [role.value]}
    res_modify_user_role = False
    if set_flag:
        try:
            res_modify_user_role = requests.post(BASE_URL +
                                                 'addToRole',
                                                 json=user_dict,
                                                 headers=HEADER_dict)
        except Exception as e:
            print(f'Не удалось добавить роль - {e}')
            logging.error("Не удалось добавить роль")
    else:
        try:
            res_modify_user_role = requests.post(BASE_URL +
                                                 'removeFromRole',
                                                 json=user_dict,
                                                 headers=HEADER_dict)
        except Exception as e:
            print(f'Не удалось удалить роль - {e}')
            logging.error("Не удалось удалить роль")
    return res_modify_user_role


def change_user_type(us_id, user_type):
    user_dict = {'userId': us_id, 'userType': int(user_type)}
    res = False
    try:
        res = requests.post(BASE_URL +
                            'changeUserType',
                            json=user_dict,
                            headers=HEADER_dict)
    except Exception as e:
        print(f'Не удалось поменять тип абонента - {e}')
        logging.error("Не удалось поменять тип абонента")
    return res


def my_popup(message):
    layout = [[sg.Frame('', [[sg.Text(message, justification='center', background_color=omega_theme['INPUT'])],
                             [sg.Push(background_color=omega_theme['INPUT']), sg.Button('OK', pad=((0, 0), (10, 10)),
                                                                                        bind_return_key=True,
                                                                                        key='-ok-popup-',
                                                                                        ),
                              sg.Push(background_color=omega_theme['INPUT'])]], background_color=omega_theme['INPUT'],
                        pad=((7, 7), (10, 10)))]]
    win = sg.Window('Инфо', layout,
                    icon=ICON_BASE_64,
                    use_ttk_buttons=True,
                    no_titlebar=True,
                    border_depth=5,
                    grab_anywhere=True,
                    background_color=omega_theme['INPUT'],
                    finalize=True,
                    use_default_focus=True,
                    modal=True)
    win.Element('-ok-popup-').SetFocus()
    win.read(close=True)


def validate_input(field: str, input_type: int = 1):
    if input_type == 1:
        if re.search('[^\w-]', field):
            return True
    elif input_type == 2:
        if re.search("[^\w\s-]", field):
            return True
        return False


def validate(window: str):
    result = True
    if window == 'add_user':
        print(val_add_user)
        if MIN_LEN_LOGIN <= len(str(val_add_user['UserLogin'])) <= MAX_LEN_LOGIN:
            if not validate_input(str(val_add_user['UserLogin'])):
                window_add_user['UserLogin'].update(background_color=omega_theme['BACKGROUND'],
                                                    text_color=omega_theme['TEXT'])
            else:
                my_popup('Логин содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_"')
                window_add_user.Element('UserLogin').SetFocus()
                window_add_user['UserLogin'].update(background_color=button_color_2,
                                                    text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Логин должен быть не более " + str(MAX_LEN_LOGIN) + " и не менее " +
                      str(MIN_LEN_LOGIN) + " символов"))
            window_add_user.Element('UserLogin').SetFocus()
            window_add_user['UserLogin'].update(background_color=button_color_2,
                                                text_color=omega_theme['BACKGROUND'])
            return False
        if 0 < len(str(val_add_user['UserName'])) <= MAX_LEN_USERNAME:
            if not validate_input(str(val_add_user['UserName']), 2):
                window_add_user['UserName'].update(background_color=omega_theme['BACKGROUND'],
                                                   text_color=omega_theme['TEXT'])
            else:
                my_popup('Имя пользователя содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_add_user.Element('UserName').SetFocus()
                window_add_user['UserName'].update(background_color=button_color_2,
                                                   text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_USERNAME) + " символов"))
            window_add_user.Element('UserName').SetFocus()
            window_add_user['UserName'].update(background_color=button_color_2,
                                               text_color=omega_theme['BACKGROUND'])
            return False
        if MIN_LEN_PASSWORD <= len(str(val_add_user['UserPassword'])) <= MAX_LEN_PASSWORD:
            window_add_user['UserPassword'].update(background_color=omega_theme['BACKGROUND'],
                                                   text_color=omega_theme['TEXT'])
        else:
            my_popup(("Пароль должен быть не менее " + str(MIN_LEN_PASSWORD) + " и не более "
                      + str(MAX_LEN_PASSWORD) + " символов"))
            window_add_user.Element('UserPassword').SetFocus()
            window_add_user['UserPassword'].update(background_color=button_color_2,
                                                   text_color=omega_theme['BACKGROUND'])
            return False
        if val_add_user['UserPriority'] == '':
            result = True
        elif val_add_user['UserPriority'].isdigit() or val_add_user['UserPriority'] == '':
            if 0 <= int((val_add_user['UserPriority'])) <= 15:
                window_add_user['UserPriority'].update(background_color=omega_theme['BACKGROUND'],
                                                       text_color=omega_theme['TEXT'])
            else:
                my_popup("Приоритет должен быть от 0 до 15")
                window_add_user.Element('UserPriority').SetFocus()
                window_add_user['UserPriority'].update(background_color=button_color_2,
                                                       text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup("Приоритет должен быть числом от 0 до 15")
            window_add_user.Element('UserPriority').SetFocus()
            window_add_user['UserPriority'].update(background_color=button_color_2,
                                                   text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'modify_user':
        print(val_modify_user)
        if 0 < len(str(val_modify_user['UserModifyName'])) <= MAX_LEN_USERNAME:
            if not validate_input(str(val_modify_user['UserModifyName']), 2):
                window_modify_user['UserModifyName'].update(background_color=omega_theme['BACKGROUND'],
                                                            text_color=omega_theme['TEXT'])
            else:
                my_popup('Имя пользователя содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_modify_user.Element('UserModifyName').SetFocus()
                window_modify_user['UserModifyName'].update(background_color=button_color_2,
                                                            text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_USERNAME) + " символов"))
            window_modify_user.Element('UserModifyName').SetFocus()
            window_modify_user['UserModifyName'].update(background_color=button_color_2,
                                                        text_color=omega_theme['BACKGROUND'])
            return False
        if not val_modify_user['userModifyPassword'] == '':
            if MIN_LEN_PASSWORD <= len(str(val_modify_user['userModifyPassword'])) <= MAX_LEN_PASSWORD:
                window_modify_user['userModifyPassword'].update(background_color=omega_theme['BACKGROUND'],
                                                                text_color=omega_theme['TEXT'])
            else:
                my_popup(("Пароль должен быть не менее " + str(MIN_LEN_PASSWORD) + " и не более "
                          + str(MAX_LEN_PASSWORD) + " символов"))
                window_modify_user.Element('userModifyPassword').SetFocus()
                window_modify_user['userModifyPassword'].update(background_color=button_color_2,
                                                                text_color=omega_theme['BACKGROUND'])
                return False
        if val_modify_user['UserModifyPriority'] == '':
            result = True
        elif val_modify_user['UserModifyPriority'].isdigit() or val_modify_user['UserModifyPriority'] == '':
            if 0 <= int((val_modify_user['UserModifyPriority'])) <= 15:
                window_modify_user['UserModifyPriority'].update(background_color=omega_theme['BACKGROUND'],
                                                                text_color=omega_theme['TEXT'])
            else:
                my_popup("Приоритет должен быть от 0 до 15")
                window_modify_user.Element('UserModifyPriority').SetFocus()
                window_modify_user['UserModifyPriority'].update(background_color=button_color_2,
                                                                text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup("Приоритет должен быть числом от 0 до 15")
            window_modify_user.Element('UserModifyPriority').SetFocus()
            window_modify_user['UserModifyPriority'].update(background_color=button_color_2,
                                                            text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'add_group':
        print(val_add_group)
        if 0 < len(str(val_add_group['GroupName'])) <= MAX_LEN_GROUPNAME:
            if not validate_input(str(val_add_group['GroupName']), 2):
                window_add_group['GroupName'].update(background_color=omega_theme['BACKGROUND'],
                                                     text_color=omega_theme['TEXT'])
            else:
                my_popup('Описание группы содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_add_group.Element('GroupName').SetFocus()
                window_add_group['GroupName'].update(background_color=button_color_2,
                                                     text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_GROUPNAME) + " символов"))
            window_add_group.Element('GroupName').SetFocus()
            window_add_group['GroupName'].update(background_color=button_color_2,
                                                 text_color=omega_theme['BACKGROUND'])
            return False
        if 0 <= len(str(val_add_group['description'])) <= MAX_LEN_GROUPDESC:
            if not validate_input(str(val_add_group['description']), 2):
                window_add_group['description'].update(background_color=omega_theme['BACKGROUND'],
                                                       text_color=omega_theme['TEXT'])
            else:
                my_popup('Описание группы содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_add_group.Element('description').SetFocus()
                window_add_group['description'].update(background_color=button_color_2,
                                                       text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_GROUPDESC) + " символов"))
            window_add_group.Element('description').SetFocus()
            window_add_group['description'].update(background_color=button_color_2,
                                                   text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'modify_group':
        print(val_modify_group)
        if 0 < len(str(val_modify_group['GroupModifyName'])) <= MAX_LEN_GROUPNAME:
            if not validate_input(str(val_modify_group['GroupModifyName']), 2):
                window_modify_group['GroupModifyName'].update(background_color=omega_theme['BACKGROUND'],
                                                              text_color=omega_theme['TEXT'])
            else:
                my_popup('Имя группы содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_modify_group.Element('GroupModifyName').SetFocus()
                window_modify_group['GroupModifyName'].update(background_color=button_color_2,
                                                              text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_GROUPNAME) + " символов"))
            window_modify_group.Element('GroupModifyName').SetFocus()
            window_modify_group['GroupModifyName'].update(background_color=button_color_2,
                                                          text_color=omega_theme['BACKGROUND'])
            return False
        if 0 <= len(str(val_modify_group['GroupModifyDesc'])) <= MAX_LEN_GROUPDESC:
            if not validate_input(str(val_modify_group['GroupModifyDesc']), 2):
                window_modify_group['GroupModifyDesc'].update(background_color=omega_theme['BACKGROUND'],
                                                              text_color=omega_theme['TEXT'])
            else:
                my_popup('Описание группы содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_modify_group.Element('GroupModifyDesc').SetFocus()
                window_modify_group['GroupModifyDesc'].update(background_color=button_color_2,
                                                              text_color=omega_theme['BACKGROUND'])
                return False

        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_GROUPDESC) + " символов"))
            window_modify_group.Element('GroupModifyDesc').SetFocus()
            window_modify_group['GroupModifyDesc'].update(background_color=button_color_2,
                                                          text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'settings':
        print(val_set)
        if val_set['-Индивидуальный-таймаут-'].isnumeric() and MIN_CALL_TM <= int(
                val_set['-Индивидуальный-таймаут-']) <= MAX_CALL_TM:
            window_settings['-Индивидуальный-таймаут-'].update(background_color=omega_theme['BACKGROUND'],
                                                               text_color=omega_theme['TEXT'])
        else:
            my_popup(("Длительность индивидуального вызова должна быть не менее " + str(
                MIN_CALL_TM) + " и не более " + str(MAX_CALL_TM) + " секунд"))
            window_settings.Element('-Индивидуальный-таймаут-').SetFocus()
            window_settings['-Индивидуальный-таймаут-'].update(background_color=button_color_2,
                                                               text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-Групповой-таймаут-'].isnumeric() and MIN_CALL_TM <= int(
                val_set['-Групповой-таймаут-']) <= MAX_CALL_TM:
            window_settings['-Групповой-таймаут-'].update(background_color=omega_theme['BACKGROUND'],
                                                          text_color=omega_theme['TEXT'])
        else:
            my_popup(("Длительность группового вызова должна быть не менее " + str(MIN_CALL_TM) + " и не более " + str(
                MAX_CALL_TM) + " секунд"))
            window_settings.Element('-Групповой-таймаут-').SetFocus()
            window_settings['-Групповой-таймаут-'].update(background_color=button_color_2,
                                                          text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-таймаут-окончания-'].isnumeric() and MIN_CALL_END_TM <= int(
                val_set['-таймаут-окончания-']) <= MAX_CALL_END_TM:
            window_settings['-таймаут-окончания-'].update(background_color=omega_theme['BACKGROUND'],
                                                          text_color=omega_theme['TEXT'])
        else:
            my_popup(("Таймаут окончания вызова должен быть не менее " + str(MIN_CALL_END_TM) + " и не более " + str(
                MAX_CALL_END_TM) + " секунд"))
            window_settings.Element('-таймаут-окончания-').SetFocus()
            window_settings['-таймаут-окончания-'].update(background_color=button_color_2,
                                                          text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-таймаут-тонового-сигнала-'].isnumeric() and MIN_TONAL_CALL_END_TM <= int(
                val_set['-таймаут-тонового-сигнала-']) <= MAX_TONAL_CALL_END_TM:
            window_settings['-таймаут-тонового-сигнала-'].update(background_color=omega_theme['BACKGROUND'],
                                                                 text_color=omega_theme['TEXT'])
        else:
            my_popup(("Длительность тонального вызова должна быть не менее " + str(
                MIN_TONAL_CALL_END_TM) + " и не более " + str(
                MAX_TONAL_CALL_END_TM) + " секунд"))
            window_settings.Element('-таймаут-тонового-сигнала-').SetFocus()
            window_settings['-таймаут-тонового-сигнала-'].update(background_color=button_color_2,
                                                                 text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-таймаут-прослушивания-'].isnumeric() and MIN_AMB_LIST_TM <= int(
                val_set['-таймаут-прослушивания-']) <= MAX_AMB_LIST_TM:
            window_settings['-таймаут-прослушивания-'].update(background_color=omega_theme['BACKGROUND'],
                                                              text_color=omega_theme['TEXT'])
        else:
            my_popup(("Длительность скрытого прослушивания должна быть не менее " + str(
                MIN_AMB_LIST_TM) + " и не более " + str(
                MAX_AMB_LIST_TM) + ' секунд'))
            window_settings.Element('-таймаут-прослушивания-').SetFocus()
            window_settings['-таймаут-прослушивания-'].update(background_color=button_color_2,
                                                              text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-Мин-аудио-порт-'].isnumeric() and MIN_AUDIO_PORT <= int(
                val_set['-Мин-аудио-порт-']) <= MAX_AUDIO_PORT:
            window_settings['-Мин-аудио-порт-'].update(background_color=omega_theme['BACKGROUND'],
                                                       text_color=omega_theme['TEXT'])
        else:
            my_popup(("Минимальный порт должен быть не менее " + str(MIN_AUDIO_PORT) + " и не более " + str(
                MAX_AUDIO_PORT)))
            window_settings.Element('-Мин-аудио-порт-').SetFocus()
            window_settings['-Мин-аудио-порт-'].update(background_color=button_color_2,
                                                       text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-Макс-аудио-порт-'].isnumeric() and MIN_AUDIO_PORT <= int(
                val_set['-Макс-аудио-порт-']) <= MAX_AUDIO_PORT:
            window_settings['-Макс-аудио-порт-'].update(background_color=omega_theme['BACKGROUND'],
                                                        text_color=omega_theme['TEXT'])
        else:
            my_popup(("Максимальный порт должен быть не менее " + str(MIN_AUDIO_PORT) + " и не более " + str(
                MAX_AUDIO_PORT)))
            window_settings.Element('-Макс-аудио-порт-').SetFocus()
            window_settings['-Макс-аудио-порт-'].update(background_color=button_color_2,
                                                        text_color=omega_theme['BACKGROUND'])
            return False
        if MIN_PORTS <= int(val_set['-Макс-аудио-порт-']) - int(val_set['-Мин-аудио-порт-']) <= MAX_PORTS:
            pass
        else:
            my_popup(("Диапазон портов должен быть не менее " + str(MIN_PORTS) + " и не более " + str(
                MAX_PORTS)))
            window_settings.Element('-Мин-аудио-порт-').SetFocus()
            window_settings['-Макс-аудио-порт-'].update(background_color=button_color_2,
                                                        text_color=omega_theme['BACKGROUND'])
            window_settings['-Мин-аудио-порт-'].update(background_color=button_color_2,
                                                       text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-пинг-таймаут-'].isnumeric() and MIN_PING_TM <= int(val_set['-пинг-таймаут-']) <= MAX_PING_TM:
            window_settings['-пинг-таймаут-'].update(background_color=omega_theme['BACKGROUND'],
                                                     text_color=omega_theme['TEXT'])
        else:
            my_popup(("Интервал опроса сервера должен быть не менее " + str(MIN_PING_TM) + " и не более " + str(
                MAX_PING_TM) + " секунд"))
            window_settings.Element('-пинг-таймаут-').SetFocus()
            window_settings['-пинг-таймаут-'].update(background_color=button_color_2,
                                                     text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-auto-del-'].isnumeric() and MIN_DEL_DAYS <= int(val_set['-auto-del-']) <= MAX_DEL_DAYS:
            window_settings['-auto-del-'].update(background_color=omega_theme['BACKGROUND'],
                                                 text_color=omega_theme['TEXT'])
        else:
            my_popup(("Количество дней должно быть не менее " + str(MIN_DEL_DAYS) + " и не более " + str(
                MAX_DEL_DAYS) + " дней"))
            window_settings.Element('-auto-del-').SetFocus()
            window_settings['-auto-del-'].update(background_color=button_color_2,
                                                 text_color=omega_theme['BACKGROUND'])
            return False
        if val_set['-глубина-сервера-'].isnumeric() and 0 <= int(val_set['-глубина-сервера-']) <= MAX_DEPTH_LOG:
            window_settings['-глубина-сервера-'].update(background_color=omega_theme['BACKGROUND'],
                                                        text_color=omega_theme['TEXT'])
        else:
            my_popup(("Количество строк должно быть не менее 0 и не более " + str(
                MAX_DEPTH_LOG) + " строк"))
            window_settings.Element('-глубина-сервера-').SetFocus()
            window_settings['-глубина-сервера-'].update(background_color=button_color_2,
                                                        text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'clone_user':
        print(val_clone_user)
        if MIN_LEN_LOGIN <= len(str(val_clone_user['CloneUserLogin'])) <= MAX_LEN_LOGIN:
            if not validate_input(str(val_clone_user['CloneUserLogin'])):
                window_clone_user['CloneUserLogin'].update(background_color=omega_theme['BACKGROUND'],
                                                           text_color=omega_theme['TEXT'])
            else:
                my_popup('Логин пользователя содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_"')
                window_clone_user.Element('CloneUserLogin').SetFocus()
                window_clone_user['CloneUserLogin'].update(background_color=button_color_2,
                                                           text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Логин должен быть не более " + str(MAX_LEN_LOGIN) + " и не менее " +
                      str(MIN_LEN_LOGIN) + " символов"))
            window_clone_user.Element('CloneUserLogin').SetFocus()
            window_clone_user['CloneUserLogin'].update(background_color=button_color_2,
                                                       text_color=omega_theme['BACKGROUND'])
            return False
        if 0 < len(str(val_clone_user['CloneUserName'])) <= MAX_LEN_USERNAME:
            if not validate_input(str(val_clone_user['CloneUserName']), 2):
                window_clone_user['CloneUserName'].update(background_color=omega_theme['BACKGROUND'],
                                                          text_color=omega_theme['TEXT'])
            else:
                my_popup('Имя пользователя содержит недопустимые символы\n'
                         'Используйте только буквы, цифры и символы: "-" и "_" и пробел')
                window_clone_user.Element('CloneUserName').SetFocus()
                window_clone_user['CloneUserName'].update(background_color=button_color_2,
                                                          text_color=omega_theme['BACKGROUND'])
                return False
        else:
            my_popup(("Имя должно быть не более " + str(MAX_LEN_USERNAME) + " символов"))
            window_clone_user.Element('CloneUserName').SetFocus()
            window_clone_user['CloneUserName'].update(background_color=button_color_2,
                                                      text_color=omega_theme['BACKGROUND'])
            return False
        if MIN_LEN_PASSWORD <= len(str(val_clone_user['CloneUserPassword'])) <= MAX_LEN_PASSWORD:
            window_clone_user['CloneUserPassword'].update(background_color=omega_theme['BACKGROUND'],
                                                          text_color=omega_theme['TEXT'])
        else:
            my_popup(("Пароль должен быть не менее " + str(MIN_LEN_PASSWORD) + " и не более "
                      + str(MAX_LEN_PASSWORD) + " символов"))
            window_clone_user.Element('CloneUserPassword').SetFocus()
            window_clone_user['CloneUserPassword'].update(background_color=button_color_2,
                                                          text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'login':
        if find_cyrillic(val_login['Логин']):
            my_popup('Логин не должен содержать кириллицу')
            window_login.Element('Логин').SetFocus()
            window_login['Логин'].update(background_color=button_color_2,
                                         text_color=omega_theme['BACKGROUND'])
            return False
    elif window == 'ssh_cred':
        if not (val_cred['ssh_port'] and val_cred['ssh_login']
                and val_cred['ssh_password']):
            my_popup('Введите логин, пароль и порт!')
            window_ssh_credentials.Element('ssh_login').SetFocus()
            return False
    return result


def find_cyrillic(text: str, alphabet=None) -> bool:
    if alphabet is None:
        alphabet = set('абвгдеёжзийклмнопрстуфхцчшщъыьэюя')
    return not alphabet.isdisjoint(text.lower())


def get_user_type(window):
    result = user_type['user']
    if window == 'add_user':
        if val_add_user['disp']:
            result = user_type['dispatcher']
            return result
        elif val_add_user['gw']:
            result = user_type['box']
            return result
        elif val_add_user['adm']:
            result = user_type['admin']
            return result
        elif val_add_user['user']:
            return result
    elif window == 'modify_user':
        if val_modify_user['modifyUserDispatcher']:
            result = user_type['dispatcher']
            return result
        elif val_modify_user['modifyUserGw']:
            result = user_type['box']
            return result
        elif val_modify_user['modifyUserAdm']:
            result = user_type['admin']
            return result
        elif val_modify_user['modifyUserUser']:
            return result
    elif type(window) is dict:
        if window['is_dispatcher']:
            result = user_type['dispatcher']
            return result
        elif window['is_gw']:
            result = user_type['box']
            return result
        elif window['is_admin']:
            result = user_type['admin']
            return result
    return result


def update_users():
    users_from_server = get_users_from_server()
    add_users(users_from_server)
    global users_from_db, user_list, treedata_update_user, filtered_users_list_of_dict
    users_from_db = get_users_from_db()
    users_from_db.sort(key=lambda i: i['login'])
    drop_db('user_in_groups')
    add_user_in_groups(users_from_server)
    if filter_status:
        search_str = values['-filterUser-']
        filtered_users = filter(lambda x: search_str.lower() in x['login'].lower() or
                                          search_str.lower() in x['name'].lower(), users_from_db)
        filtered_users_list_of_dict = list(filtered_users)
        global filtered_users_list
        filtered_users_list, treedata_update_user = get_user_list(
            filtered_users_list_of_dict)
        if not filtered_users_list:
            window['-filterUser-'].update(background_color=button_color_2)
        else:
            window['-filterUser-'].update(background_color='lightblue')
        window['-users-'].update(filtered_users_list)
    else:
        user_list, treedata_update_user = get_user_list(users_from_db)
        window['-users-'].update(user_list)
    window['-TREE2-'].update(treedata_update_user)


def update_groups():
    add_groups(get_groups_from_server())
    global groups_from_db, group_list, treedata_update_group, filtered_groups_list_of_dict
    groups_from_db = get_groups_from_db()
    groups_from_db.sort(key=lambda i: i['name'])
    if filter_status_group:
        search_str = values['-filterGroup-']
        filtered_groups = filter(lambda x: search_str.lower() in x['name'].lower() or
                                           search_str.lower() in x['desc'].lower(), groups_from_db)
        filtered_groups_list_of_dict = list(filtered_groups)
        global filtered_groups_list
        filtered_groups_list, treedata_update_group = get_group_list(filtered_groups_list_of_dict)
        if not filtered_groups_list:
            window['-filterGroup-'].update(background_color=button_color_2)
        else:
            window['-filterGroup-'].update(background_color='lightblue')
        window['-groups2-'].update(filtered_groups_list)
    else:
        group_list, treedata_update_group = get_group_list(groups_from_db)
        window['-groups2-'].update(group_list)
    window['-TREE-'].update(treedata_update_group)


def update_users_and_groups():
    init_db()
    global users_from_db, user_list, treedata_update_user, groups_from_db, group_list, treedata_update_group, \
        filtered_users_list_of_dict, filtered_group_list_of_dict
    users_from_db = get_users_from_db()
    groups_from_db = get_groups_from_db()
    users_from_db.sort(key=lambda i: i['login'])
    groups_from_db.sort(key=lambda i: i['name'])
    treedata_update_group = sg.TreeData()
    if users_from_db != [[]]:

        if filter_status:
            search_str = values['-filterUser-']
            filtered_users = filter(lambda x: search_str.lower() in x['login'].lower() or
                                              search_str.lower() in x['name'].lower(), users_from_db)
            filtered_users_list_of_dict = list(filtered_users)
            global filtered_users_list
            filtered_users_list, treedata_update_user = get_user_list(
                filtered_users_list_of_dict)
            window['-users-'].update(filtered_users_list)
        else:
            user_list, treedata_update_user = get_user_list(users_from_db)
            window['-users-'].update(user_list)
    if groups_from_db != [[]]:
        group_list, treedata_update_group = get_group_list(groups_from_db)
        if filter_status_group:
            search_str = values['-filterGroup-']
            filtered_groups = filter(lambda x: search_str.lower() in x['name'].lower() or
                                               search_str.lower() in x['desc'].lower(), groups_from_db)
            filtered_groups_list_of_dict = list(filtered_groups)
            global filtered_groups_list
            filtered_groups_list = list()
            for filtered_group_list_of_dict in filtered_groups_list_of_dict:
                filtered_groups_list.append([filtered_group_list_of_dict['id'],
                                             filtered_group_list_of_dict['name'],
                                             filtered_group_list_of_dict['desc']])
            window['-groups2-'].update(filtered_groups_list)
        else:
            window['-groups2-'].update(group_list)
    window['-TREE2-'].update(treedata_update_user)
    window['-TREE-'].update(treedata_update_group)


def update_free_space(status):
    nonfree_space_perc = round((status['spaceTotal'] -
                                status['freeSpace']) * 100 / status['spaceTotal'], 1)
    upd_t = str(round((100 - nonfree_space_perc), 1)) + '% (' \
            + str(round(status['freeSpace'] / 1024 / 1024 / 1024, 2)) \
            + ' Гб) свободного места на сервере'
    window['-StatusBar2-'].update(upd_t, background_color=status_bar_color if nonfree_space_perc < WARN_FREE_SPACE
    else 'yellow' if nonfree_space_perc < ALARM_FREE_SPACE else button_color_2)
    return upd_t


def set_buttons_disabled(param=True):
    window['-AddUser-'].update(disabled=param)
    window['-AddGroup-'].update(disabled=param)
    if filter_status:
        window['-ClearFilterUser-'].update(disabled=False)
    else:
        window['-ClearFilterUser-'].update(disabled=True)
    if filter_status_group:
        window['-ClearFilterGroup-'].update(disabled=False)
    else:
        window['-ClearFilterGroup-'].update(disabled=True)
    if param:
        window['Изменить пользователя'].update(disabled=param)
        window['Изменить группу'].update(disabled=param)
        window['-DelUser-'].update(disabled=param)
        window['-DelGroup-'].update(disabled=param)
        window['-CloneUser-'].update(disabled=param)
        window['-BlockUser-'].update(disabled=param)
        window['-BlockGroup-'].update(disabled=param)
        window['-checkAllGroups-'].update(disabled=param)
        window['-checkAllUsers-'].update(disabled=param)
        window['-ClearFilterUser-'].update(disabled=param)
        window['-ClearFilterGroup-'].update(disabled=param)
    window['-filterUser-'].update(disabled=param)
    window['-filterGroup-'].update(disabled=param)
    window['-hide-online-'].update(disabled=param)
    window['-frame-online-'].update(visible=not window['-frame-online-'].metadata)
    window['-users-'].update(visible=not param)
    window['-groups2-'].update(visible=not param)
    window['-TREE-'].update(visible=not param)
    window['-TREE2-'].update(visible=not param)


def get_ssh_connection(pwd=SSH_PWD):
    global SSH_LOGIN, SSH_PWD, SSH_PORT
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        if not SSH_LOGIN or SSH_LOGIN == base64.b64decode(SSH_LOGIN_DEF).decode("utf-8"):
            if pwd:
                ssh.connect(hostname=ip, timeout=3, port=SSH_PORT,
                            username=base64.b64decode(SSH_LOGIN_DEF).decode("utf-8"),
                            password=pwd)
                SSH_LOGIN, SSH_PWD = base64.b64decode(SSH_LOGIN_DEF).decode("utf-8"), pwd
            else:
                ssh.connect(hostname=ip, timeout=3, port=SSH_PORT,
                            username=base64.b64decode(SSH_LOGIN_DEF).decode("utf-8"),
                            password=base64.b64decode(SSH_PWD_DEF).decode("utf-8"))
                SSH_LOGIN, SSH_PWD = base64.b64decode(SSH_LOGIN_DEF).decode("utf-8"), base64.b64decode(
                    SSH_PWD_DEF).decode("utf-8")
            remotepath = '/home/omega/Omega/'
        else:
            ssh.connect(hostname=ip, timeout=3, port=SSH_PORT, username=SSH_LOGIN, password=SSH_PWD)
            remotepath = '/home/' + SSH_LOGIN + '/Omega/'
        change_config_file('ssh')
        return ssh, remotepath
    except Exception as e:
        print(f'{e}')
        logging.error('Не удалось подключиться к серверу!')
        my_popup("Не удалось подключиться к серверу! Введите логин/пароль ssh для сервера")
        try:
            global window_ssh_credentials
            window_ssh_credentials = make_credential_window()
            login_ssh_password_clear = False
            window_ssh_credentials.Element('ssh_login').SetFocus()
            while True:
                global ev_cred, val_cred
                ev_cred, val_cred = window_ssh_credentials.Read()
                print(f'{ev_cred}, {val_cred}')
                if ev_cred == sg.WIN_CLOSED or ev_cred == '-Exit-set-':
                    window_ssh_credentials.close()
                    break
                if ev_cred == 'showLoginPasswordCred':
                    if login_ssh_password_clear:
                        window_ssh_credentials['ssh_password'].update(password_char='*')
                        window_ssh_credentials['showLoginPasswordCred'].update(image_data=ICON_SHOW_BASE_64)
                        login_ssh_password_clear = False
                    else:
                        window_ssh_credentials['ssh_password'].update(password_char='')
                        window_ssh_credentials['showLoginPasswordCred'].update(image_data=ICON_HIDE_BASE_64)
                        login_ssh_password_clear = True
                    window_ssh_credentials.Element('ssh_password').SetFocus()
                if ev_cred == 'OK cred':
                    if validate('ssh_cred'):
                        SSH_PORT, SSH_LOGIN, SSH_PWD = val_cred['ssh_port'], val_cred['ssh_login'], val_cred[
                            'ssh_password']
                        ssh = paramiko.SSHClient()
                        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                        try:
                            ssh.connect(hostname=ip, timeout=3, port=SSH_PORT, username=SSH_LOGIN, password=SSH_PWD)
                        except Exception as e:
                            print(f'{e}')
                            my_popup('Введите корректные данные!')
                            window_ssh_credentials.Element('ssh_login').SetFocus()
                            continue
                        if ssh:
                            remotepath = '/home/' + SSH_LOGIN + '/Omega/'
                            change_config_file('ssh')
                            window_ssh_credentials.close()
                            return ssh, remotepath
                        else:
                            continue
                    else:
                        continue
        except Exception as e:
            print(f'{e}')


def get_current_lic():
    res_get_lic = ''
    try:
        res_get_lic = requests.get(BASE_URL + 'getLicenseInfo', headers=HEADER_dict)
    except Exception as e:
        print(f"Запрос лицензии прошёл неудачно - {e}")
        logging.warning(f"Запрос лицензии прошёл неудачно - {e}")
    if res_get_lic != '' and res_get_lic.status_code == 200:
        lic = res_get_lic.json()
        print(lic)
    else:
        lic = dict()
        my_popup('Запрос лицензии прошёл неудачно! Смотрим причину на сервере...')
        try:
            ssh, remotepath = get_ssh_connection()
            if ssh:
                stdin, stdout, stderr = ssh.exec_command('cat $HOME/Omega/.licenseState')
                stdout = stdout.readlines()
                ssh.close()
                output = ''
                for line in stdout:
                    output = output + line
                print(f'Состояние лицензии - {output}')
                if output:
                    if output == '0':
                        print('С лицензией всё в порядке')
                        logging.info('С лицензией всё в порядке')
                        my_popup('С лицензией всё в порядке')
                    elif output == '5':
                        print('Ожидается применение лицензии')
                        logging.warning('Ожидается применение лицензии')
                        my_popup('Ожидается применение лицензии')
                    elif output == '6':
                        print('Нет файла Omega/generated.lic')
                        logging.error('Нет файла Omega/generated.lic')
                        my_popup('Нет файла Omega/generated.lic')
                    elif output == '7':
                        print('Нет файла Omega/keys/pub.pem')
                        logging.error('Нет файла Omega/keys/pub.pem')
                        my_popup('Нет файла Omega/keys/pub.pem')
                    elif output == '8':
                        print('Лицензия не валидна')
                        logging.error('Лицензия не валидна')
                        my_popup('Лицензия не валидна')
                    elif output == '9':
                        print('Не получить дату окончания лицензии')
                        logging.error('Не получить дату окончания лицензии')
                        my_popup('Не получить дату окончания лицензии')
                    elif output == '10':
                        print('Лицензия просрочена')
                        logging.error('Лицензия просрочена')
                        my_popup('Лицензия просрочена')
                    elif output == '11':
                        print('Количество пользователей в лицензии = 0')
                        logging.error('Количество пользователей в лицензии = 0')
                        my_popup('Количество пользователей в лицензии = 0')
                    else:
                        print(f'Неизвестное состояние лицензии: {output}')
                        logging.warning(f'Неизвестное состояние лицензии: {output}')
                        my_popup(f'Неизвестное состояние лицензии: {output}')
                ssh.close()
        except Exception as e:
            print(f"Не удалось посмотреть состояние лицензии - {e}")
            logging.warning(f"Не удалось посмотреть состояние лицензии - {e}")
    return lic


def parse_cur_lic(lic):
    LICS = [['Количество абонентов', lic['UserCount'],
             lic['ExpirationDate']],
            ['Количество диспетчеров', lic['DispatcherCount'], lic[
                'ExpirationDate']]]
    for feature in lic['Features']:
        feature_name = "Удалённое прослушивание" if feature == "AmbientListening" \
            else "Геопозиционирование" if feature == "GeoData" \
            else "Динамические группы" if feature == "DGNA" \
            else "Удалённое управление терминалами" if feature == "OTAP" \
            else "Длительное прослушивание" if feature == "LongAmbientListening" \
            else "Контроль пересылки" if feature == "MFC" else "?"
        LICS.append([feature_name, '+', lic['ExpirationDate']])
    return LICS


def get_logs():
    try:
        with open('admin.log', mode='r', encoding='cp1251') as log_f:
            s = log_f.read().rstrip('\n')
            journal_list = s.split('\n')
            for i, raw in enumerate(journal_list):
                journal_list[i] = str(i + 1).ljust(6) + ' ' + raw
            filtered_journal = filter_journal(journal_list)
            if filter_status_journal:
                filtered_journal = list(
                    filter(lambda x: values['-filterJournal-'].lower() in x.lower(), filtered_journal))
            return ["\n".join(filtered_journal[-LOG_DEPTH:]), len(filtered_journal), len(journal_list)]
    except Exception as e:
        print(f'Не удалось получить локальные логи - {e}')
        logging.error(f'Не удалось получить локальные логи - {e}')
    return ['', 0, 0]


def get_block_status(user_to_change):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    if type(user_to_change) is dict:
        cur.execute("select is_blocked from users where id='" + user_to_change['id'] + "'")
    else:
        cur.execute("select is_blocked from users where id='" + user_to_change + "'")
    status = cur.fetchone()
    if status is not None:
        status = status[0]
    con.close()
    return status


def get_block_status_group(group):
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    if type(group) is dict:
        cur.execute("select is_disabled from groups where id='" + group['id'] + "'")
    else:
        cur.execute("select is_disabled from groups where id='" + group + "'")
    status = cur.fetchone()
    if status is not None:
        status = status[0]
    con.close()
    return status


def get_logs_server():
    global SSH_LOGIN, SSH_PWD, SSH_PORT
    try:
        ssh, remotepath = get_ssh_connection()
        ftp_client = ssh.open_sftp()
        ftp_client.get(remotepath=(remotepath + '/log.txt'), localpath='logs/ServerLog.txt')
        ftp_client.close()
        ssh.close()
        change_config_file('ssh')
        global got_server_log
        got_server_log = True
        return filter_logs_server()
    except Exception as e:
        print(f'{e}')
        logging.error('Не удалось получить логи сервера!')
        my_popup("Не удалось получить логи сервера!")
    return ['', 0, 0]


def get_journal_with_types(journal: list):
    count = 0
    count_all = 0
    unset_row = False
    final_list = list()
    default_types = ['info', 'warn', 'fail']
    string_types = list()
    if filter_journal_info_server:
        string_types.append('info')
    if filter_journal_warn_server:
        string_types.append('warn')
    if filter_journal_fail_server:
        string_types.append('fail')
    raw: str
    for i, raw in enumerate(journal):
        if raw.startswith(tuple(string_types)):
            count += 1
            count_all += 1
            unset_row = False
            final_list.append(str(count).ljust(6) + ' ' + raw)
        else:
            if raw.startswith(tuple(set(default_types) - set(string_types))):
                unset_row = True
                count_all += 1
            else:
                if not unset_row:
                    final_list.append('.'.ljust(15, '.') + raw)
                else:
                    pass
    return final_list, count, count_all


def filter_logs_server():
    try:
        with open('logs/ServerLog.txt', mode='r', encoding='utf-8') as log_f:
            s = log_f.read().rstrip('\n')
            journal_list = s.split('\n')
            journal_list_with_types, count_log, count_all = get_journal_with_types(journal_list)
            if filter_status_journal_server:
                filtered_journal_server = list()
                new_i = 0
                filter_count_log = 0
                for i, raw in enumerate(journal_list_with_types):
                    if i >= new_i:
                        new_i += 1
                        if values['-filterJournalServer-'].lower() in raw.lower():
                            try:
                                if raw[0:6].strip().isdigit():
                                    filtered_journal_server.append(raw)
                                else:
                                    for j in range(1, i):
                                        if journal_list_with_types[i - j][0:6].strip().isdigit():
                                            for k in range(j, -1, -1):
                                                filtered_journal_server.append(journal_list_with_types[i - k])
                                            break
                                for w in range(0, len(journal_list_with_types) - i - 1):
                                    if journal_list_with_types[i + w + 1][0:6].strip().isdigit():
                                        for m in range(0, w):
                                            filtered_journal_server.append(journal_list_with_types[i + m + 1])
                                        new_i += w
                                        break
                                    if len(journal_list_with_types) - 1 == i + w + 1:
                                        for m in range(0, w + 1):
                                            filtered_journal_server.append(journal_list_with_types[i + m + 1])
                                            new_i += 1
                                        break
                                filter_count_log += 1
                            except Exception as e:
                                print(f'{e}')
                return ["\n".join(filtered_journal_server[-LOG_DEPTH:]), filter_count_log, count_all]
            return ["\n".join(journal_list_with_types[-LOG_DEPTH:]), count_log, count_all]
    except Exception as e:
        print(f'{e}')
        logging.error('Не удалось прочитать логи сервера!')
        my_popup("Не удалось прочитать логи сервера!")
        return ['', 0, 0]


def change_config_file(mode):
    if os.stat(Path(Path.cwd(), 'config', 'app.json')).st_size:
        try:
            with open(Path(Path.cwd(), 'config', 'app.json'), 'r') as f_app_config:
                config_app = json.load(f_app_config)
                print(config_app)
                if mode == 'auth':
                    config_app['ip'] = val_login['ip']
                    config_app['login'] = val_login['Логин']
                elif mode == 'ssh':
                    config_app['ssh_login'] = SSH_LOGIN
                    config_app['ssh_port'] = SSH_PORT
                elif mode == 'all':
                    config_app['ip'] = val_login['ip']
                    config_app['login'] = val_login['Логин']
                    config_app['ssh_login'] = SSH_LOGIN
                    config_app['ssh_port'] = SSH_PORT
            with open(Path(Path.cwd(), 'config', 'app.json'), 'w') as f_app_config:
                f_app_config.write(json.dumps(config_app, sort_keys=True, indent=4))
                print("Данные входа сохранены")
        except Exception as e:
            print(f'{e}')


if __name__ == '__main__':

    if sys.version_info[1] < 9:
        logging.basicConfig(filename='admin.log', filemode='a', format='%(asctime)s %(levelname)s %(message)s',
                            datefmt='%d/%m/%Y %H:%M:%S', level=logging.INFO)
    else:
        logging.basicConfig(filename='admin.log', filemode='a', format='%(asctime)s %(levelname)s %(message)s',
                            encoding='cp1251', datefmt='%d/%m/%Y %H:%M:%S', level=logging.INFO)
    logging.getLogger('paramiko').setLevel(logging.WARNING)
    logging.info('Старт лога')
    window_login = make_login_window()
    login_password_clear = False
    remember_credentials = True
    window = None
    # active_config = None
    ip_config = None
    change_state = None
    create_db()
    thread_started = False
    current_db = 0
    ip = ''
    additional_window = False
    # noinspection PyUnboundLocalVariable
    if active_config:
        if window_login.ReturnValuesDictionary['Логин']:
            window_login.Element('password').SetFocus()
        else:
            window_login.Element('Логин').SetFocus()
    while True:
        break_flag = False
        break_flag2 = False
        ev_login, val_login = window_login.Read()
        if ev_login == sg.WIN_CLOSED or ev_login == 'Exit':
            break
        if ev_login == 'password':
            window_login['showLoginPassword'].update(disabled=False)
            window_login['showLoginPassword'].update(image_data=ICON_SHOW_BASE_64)
        if ev_login == 'showLoginPassword':
            if login_password_clear:
                window_login['password'].update(password_char='*')
                window_login['showLoginPassword'].update(image_data=ICON_SHOW_BASE_64)
                login_password_clear = False
            else:
                window_login['password'].update(password_char='')
                window_login['showLoginPassword'].update(image_data=ICON_HIDE_BASE_64)
                login_password_clear = True
            window_login.Element('password').SetFocus()
        if ev_login == 'ip':
            pass
        if ev_login == 'Логин':
            pass
        if ev_login == 'remember_credentials':
            print(ev_login)
            print(val_login)
            if val_login['remember_credentials']:
                remember_credentials = True
            else:
                remember_credentials = False
        if ev_login == "OK button":
            host_ok = False
            port = 5000
            if remember_credentials:
                # noinspection PyUnboundLocalVariable
                if ip_config != val_login['ip']:
                    change_config_file('auth')
            try:
                parsed_url = urllib.parse.urlsplit('//' + val_login['ip'])
                print(parsed_url.hostname, parsed_url.port)
                if re.search('^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+', parsed_url.hostname):
                    ip = ipaddress.ip_address(parsed_url.hostname).exploded
                else:
                    print(socket.gethostbyname(parsed_url.hostname))
                    ip = socket.gethostbyname(parsed_url.hostname)
                host_ok = True
                if parsed_url.port:
                    port = parsed_url.port
            except Exception as e:
                print(f'{e}')
            if not host_ok:
                my_popup('Неверный IP')
                window_login.Element('ip').SetFocus()
                window_login['ip'].update(background_color=button_color_2,
                                          text_color=omega_theme['BACKGROUND'])
                continue
            window_login['ip'].update(background_color=omega_theme['BACKGROUND'],
                                      text_color=omega_theme['TEXT'])
            if validate('login'):
                if ip == '127.0.0.1':  # TODO
                    LOCAL = True
                    # print(f'DEF1A = {DEF1A}')
                    try:
                        with open("/home/omega/Omega/.admPWD_b", mode='r') as pwd_hash_file:
                            DEF1A = str(pwd_hash_file.readline()).rstrip('\n')
                            # print(f'{type(DEF1A)}')
                            # print(f'DEF1A = {DEF1A}')
                    except Exception as e:
                        print(f'{e}')
                        logging.error(f'{e}')
                    hash_pwd = hashlib.pbkdf2_hmac('sha256',
                                                   bytes(str(val_login["password"]).encode('ASCII', 'ignore')),
                                                   bytes(str(SALT).encode('ASCII')), 10000).hex()
                    # print(f'{type(hash_pwd)}')
                    # print(f'{hash_pwd}')
                    # print(f'{hash_pwd == DEF1A}')
                    if (hashlib.pbkdf2_hmac('sha256', bytes(str(val_login["Логин"]).encode('ASCII')),
                                            bytes(str(SALT).encode('ASCII')), 10000).hex() == DEF1
                        and hashlib.pbkdf2_hmac('sha256', bytes(str(val_login["password"]).encode('ASCII', 'ignore')),
                                                bytes(str(SALT).encode('ASCII')), 10000).hex() == DEF1A) \
                            or (hashlib.pbkdf2_hmac('sha256', bytes(str(val_login["Логин"]).encode('ASCII')),
                                                    bytes(str(SALT).encode('ASCII')), 10000).hex() == DEF2
                                and hashlib.pbkdf2_hmac('sha256', bytes(str(val_login["password"]).encode('ASCII')),
                                                        bytes(str(SALT).encode('ASCII')), 10000).hex() == DEF2) \
                            or (hashlib.pbkdf2_hmac('sha256', bytes(str(val_login["Логин"]).encode('ASCII')),
                                                    bytes(str(SALT).encode('ASCII')), 10000).hex() == DEF3
                                and hashlib.pbkdf2_hmac('sha256', bytes(str(val_login["password"]).encode('ASCII')),
                                                        bytes(str(SALT).encode('ASCII')), 10000).hex() == DEF3A):
                        logging.info('Вход на локальный сервер')
                    else:
                        my_popup('Неверные данные')
                        window_login.Element('Логин').SetFocus()
                        continue
                while True:
                    if break_flag:
                        break
                    https_on = True if val_login['https_on'] else False
                    if https_on:
                        BASE_URL = BASE_URL_PING = BASE_URL_AUTH = BASE_URL_SETTINGS = 'https://'  # TODO
                    else:
                        BASE_URL = BASE_URL_PING = BASE_URL_AUTH = BASE_URL_SETTINGS = 'http://'
                    BASE_URL += ip + ':' + str(port) + '/api/admin/'
                    BASE_URL_PING += ip + ':' + str(port) + '/api/ping'
                    BASE_URL_AUTH += ip + ':' + str(port) + '/api/auth'
                    BASE_URL_SETTINGS += ip + ':' + str(port) + '/api/admin/settings'
                    server_status = check_server(BASE_URL_PING)
                    current_db = server_status['db']
                    if server_status['run']:
                        TOKEN = get_token(BASE_URL_AUTH)
                        if not TOKEN:
                            break
                        else:
                            HEADER_dict = {'Authorization': "Bearer " + TOKEN}
                            print(get_settings(BASE_URL_SETTINGS))
                            init_db()
                            users_from_db = get_users_from_db()
                            groups_from_db = get_groups_from_db()
                    else:
                        users_from_db = [{}]
                        groups_from_db = [{}]
                    window_login.hide()
                    filter_status = False
                    filter_status_group = False
                    filter_status_journal = False
                    filter_status_journal_server = False
                    filter_journal_info = True
                    filter_journal_info_server = True
                    filter_journal_warn_server = True
                    filter_journal_fail_server = True
                    filter_journal_warning = True
                    filter_journal_error = True
                    filter_journal_critical = True
                    got_server_log = False
                    ping_timeout = DEF_PING_TM
                    window = make_main_window(ip)
                    tree = window['-TREE-']
                    tree2 = window['-TREE2-']
                    if server_status['run']:
                        set_window_running_server()
                    else:
                        set_buttons_disabled()
                        window.Element('-Start-').SetFocus()
                    while True:
                        if break_flag2:
                            break
                        if server_status['run']:  # TODO
                            window['-Start-'].update(disabled=True)
                        else:
                            window['-Stop-'].update(disabled=True)
                        if not thread_started:
                            threading.Thread(target=the_thread, args=[BASE_URL_PING], daemon=True).start()
                            thread_started = True
                        event, values = window.read()
                        # print(event, type(event), values)
                        if event == '-hide-online-':
                            window['-frame-online-'].update(visible=window['-frame-online-'].metadata == True)
                            window['-frame-online-'].metadata = not window['-frame-online-'].metadata
                            window['-hide-online-'].update(
                                text=SYMBOL_RIGHT_ARROWHEAD if window[
                                    '-frame-online-'].metadata else SYMBOL_LEFT_ARROWHEAD)
                        if event == '-THREAD-':
                            if not thread_started:
                                # print(json.loads(values['-THREAD-'][1]))
                                threading.Thread(target=the_thread, args=[BASE_URL_PING], daemon=True).start()
                                thread_started = True
                            else:
                                dict_online = json.loads(values['-THREAD-'][1])
                                # print(current_db)
                                if dict_online["onlineUsersCount"] != -1:
                                    update_free_space(dict_online)
                                    window['-Start-'].update(disabled=True)
                                    window['-Stop-'].update(disabled=False)
                                    window['online-users'].update(get_online_users(dict_online['onlineUserIds']))
                                    if not server_status['run']:
                                        TOKEN = get_token(BASE_URL_AUTH)
                                        if not TOKEN:
                                            break_flag = True
                                            break
                                        else:
                                            HEADER_dict = {'Authorization': "Bearer " + TOKEN}
                                            update_users_and_groups()
                                            window['-Menu-'].update([
                                                ['Сервер', ['Установить лицензию...', 'Настройки', 'Очистка БД',
                                                            ['Частично', 'Полностью']]],
                                                ['Помощь', 'О программе'], ])
                                    if current_db < dict_online['databaseVersion']:  #TODO
                                        update_users_and_groups()
                                        current_db = dict_online['databaseVersion']
                                    update_text = 'Онлайн: ' + str(dict_online["onlineUsersCount"]) \
                                                  + ', БД: ' + str(dict_online["databaseVersion"]) \
                                                  + (', Резервный' if dict_online["isReserved"] else ', Основной')
                                    update_text2 = update_free_space(dict_online)
                                    window['-StatusBar-'].update(update_text,
                                                                 background_color=(button_color_2 if
                                                                                   dict_online[
                                                                                       "isReserved"] else status_bar_color))
                                    window['-StatusBar2-'].update(update_text2)
                                    set_buttons_disabled(False)
                                    server_status['run'] = True
                                else:
                                    window['-StatusBar-'].update('Сервер не доступен', background_color=button_color_2)
                                    window['-StatusBar2-'].update('', background_color=button_color_2)
                                    window['-StatusBar3-'].update('', background_color=button_color_2)
                                    window['-Start-'].update(disabled=False)
                                    window['-Stop-'].update(disabled=True)
                                    window['-users-'].update([[]])
                                    window['-groups2-'].update([[]])
                                    clear_treedata = sg.TreeData()
                                    window['-TREE-'].update(clear_treedata)
                                    window['-TREE2-'].update(clear_treedata)
                                    set_buttons_disabled()
                                    window.Element('-Start-').SetFocus()
                                    server_status['run'] = False
                                    update_free_space(dict_online)
                                    window['online-users'].update('')
                                    if server_status['run']:
                                        server_status['run'] = False
                                        window['-Menu-'].update([
                                            ['Сервер', ['Установить лицензию...', '!Настройки', 'Очистка БД',
                                                        ['Частично', 'Полностью']]],
                                            ['Помощь', 'О программе'], ])
                                # noinspection PyUnboundLocalVariable
                                if change_state:  # TODO
                                    output_text = get_logs()
                                    window['journal'].update(output_text[0])
                                    count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                                    window['countLogs'].update(count_string)
                                    set_lic_status_bar()
                        if event == sg.WINDOW_CLOSE_ATTEMPTED_EVENT:
                            additional_window = True
                            break_flag = True
                            window_exit = make_exit_window()
                            while True:
                                ev_exit, val_exit = window_exit.Read()
                                if ev_exit == 'okExit':
                                    logging.info('Панель администратора остановлена')
                                    logging.info('Стоп лога')
                                    window_exit.close()
                                    window_login.close()
                                    window.close()
                                    break_flag2 = True
                                    break
                                if ev_exit == sg.WIN_CLOSED or ev_exit == 'Exit':
                                    # print('Закрыл окно выхода')
                                    break
                                if ev_exit == 'noExit':
                                    # print('Закрыл окно выхода')
                                    window_exit.close()
                                    break
                            additional_window = False
                        if event == sg.WIN_CLOSED or event == 'Exit':
                            break_flag = True
                            break
                        if event == '-users-':
                            if values['-users-']:
                                if filter_status:
                                    # noinspection PyUnboundLocalVariable
                                    selected_user = filtered_users_list_of_dict[values['-users-'][0]]
                                else:
                                    selected_user = users_from_db[values['-users-'][0]]
                                window['Apply'].update(disabled=True)
                                window['Изменить пользователя'].update(disabled=False)
                                if selected_user['name'] == 'admin':
                                    window['-DelUser-'].update(disabled=True)
                                else:
                                    window['-DelUser-'].update(disabled=False)
                                window['-CloneUser-'].update(disabled=False)
                                if get_block_status(selected_user):
                                    window['-BlockUser-'].update(image_data=ICON_UNBLOCK_BASE_64_BLUE)
                                    window['-BlockUser-'].TooltipObject.text = 'Разблокировать'
                                else:
                                    window['-BlockUser-'].update(image_data=ICON_BLOCK_BASE_64_BLUE)
                                    window['-BlockUser-'].TooltipObject.text = 'Заблокировать'
                                window['-BlockUser-'].update(disabled=False)
                                window['-checkAllGroups-'].update(disabled=False)
                                window['-checkAllGroups-'].update(False)
                                groups_for_user = get_groups_for_user_from_db(selected_user['id'])
                                group_for_user_ids = []
                                for group_for_user in groups_for_user:
                                    group_for_user_ids.append(group_for_user['id'])
                                all_group_ids = []
                                for group_from_all in groups_from_db:
                                    all_group_ids.append(group_from_all['id'])
                                tree.metadata = []
                                for group_id_for_tree in all_group_ids:
                                    if group_id_for_tree in group_for_user_ids:
                                        tree.metadata.append(group_id_for_tree)
                                        tree.update(key=group_id_for_tree, icon=check[1])
                                    else:
                                        tree.update(key=group_id_for_tree, icon=check[0])
                            else:
                                window['Apply'].update(disabled=True)
                                window['Изменить пользователя'].update(disabled=True)
                                window['-CloneUser-'].update(disabled=True)
                                window['-BlockUser-'].update(disabled=True)
                                window['-DelUser-'].update(disabled=True)
                                window['-checkAllGroups-'].update(disabled=True)
                                window['-checkAllGroups-'].update(True)
                        if event == '-groups2-':
                            if values['-groups2-']:
                                if filter_status_group:
                                    # noinspection PyUnboundLocalVariable
                                    selected_group = filtered_groups_list_of_dict[values['-groups2-'][0]]
                                else:
                                    selected_group = groups_from_db[values['-groups2-'][0]]
                                window['Apply2'].update(disabled=True)
                                window['Изменить группу'].update(disabled=False)
                                window['-DelGroup-'].update(disabled=False)
                                if get_block_status_group(selected_group):
                                    window['-BlockGroup-'].update(image_data=ICON_UNBLOCK_BASE_64_BLUE)
                                    window['-BlockGroup-'].TooltipObject.text = 'Разблокировать'
                                else:
                                    window['-BlockGroup-'].update(image_data=ICON_BLOCK_BASE_64_BLUE)
                                    window['-BlockGroup-'].TooltipObject.text = 'Заблокировать'
                                window['-BlockGroup-'].update(disabled=False)
                                window['-checkAllUsers-'].update(disabled=False)
                                window['-checkAllUsers-'].update(False)
                                users_for_group = get_users_for_group_from_db(selected_group['id'])
                                user_for_group_ids = []
                                for user_for_group in users_for_group:
                                    user_for_group_ids.append(user_for_group['id'])
                                all_user_ids = []
                                for user_from_all in users_from_db:
                                    all_user_ids.append(user_from_all['id'])
                                tree2.metadata = []
                                for user_id_for_tree in all_user_ids:
                                    if user_id_for_tree in user_for_group_ids:
                                        tree2.metadata.append(user_id_for_tree)
                                        tree2.update(key=user_id_for_tree, icon=check[1])
                                    else:
                                        tree2.update(key=user_id_for_tree, icon=check[0])
                            else:
                                window['Apply2'].update(disabled=True)
                                window['Изменить группу'].update(disabled=True)
                                window['-BlockGroup-'].update(disabled=True)
                                window['-DelGroup-'].update(disabled=True)
                                window['-checkAllGroups-'].update(disabled=True)
                                window['-checkAllGroups-'].update(True)
                        if event == 'Изменить пользователя':
                            """
                            Новая модель с userType
                            """
                            additional_window = True
                            if not values['-users-']:
                                my_popup('Не выбран пользователь')
                            else:
                                users_from_db = get_users_from_db()
                                if filter_status:
                                    user_to_change = filtered_users_list_of_dict[values['-users-'][0]]
                                else:
                                    user_to_change = users_from_db[values['-users-'][0]]
                                window_modify_user = make_modify_user_window(user_to_change)
                                window_modify_user.Element('UserModifyName').SetFocus()
                                password_clear = False
                                while True:
                                    ev_modify_user, val_modify_user = window_modify_user.Read()
                                    print(ev_modify_user, val_modify_user)
                                    if ev_modify_user == sg.WIN_CLOSED or ev_modify_user == 'Exit':
                                        break
                                    if ev_modify_user == 'userModifyPassword':
                                        window_modify_user['showModifyPassword'].update(disabled=False)
                                        window_modify_user['showModifyPassword'].update(image_data=ICON_SHOW_BASE_64)
                                    if ev_modify_user == 'modifyUserDispatcher' or ev_modify_user == 'modifyUserAdm':
                                        window_modify_user['modifyUserIndMesEn'].update(True, disabled=False)
                                        window_modify_user['modifyUserAllowDelChats'].update(False, disabled=False)
                                        window_modify_user['modifyUserAllowPartialDrop'].update(False, disabled=False)
                                    if ev_modify_user == 'modifyUserGw':
                                        window_modify_user['modifyUserIndMesEn'].update(False, disabled=True)
                                        window_modify_user['modifyUserAllowDelChats'].update(False, disabled=True)
                                        window_modify_user['modifyUserAllowPartialDrop'].update(False, disabled=True)
                                    if ev_modify_user == 'modifyUserUser':
                                        window_modify_user['modifyUserIndMesEn'].update(True, disabled=False)
                                        window_modify_user['modifyUserAllowDelChats'].update(False, disabled=True)
                                        window_modify_user['modifyUserAllowPartialDrop'].update(False, disabled=True)
                                    if ev_modify_user == 'UserModifyPriority':
                                        if val_modify_user['UserModifyPriority'] == '':
                                            window_modify_user['UserModifyPriority'].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        elif len(val_modify_user['UserModifyPriority']) > 2:
                                            window_modify_user['UserModifyPriority'].update(
                                                val_modify_user['UserModifyPriority'][:2])
                                        elif val_modify_user['UserModifyPriority'].isdigit():
                                            window_modify_user['UserModifyPriority'].update(
                                                background_color=omega_theme['INPUT'])
                                            if 0 <= int(val_modify_user['UserModifyPriority'][:2]) <= 15:
                                                window_modify_user['UserModifyPriority'].update(
                                                    background_color=omega_theme['INPUT'],
                                                    text_color=omega_theme['TEXT'])
                                            else:
                                                window_modify_user['UserModifyPriority'].update(
                                                    background_color=button_color_2)
                                        else:
                                            window_modify_user['UserModifyPriority'].update(
                                                background_color=button_color_2)
                                    if ev_modify_user == 'showModifyPassword':
                                        if password_clear:
                                            window_modify_user['userModifyPassword'].update(password_char='*')
                                            window_modify_user['showModifyPassword'].update(
                                                image_data=ICON_SHOW_BASE_64)
                                            password_clear = False
                                        else:
                                            window_modify_user['userModifyPassword'].update(password_char='')
                                            window_modify_user['showModifyPassword'].update(
                                                image_data=ICON_HIDE_BASE_64)
                                            password_clear = True
                                    if ev_modify_user == 'modifyUserButton':
                                        if validate('modify_user'):
                                            modify_user_type = get_user_type('modify_user')
                                            modify_user_dict = {'id': user_to_change['id']}
                                            modify_name = False
                                            modify_password = False
                                            modify_is_en_ind = False
                                            modify_is_en_ind_mes = False
                                            modify_is_blocked = False
                                            modify_en_del_chats = False
                                            modify_en_partial_drop = False
                                            modify_priority = False
                                            modify_u_t = False
                                            modify_success = False
                                            if val_modify_user['UserModifyName'] != user_to_change['name']:
                                                modify_user_dict['displayName'] = val_modify_user['UserModifyName']
                                                modify_name = True
                                            if val_modify_user['UserModifyPriority'] != str(user_to_change['priority']):
                                                modify_user_dict['priority'] = val_modify_user['UserModifyPriority']
                                                modify_priority = True
                                            if val_modify_user['userModifyPassword']:
                                                modify_user_dict['password'] = val_modify_user['userModifyPassword']
                                                modify_password = True
                                            if val_modify_user['modifyUserIndCallEn'] != user_to_change['en_ind']:
                                                modify_is_en_ind = True
                                                res_modify_user_en_ind = change_role(role.allow_ind_call,
                                                                                     val_modify_user[
                                                                                         'modifyUserIndCallEn'],
                                                                                     user_to_change['id'])
                                                if res_modify_user_en_ind:
                                                    if res_modify_user_en_ind.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        if val_modify_user['modifyUserIndCallEn']:
                                                            logging.info(
                                                                f"'Пользователю {val_modify_user['UserModifyLogin']} "
                                                                f'разрешено совершать индивидуальные вызовы')
                                                        else:
                                                            logging.info(
                                                                f"Пользователю {val_modify_user['UserModifyLogin']} "
                                                                f'запрещено совершать индивидуальные вызовы')
                                                    else:
                                                        my_popup('Ошибка при изменении ролей')
                                                        if val_modify_user['modifyUserIndCallEn']:
                                                            logging.error(
                                                                f'Ошибка при разрешении индивидуальных вызовов - '
                                                                f'{res_modify_user_en_ind.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при запрещении индивидуальных вызовов - '
                                                                f'{res_modify_user_en_ind.status_code}')
                                            if val_modify_user['modifyUserIndMesEn'] != user_to_change['en_ind_mes']:
                                                modify_is_en_ind_mes = True
                                                res_modify_user_en_ind_mes = change_role(role.allow_ind_mes,
                                                                                         val_modify_user[
                                                                                             'modifyUserIndMesEn'],
                                                                                         user_to_change['id'])
                                                if res_modify_user_en_ind_mes:
                                                    if res_modify_user_en_ind_mes.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        if val_modify_user['modifyUserIndMesEn']:
                                                            logging.info(
                                                                f"Пользователю {val_modify_user['UserModifyLogin']} "
                                                                f'разрешено отправлять индивидуальные сообщения')
                                                        else:
                                                            logging.info(
                                                                f"Пользователю {val_modify_user['UserModifyLogin']} "
                                                                f'запрещено отправлять индивидуальные сообщения')
                                                    else:
                                                        my_popup('Ошибка при изменении ролей')
                                                        if val_modify_user['modifyUserIndMesEn']:
                                                            logging.error(
                                                                f'Ошибка при разрешении отправления индивидуальных сообщений - '
                                                                f'{res_modify_user_en_ind_mes.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при запрещении отправления индивидуальных сообщений - '
                                                                f'{res_modify_user_en_ind_mes.status_code}')
                                            if (val_modify_user['modifyUserAllowDelChats'] !=
                                                    user_to_change['en_del_chats']):
                                                modify_en_del_chats = True
                                                res_modify_user_en_del_chats = change_role(role.allow_delete_chats,
                                                                                           val_modify_user[
                                                                                               'modifyUserAllowDelChats'],
                                                                                           user_to_change['id'])
                                                if res_modify_user_en_del_chats:
                                                    if res_modify_user_en_del_chats.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        if val_modify_user['modifyUserAllowDelChats']:
                                                            logging.info(f"Пользователю "
                                                                         f"{val_modify_user['UserModifyLogin']}"
                                                                         f' разрешено удалять чаты групп')
                                                        else:
                                                            logging.info(f"Пользователю "
                                                                         f"{val_modify_user['UserModifyLogin']}"
                                                                         f' запрещено удалять чаты групп')
                                                    else:
                                                        my_popup('Ошибка при изменении ролей')
                                                        if val_modify_user['modifyUserAllowDelChats']:
                                                            logging.error(
                                                                f'Ошибка при разрешении удаления чатов групп - '
                                                                f'{res_modify_user_en_del_chats.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при запрещении удаления чатов групп - '
                                                                f'{res_modify_user_en_del_chats.status_code}')
                                            if (val_modify_user['modifyUserAllowPartialDrop'] !=
                                                    user_to_change['en_partial_drop']):
                                                modify_en_partial_drop = True
                                                res_modify_user_en_partial_drop = change_role(role.allow_partial_drop,
                                                                                              val_modify_user[
                                                                                                  'modifyUserAllowPartialDrop'],
                                                                                              user_to_change['id'])
                                                if res_modify_user_en_partial_drop:
                                                    if res_modify_user_en_partial_drop.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        if val_modify_user['modifyUserAllowPartialDrop']:
                                                            logging.info(f"Пользователю "
                                                                         f"{val_modify_user['UserModifyLogin']}"
                                                                         f' разрешено удалять данные БД')
                                                        else:
                                                            logging.info(f"Пользователю "
                                                                         f"{val_modify_user['UserModifyLogin']}"
                                                                         f' запрещено удалять данные БД')
                                                    else:
                                                        my_popup('Ошибка при изменении ролей')
                                                        if val_modify_user['modifyUserAllowDelChats']:
                                                            logging.error(
                                                                f'Ошибка при разрешении удаления данных БД - '
                                                                f'{res_modify_user_en_partial_drop.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при запрещении удаления данных БД - '
                                                                f'{res_modify_user_en_partial_drop.status_code}')
                                            if val_modify_user['modifyUserBlock'] != user_to_change['is_blocked']:
                                                modify_is_blocked = True
                                                res_block = block_user(val_modify_user['modifyUserBlock'],
                                                                       user_to_change['id'])
                                                if res_block:
                                                    if res_block.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        if val_modify_user['modifyUserBlock']:
                                                            logging.info(f"Пользователь "
                                                                         f"{val_modify_user['UserModifyLogin']}"
                                                                         f' заблокирован')
                                                        else:
                                                            logging.info(f"Пользователь "
                                                                         f"{val_modify_user['UserModifyLogin']}"
                                                                         f' разблокирован')
                                                    else:
                                                        my_popup('Ошибка при блокировании/разблокировании пользователя')
                                                        if val_modify_user['modifyUserBlock']:
                                                            logging.error(
                                                                f'Ошибка при блокировании пользователя - '
                                                                f'{res_block.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при разблокировании пользователя - '
                                                                f'{res_block.status_code}')
                                            if get_user_type(user_to_change) != modify_user_type:
                                                modify_u_t = True
                                                modify_user_type_dict = {'userType': modify_user_type,
                                                                         'userId': user_to_change['id']}
                                                try:
                                                    # noinspection PyUnboundLocalVariable
                                                    res_modify_user_type = requests.post(BASE_URL + 'changeUserType',
                                                                                         json=modify_user_type_dict,
                                                                                         headers=HEADER_dict)
                                                    if res_modify_user_type.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        logging.info(
                                                            f"Пользователю {val_modify_user['UserModifyLogin']} "
                                                            f'изменили тип на {list(user_type.keys())[list(user_type.values()).index(modify_user_type)]}')
                                                    else:
                                                        my_popup('Ошибка при изменении типа пользователя')
                                                        logging.error(f'Ошибка изменения типа '
                                                                      f'пользователя - '
                                                                      f'{res_modify_user_type.status_code}')
                                                except Exception as e:
                                                    print(f'Не удалось поменять тип абонента - {e}')
                                                    logging.error("Не удалось поменять тип абонента")
                                            if modify_name or modify_password or modify_priority:
                                                try:
                                                    res_modify_user = requests.post(BASE_URL + 'updateUser',
                                                                                    json=modify_user_dict,
                                                                                    headers=HEADER_dict)
                                                    if res_modify_user.status_code == 200:
                                                        current_db += 1
                                                        modify_success = True
                                                        if modify_name:
                                                            logging.info(
                                                                f"Пользователю {val_modify_user['UserModifyLogin']} изменили имя")
                                                        if modify_password:
                                                            logging.info(
                                                                f"Пользователю {val_modify_user['UserModifyLogin']} "
                                                                f'изменили пароль')
                                                        if modify_priority:
                                                            logging.info(
                                                                f"Пользователю {val_modify_user['UserModifyLogin']} "
                                                                f'изменили приоритет')
                                                    else:
                                                        logging.error(f'Ошибка изменения пользователя - '
                                                                      f'{res_modify_user.status_code}')
                                                        window_modify_user.close()
                                                        my_popup(f'Ошибка: {res_modify_user.text}')
                                                    if val_modify_user['UserModifyLogin'] == 'admin':
                                                        new_hash_pwd = hashlib.pbkdf2_hmac('sha256', bytes(
                                                            str(val_modify_user["userModifyPassword"]).encode('ASCII',
                                                                                                              'ignore')),
                                                                                           bytes(str(SALT).encode(
                                                                                               'ASCII')),
                                                                                           10000).hex()
                                                        print(f'{new_hash_pwd}')
                                                        try:
                                                            if ip != '127.0.0.1':
                                                                ssh, remotepath = get_ssh_connection()
                                                                change_password_command = 'echo ' + new_hash_pwd + ' > $HOME/Omega/.admPWD_b'
                                                                stdin, stdout, stderr = ssh.exec_command(
                                                                    change_password_command)
                                                                stdout = stdout.readlines()
                                                                ssh.close()
                                                                output = ''
                                                                for line in stdout:
                                                                    output = output + line
                                                                print(output)
                                                            else:
                                                                with open("/home/omega/Omega/.admPWD_b",
                                                                          mode='w') as f_ch_pwd:
                                                                    f_ch_pwd.write(new_hash_pwd)
                                                                    print("файл записан")
                                                        except Exception as e:
                                                            print(f'Не удалось подключиться по ssh - {e}')
                                                            logging.error(f'Не удалось подключиться по ssh - {e}')
                                                except Exception as e:
                                                    print(f'Не удалось обновить данные абонента - {e}')
                                                    logging.error("Не удалось обновить данные абонента")

                                            if modify_name or modify_password \
                                                    or modify_is_en_ind \
                                                    or modify_is_en_ind_mes \
                                                    or modify_en_del_chats \
                                                    or modify_en_partial_drop \
                                                    or modify_is_blocked \
                                                    or modify_priority \
                                                    or modify_u_t:
                                                window_modify_user.close()
                                                if modify_success:
                                                    update_users()
                                                    my_popup("Пользователь изменён!")
                                            else:
                                                my_popup("Нет никаких изменений!")
                                    else:
                                        window_modify_user['modifyUserButton'].update(disabled=False)
                                        window_modify_user['modifyUserButton'].update(button_color=button_color_2)
                            additional_window = False
                        if event == 'Изменить группу':
                            """обновляем group_from_db в конце"""
                            additional_window = True
                            modify_group_success = False
                            if not values['-groups2-']:
                                my_popup('Не выбрана группа')
                            else:
                                groups_from_db = get_groups_from_db()
                                if filter_status_group:
                                    group_to_change = filtered_groups_list_of_dict[values['-groups2-'][0]]
                                else:
                                    group_to_change = groups_from_db[values['-groups2-'][0]]
                                window_modify_group = make_modify_group_window(group_to_change)
                                window_modify_group.Element('GroupModifyName').SetFocus()
                                while True:
                                    ev_modify_group, val_modify_group = window_modify_group.Read()
                                    if ev_modify_group == sg.WIN_CLOSED or ev_modify_group == 'Exit':
                                        break
                                    elif ev_modify_group == 'modifyGroupDelChat':
                                        window_confirm = make_confirm_window('Вы уверены, что хотите очистить чат?')
                                        while True:
                                            ev_confirm, val_confirm = window_confirm.Read()
                                            if ev_confirm == 'okExit':
                                                modify_group_del_chat_dict = {'GroupId': group_to_change['id']}
                                                try:
                                                    res_modify_group_del_chat = requests.post(
                                                        BASE_URL + 'clearGroupMessages',
                                                        json=modify_group_del_chat_dict,
                                                        headers=HEADER_dict)
                                                    if res_modify_group_del_chat.status_code == 200:
                                                        current_db += 1
                                                        modify_group_success = True
                                                        logging.info(f"Группу {group_to_change['name']} почистили")
                                                        my_popup("Чат группы очищен")
                                                        window_confirm.close()
                                                    else:
                                                        logging.error(f'ошибка очищения группы - '
                                                                      f'{res_modify_group_del_chat.status_code}')
                                                        my_popup("Ошибка при очистке групп!")
                                                except Exception as e:
                                                    print(f'Не удалось очистить чат - {e}')
                                                    logging.error("Не удалось очистить чат")
                                                window_confirm.close()
                                            if ev_confirm == sg.WIN_CLOSED or ev_confirm == 'Exit':
                                                break
                                            if ev_confirm == 'noExit':
                                                window_confirm.close()
                                                break
                                    elif ev_modify_group == 'modifyGroupButton':
                                        if validate('modify_group'):
                                            modify_group_name = val_modify_group['GroupModifyName']
                                            modify_group_desc = val_modify_group['GroupModifyDesc']
                                            modify_group_emergency = int(val_modify_group['GroupModifyEmergency'])
                                            modify_group_blocked = int(val_modify_group['GroupModifyBlocked'])
                                            modify_group_dict = {}
                                            modify_group = False
                                            modify_group_is_blocked = False
                                            modify_group_dict['id'] = group_to_change['id']
                                            if modify_group_name != group_to_change['name']:
                                                modify_group_dict['name'] = modify_group_name
                                                modify_group = True
                                            if modify_group_desc != group_to_change['desc']:
                                                modify_group_dict['description'] = modify_group_desc
                                                modify_group = True
                                            if modify_group_emergency != group_to_change['is_emergency']:
                                                modify_group_dict['groupType'] = modify_group_emergency
                                                modify_group = True
                                            else:
                                                modify_group_dict['groupType'] = group_to_change['is_emergency']
                                            if modify_group:
                                                try:
                                                    res_modify_group = requests.post(BASE_URL + 'updateGroup',
                                                                                     json=modify_group_dict,
                                                                                     headers=HEADER_dict)
                                                    if res_modify_group.status_code == 200:
                                                        current_db += 1
                                                        modify_group_success = True
                                                        logging.info(f'Группу {modify_group_name} изменили')
                                                    else:
                                                        my_popup('Ошибка при изменении группы')
                                                        logging.error(f'ошибка изменения группы - '
                                                                      f'{res_modify_group.status_code}')
                                                except Exception as e:
                                                    print(f'Не удалось обновить данные группы - {e}')
                                                    logging.error("Не удалось обновить данные группы")
                                            if modify_group_blocked != group_to_change['is_disabled']:
                                                modify_group_is_blocked = True
                                                if modify_group_blocked:
                                                    try:
                                                        res_modify_group_is_disabled = requests.post(
                                                            BASE_URL + 'disableGroup',
                                                            json=modify_group_dict,
                                                            headers=HEADER_dict)
                                                        if res_modify_group_is_disabled.status_code == 200:
                                                            current_db += 1
                                                            modify_group_success = True
                                                            logging.info(f'Группа {modify_group_name} заблокирована')
                                                        elif res_modify_group_is_disabled.status_code == 400:
                                                            my_popup('Группа уже заблокирована')
                                                            logging.info(
                                                                f'Группа {modify_group_name} уже была заблокирована')
                                                        else:
                                                            my_popup(f'Ошибка: {res_modify_group_is_disabled.text}')
                                                            logging.info(
                                                                f'Группа {modify_group_name} не заблокирована, '
                                                                f'ошибка - {res_modify_group_is_disabled.status_code}')
                                                    except Exception as e:
                                                        print(f'Не удалось заблокировать группу - {e}')
                                                        logging.error("Не удалось заблокировать группу")
                                                else:
                                                    try:
                                                        res_modify_group_is_disabled = requests.post(
                                                            BASE_URL + 'enableGroup',
                                                            json=modify_group_dict,
                                                            headers=HEADER_dict)
                                                        if res_modify_group_is_disabled.status_code == 200:
                                                            current_db += 1
                                                            modify_group_success = True
                                                            logging.info(f'Группа {modify_group_name} разблокирована')
                                                        elif res_modify_group_is_disabled.status_code == 400:
                                                            my_popup('Группа уже разблокирована')
                                                            logging.info(
                                                                f'Группа {modify_group_name} уже была разблокирована')
                                                        else:
                                                            my_popup(f'Ошибка: {res_modify_group_is_disabled.text}')
                                                            logging.info(
                                                                f'Группа {modify_group_name} не разблокирована, '
                                                                f'ошибка - {res_modify_group_is_disabled.status_code}')
                                                    except Exception as e:
                                                        print(f'Не удалось разблокировать абонента - {e}')
                                                        logging.error("Не удалось разблокироватьбонента")
                                            if modify_group or modify_group_is_blocked:
                                                window_modify_group.close()
                                                if modify_group_success:
                                                    update_groups()
                                                    my_popup("Группа изменена!")
                                            else:
                                                my_popup("Нет изменений")
                                    else:
                                        window_modify_group['modifyGroupButton'].update(disabled=False)
                                        window_modify_group['modifyGroupButton'].update(button_color=button_color_2)
                            additional_window = False
                        if event == 'Очистить чат':
                            additional_window = True
                            if not values['-groups2-']:
                                my_popup('Не выбрана группа')
                            else:
                                window_confirm = make_confirm_window('Вы уверены, что хотите очистить чат?')
                                while True:
                                    ev_confirm, val_confirm = window_confirm.Read()
                                    if ev_confirm == 'okExit':
                                        group_to_change = groups_from_db[values['-groups2-'][0]]
                                        modify_group_del_chat_dict = {'GroupId': group_to_change['id']}
                                        try:
                                            res_modify_group_del_chat = requests.post(BASE_URL + 'clearGroupMessages',
                                                                                      json=modify_group_del_chat_dict,
                                                                                      headers=HEADER_dict)
                                            if res_modify_group_del_chat.status_code == 200:
                                                current_db += 1
                                                logging.info(f"Группу {group_to_change['name']} почистили")
                                                my_popup("Чат группы очищен")
                                            else:
                                                logging.error(f'ошибка очищения группы - '
                                                              f'{res_modify_group_del_chat.status_code}')
                                                my_popup("Ошибка при очистке групп!")
                                        except Exception as e:
                                            print(f'Не удалось очистить чат - {e}')
                                            logging.error("Не удалось очистить чат")
                                        window_confirm.close()
                                    if ev_confirm == sg.WIN_CLOSED or ev_confirm == 'Exit':
                                        break
                                    if ev_confirm == 'noExit':
                                        window_confirm.close()
                                        break
                            additional_window = False
                        if event == '-TREE-' and values['-TREE-'] != []:
                            group_id = values['-TREE-'][0]
                            if group_id in tree.metadata:
                                tree.metadata.remove(group_id)
                                tree.update(key=group_id, icon=check[0])
                            else:
                                tree.metadata.append(group_id)
                                tree.update(key=group_id, icon=check[1])
                            window['Apply'].update(disabled=False)
                            window['Apply'].SetFocus()
                        if event == '-TREE2-' and values['-TREE2-'] != []:
                            user_id = values['-TREE2-'][0]
                            if user_id in tree2.metadata:
                                tree2.metadata.remove(user_id)
                                tree2.update(key=user_id, icon=check[0])
                            else:
                                tree2.metadata.append(user_id)
                                tree2.update(key=user_id, icon=check[1])
                            window['Apply2'].update(disabled=False)
                            window['Apply2'].SetFocus()
                        if event == "Apply":
                            additional_window = True
                            if not values['-users-']:
                                print(f"Не выбран пользователь")
                                my_popup('Не выбран пользователь')
                            else:
                                add_group = False
                                del_group = False
                                if filter_status:
                                    chosen_login = filtered_users_list_of_dict[values['-users-'][0]]
                                else:
                                    chosen_login = users_from_db[values['-users-'][0]]
                                current_groups = get_groups_for_user_from_db(chosen_login['id'])
                                current_groups_ids = []
                                for cur_gr in current_groups:
                                    current_groups_ids.append(cur_gr['id'])
                                add_del_dict = {'UserIds': [chosen_login['id']], 'addGroupIds': [],
                                                'removeGroupIds': []}
                                for gr_id in tree.metadata:
                                    if gr_id in current_groups_ids:
                                        print(f"Пользователь уже в группе {get_group_name_by_id_from_db(gr_id)}")
                                    else:
                                        print(f"Пользователя нужно добавить в группу "
                                              f"{get_group_name_by_id_from_db(gr_id)}")
                                        add_del_dict['addGroupIds'] += [gr_id]
                                        add_group = True
                                for gr_id in current_groups_ids:
                                    if gr_id in tree.metadata:
                                        print(f'Пользователь уже в группе {get_group_name_by_id_from_db(gr_id)}')
                                    else:
                                        print(f"У пользователя нужно удалить группу "
                                              f"{get_group_name_by_id_from_db(gr_id)}")
                                        add_del_dict['removeGroupIds'] += [gr_id]
                                        del_group = True
                                if add_group or del_group:
                                    print(add_del_dict)
                                    try:
                                        res_add_del = requests.post(BASE_URL + 'changeUserGroups', json=add_del_dict,
                                                                    headers=HEADER_dict)
                                        if res_add_del.status_code == 200:
                                            current_db += 1
                                            logging.info(f'Добавление и удаление групп выполнено для '
                                                         f'{chosen_login["name"]}')
                                            add_del_groups_to_user_after_apply(add_del_dict)
                                            add_del_text = 'Изменение групп для ' + chosen_login['name'] + ' выполнено'
                                            my_popup(add_del_text)
                                            window['Apply'].update(disabled=True)
                                        else:
                                            logging.error(f'Добавление и удаление групп НЕ выполнено '
                                                          f'для {chosen_login["name"]} - {res_add_del.status_code}')
                                            my_popup("Добавление не выполнено")
                                    except Exception as e:
                                        print(f"Запрос вызвал ошибку! {e}")
                                        logging.warning(f"Запрос вызвал ошибку!")
                                else:
                                    my_popup('Нет изменений')
                                    window["Apply"].update(disabled=True)
                            additional_window = False
                        if event == "Apply2":
                            additional_window = True
                            if not values['-groups2-']:
                                my_popup('Не выбрана группа')
                            else:
                                add_user = False
                                del_user = False
                                if filter_status_group:
                                    chosen_group = filtered_groups_list_of_dict[values['-groups2-'][0]]
                                else:
                                    chosen_group = groups_from_db[values['-groups2-'][0]]
                                current_users = get_users_for_group_from_db(chosen_group['id'])
                                current_users_ids = []
                                for cur_us in current_users:
                                    current_users_ids.append(cur_us['id'])
                                add_del_dict = {'GroupIds': [chosen_group['id']], 'addUserIds': [],
                                                'removeUserIds': []}
                                for us_id in tree2.metadata:
                                    if us_id in current_users_ids:
                                        print(f"В группе {chosen_group['name']} уже есть "
                                              f"{get_user_name_by_id_from_db(us_id)}")
                                    else:
                                        print(f"Пользователя {get_user_name_by_id_from_db(us_id)} "
                                              f"нужно добавить в группу {chosen_group['name']}")
                                        add_del_dict['addUserIds'] += [us_id]
                                        add_user = True
                                for us_id in current_users_ids:
                                    if us_id in tree2.metadata:
                                        print(f'Пользователь {get_user_name_by_id_from_db(us_id)} уже в группе '
                                              f'{chosen_group["name"]}')
                                    else:
                                        print(f"В группе {chosen_group['name']} нужно удалить пользователя "
                                              f"{get_user_name_by_id_from_db(us_id)}")
                                        add_del_dict['removeUserIds'] += [us_id]
                                        del_user = True
                                if add_user or del_user:
                                    try:
                                        res_add_del = requests.post(BASE_URL + 'changeGroupUsers', json=add_del_dict,
                                                                    headers=HEADER_dict)
                                        if res_add_del.status_code == 200:
                                            current_db += 1
                                            logging.info(
                                                f'Изменение пользователей выполнено для {chosen_group["name"]}')
                                            add_del_users_to_group_after_apply(add_del_dict)
                                            add_del_text = 'Изменение пользователей для ' + \
                                                           chosen_group['name'] + ' выполнено'
                                            my_popup(add_del_text)
                                            window['Apply2'].update(disabled=True)
                                        else:
                                            logging.error(
                                                f'Изменение пользователей НЕ выполнено для {chosen_group["name"]} - '
                                                f'{res_add_del.status_code}')
                                            my_popup("Добавление не выполнено")
                                    except Exception as e:
                                        print(f'Не удалось обновить абонентуов группе - {e}')
                                        logging.error("Не удалось обновить абонентов группе ")
                                else:
                                    my_popup('Нет изменений')
                                    window["Apply2"].update(disabled=True)
                            additional_window = False
                        if event == 'О программе':
                            additional_window = True
                            my_popup('Разработано ' + COMPANY + '\n'
                                                                '\n'
                                                                '2021-2023')
                            # noinspection PyRedeclaration
                            additional_window = False
                        if event == 'Установить лицензию...':
                            additional_window = True
                            new_lic_installed = False
                            f_new = False
                            lic_from_server = get_current_lic()
                            window_add_lic = make_add_lic()
                            if lic_from_server:
                                LICS = parse_cur_lic(lic_from_server)
                                window_add_lic['-lic-'].update(LICS)
                            while True:
                                ev_add_lic, val_add_lic = window_add_lic.Read()
                                print(f'{ev_add_lic}, {val_add_lic}')
                                if ev_add_lic == sg.WIN_CLOSED or ev_add_lic == 'Выйти':
                                    window_add_lic.close()
                                    break
                                if ev_add_lic == '-FILENAME-':
                                    machine_id = get_id('Linux')  # TODO
                                    check_remote_command = "$HOME/Omega/Licensing/ValidateCli validate --license $HOME/Omega/new.lic" + \
                                                           ' --public $HOME/Omega/keys/pub.pem --machine-id ' + \
                                                           machine_id
                                    print(check_remote_command)
                                    output = ''
                                    if ip != '127.0.0.1':
                                        try:
                                            ssh, remotepath = get_ssh_connection()
                                            ftp_client = ssh.open_sftp()
                                            ftp_client.put(val_add_lic['-FILENAME-'], (remotepath + '/new.lic'))
                                            ftp_client.close()
                                            stdin, stdout, stderr = ssh.exec_command(check_remote_command)
                                            stdout = stdout.readlines()
                                            ssh.close()
                                            for line in stdout:
                                                output = output + line
                                            print(output)
                                        except Exception as e:
                                            print(f'{e}')
                                            logging.error('Не удалось проверить лицензию!')
                                            my_popup("Не удалось проверить лицензию!")
                                    else:
                                        if check_os() != 'Windows':
                                            start_command = "$HOME/Omega/Licensing/ValidateCli validate --license " + \
                                                            val_add_lic['-FILENAME-'] + \
                                                            ' --public $HOME/Omega/keys/pub.pem'
                                            print(start_command)
                                            process = subprocess.Popen(start_command, shell=True,
                                                                       stdout=subprocess.PIPE,
                                                                       stderr=subprocess.PIPE)
                                            try:
                                                output = process.stdout.read().decode('utf-8').rstrip('\n')
                                            except Exception as e:
                                                my_popup('Неверный файл лицензии!')
                                                print(f'{e}')
                                            print(type(output))
                                            print(output)
                                    if output:
                                        if output.find('USAGE') == -1 and output.rstrip('\n') != 'Validation Failed':
                                            index = output.find('{')
                                            lics: dict = json.loads(output[index:])
                                            LICS = [['Количество абонентов', lics['UserCount'], lics['ExpirationDate']],
                                                    ['Количество диспетчеров', lics['DispatcherCount'], lics[
                                                        'ExpirationDate']]]
                                            print(lics['ExpirationDate'])
                                            for feature in lics['Features']:
                                                feature_name = "Удалённое прослушивание" if feature == "AmbientListening" \
                                                    else "Геопозиционирование" if feature == "GeoData" \
                                                    else "Динамические группы" if feature == "DGNA" \
                                                    else "Удалённое управление терминалами" if feature == "OTAP" \
                                                    else "Длительное прослушивание" if feature == "LongAmbientListening" \
                                                    else "Контроль пересылки" if feature == "MFC" else "?"
                                                print(feature_name, '+', lics['ExpirationDate'])
                                                LICS.append([feature_name, '+', lics['ExpirationDate']])
                                            window_add_lic['-lic-'].update(LICS)
                                            window_add_lic['Загрузить'].update(disabled=False,
                                                                               button_color=button_color_2)
                                        else:
                                            my_popup("Проблема с лицензией")
                                            logging.error(f"Проблема с лицензией")
                                    else:
                                        my_popup("Проблема с лицензией")
                                        logging.error(f"Проблема с лицензией")
                                if ev_add_lic == 'Получить id сервера':
                                    id_serv = get_id(check_os())
                                    if id_serv:
                                        window_get_id = make_get_id(id_serv)
                                        while True:
                                            ev_get_id, val_get_id = window_get_id.Read()
                                            print(f'{ev_get_id}, {val_get_id}')
                                            if ev_get_id == sg.WIN_CLOSED or ev_get_id == 'OK':
                                                window_get_id.close()
                                                break
                                            if ev_get_id == '-Скопировать-':
                                                sg.clipboard_set(val_get_id['-id-'])
                                if ev_add_lic == 'show_cur_lic':
                                    if f_new:
                                        window_add_lic['-lic-'].update(LICS)
                                        window_add_lic['show_cur_lic'].update('Текущая лицензия')
                                        f_new = False
                                    else:
                                        lic_from_server = get_current_lic()
                                        if lic_from_server:
                                            cur_lics = parse_cur_lic(lic_from_server)
                                            window_add_lic['-lic-'].update(cur_lics)
                                        window_add_lic['Загрузить'].update(disabled=True)
                                        if new_lic_installed:
                                            window_add_lic['show_cur_lic'].update('Новая лицензия')
                                            f_new = True
                                if ev_add_lic == 'Загрузить':
                                    machine_id = get_id('Linux')  # TODO
                                    start_command = "$HOME/Omega/Licensing/ValidateCli validate --license $HOME/Omega/generated.lic" + \
                                                    ' --public $HOME/Omega/keys/pub.pem --machine-id ' + \
                                                    machine_id
                                    if ip != '127.0.0.1':
                                        output = ''
                                        try:
                                            ssh, remotepath = get_ssh_connection()
                                            ftp_client = ssh.open_sftp()
                                            ftp_client.put(val_add_lic['-FILENAME-'], (remotepath + '/generated.lic'))
                                            ftp_client.close()
                                            stdin, stdout, stderr = ssh.exec_command(start_command)
                                            stdout = stdout.readlines()
                                            for line in stdout:
                                                output = output + line
                                            print(output)
                                        except Exception as e:
                                            print(f'{e}')
                                            logging.error('Не удалось установить лицензию!')
                                            my_popup("Не удалось установить лицензию!")
                                    else:
                                        output = False
                                        if check_os() != 'Windows':
                                            start_command = "$HOME/Omega/Licensing/ValidateCli validate --license " + \
                                                            val_add_lic['-FILENAME-'] + \
                                                            ' --public $HOME/Omega/keys/pub.pem'
                                            process = subprocess.Popen(start_command, shell=True,
                                                                       stdout=subprocess.PIPE,
                                                                       stderr=subprocess.PIPE)
                                            try:
                                                output = process.stdout.read().decode('utf-8').rstrip('\n')
                                            except Exception as e:
                                                my_popup('Неверный файл лицензии!')
                                                print(f'{e}')
                                            copy_command = 'cp ' + val_add_lic[
                                                '-FILENAME-'] + " $HOME/Omega/generated.lic"
                                            print(copy_command)
                                            process = subprocess.Popen(copy_command, shell=True,
                                                                       stdout=subprocess.PIPE,
                                                                       stderr=subprocess.PIPE)
                                            try:
                                                output_copy = process.stdout.read().decode('utf-8').rstrip('\n')
                                                print(f'Копирование файла лицензии - {output_copy}')
                                            except Exception as e:
                                                my_popup('Файл лицензии не скопирован!')
                                                print(f'{e}')
                                    if output.find('USAGE') == -1 and output.rstrip('\n') != 'Validation Failed':
                                        index = output.find('{')
                                        lics: dict = json.loads(output[index:])
                                        LICS = [['Количество абонентов', lics['UserCount'], lics['ExpirationDate']],
                                                ['Количество диспетчеров', lics['DispatcherCount'], lics[
                                                    'ExpirationDate']]]
                                        print(lics['ExpirationDate'])
                                        for feature in lics['Features']:
                                            feature_name = "Удалённое прослушивание" if feature == "AmbientListening" \
                                                else "Геопозиционирование" if feature == "GeoData" \
                                                else "Динамические группы" if feature == "DGNA" \
                                                else "Удалённое управление терминалами" if feature == "OTAP" \
                                                else "Длительное прослушивание" if feature == "LongAmbientListening" \
                                                else "Контроль пересылки" if feature == "MFC" else "?"
                                            print(feature_name, '+', lics['ExpirationDate'])
                                            LICS.append([feature_name, '+', lics['ExpirationDate']])
                                        window_add_lic['-lic-'].update(LICS)
                                        if ip != '127.0.0.1':
                                            change_state_command = 'echo -n 5 > /home/omega/Omega/.licenseState'
                                            # noinspection PyUnboundLocalVariable
                                            stdin, stdout, stderr = ssh.exec_command(change_state_command)
                                            stdout = stdout.readlines()
                                            ssh.close()
                                            output = ''
                                            for line in stdout:
                                                output = output + line
                                            print(output)
                                        else:
                                            with open("/home/omega/Omega/.licenseState", mode='w') as f_lic_st:
                                                f_lic_st.write("5")
                                                print("файл записан")
                                        logging.warning(f"Новая лицензия загружена! Необходимо перезагрузить сервер!")
                                        my_popup("Новая лицензия загружена! Необходимо перезагрузить сервер!")
                                        window_add_lic['restart'].update(disabled=False, button_color=button_color_2)
                                        new_lic_installed = True
                                        window_add_lic['show_cur_lic'].update(disabled=False)
                                        window_add_lic['Загрузить'].update(disabled=True, button_color=button_color)
                                    else:
                                        my_popup("Проблема с загрузкой лицензии")
                                        logging.error(f"Проблема с загрузкой лицензии")
                                        ssh.close()
                                if ev_add_lic == 'restart':
                                    print('Перезагружаем сервер')
                                    try:
                                        window_add_lic.close()
                                        set_buttons_disabled()
                                        window.Element('-Start-').SetFocus()
                                        window['-users-'].update([[]])
                                        window['-groups2-'].update([[]])
                                        clear_treedata = sg.TreeData()
                                        window['-TREE-'].update(clear_treedata)
                                        window['-TREE2-'].update(clear_treedata)
                                        window.refresh()
                                        ssh, remotepath = get_ssh_connection()
                                        start_command = 'sudo systemctl restart omega'
                                        if ip != '127.0.0.1':
                                            stdin, stdout, stderr = ssh.exec_command(start_command)
                                            stdout = stdout.readlines()
                                            ssh.close()
                                            output = ''
                                            for line in stdout:
                                                output = output + line
                                            print(output)
                                        else:
                                            process = subprocess.Popen(start_command, shell=True,
                                                                       stdout=subprocess.PIPE,
                                                                       stderr=subprocess.PIPE)
                                        for i in range(3):
                                            sleep(2)
                                            res_ping = ''
                                            try:
                                                res_ping = requests.get(BASE_URL_PING, timeout=1)
                                            except Exception as e:
                                                print(f"Сервер не отвечает, {e}")
                                            if res_ping == '':
                                                print('Нет ответа сервера')
                                                if i == 2:
                                                    logging.critical(f'Сервер не отвечает - {res_ping}')
                                                    my_popup("Сервер не отвечает")
                                            else:
                                                if res_ping.status_code == 200:
                                                    logging.info(f'Сервер запущен администратором')
                                                    print(f'{res_ping.text}')
                                                    dict_online_after_start = json.loads(res_ping.text)
                                                    update_text = (('Онлайн: обновление...' + ', БД: '
                                                                   + str(dict_online_after_start["databaseVersion"]))
                                                                   + (', Резервный' if
                                                                      dict_online_after_start["isReserved"] else
                                                                      ', Основной'))
                                                    update_text2 = update_free_space(dict_online_after_start)
                                                    server_status['online'] = dict_online_after_start[
                                                        "onlineUsersCount"]
                                                    server_status['db'] = dict_online_after_start["databaseVersion"]
                                                    window['-StatusBar-'].update(update_text,
                                                                                 background_color=(button_color_2 if
                                                                                                   dict_online_after_start[
                                                                                                       "isReserved"] else status_bar_color))
                                                    window['-StatusBar2-'].update(update_text2)
                                                    window['-Start-'].update(disabled=True)
                                                    window['-Stop-'].update(disabled=False)
                                                    TOKEN = get_token(BASE_URL_AUTH)
                                                    HEADER_dict = {"Authorization": "Bearer " + TOKEN}
                                                    if TOKEN:
                                                        server_status['run'] = True
                                                        print(server_status)
                                                        update_users_and_groups()
                                                        window['-Menu-'].update([
                                                            ['Сервер',
                                                             ['Установить лицензию...', 'Настройки', 'Очистка БД',
                                                              ['Частично', 'Полностью']]],
                                                            ['Помощь', 'О программе'], ])
                                                        update_text = ('Онлайн: ' + str(server_status["online"])
                                                                       + ', БД: ' + str(server_status["db"])
                                                                       + (', Резервный' if server_status["isReserved"]
                                                                          else ', Основной'))
                                                        update_text2 = update_free_space(server_status)
                                                        window['-StatusBar-'].update(update_text,
                                                                                     background_color=(button_color_2 if
                                                                                                       server_status[
                                                                                                           "isReserved"] else status_bar_color))
                                                        window['-StatusBar2-'].update(update_text2)
                                                        set_buttons_disabled(False)
                                                        server_status['run'] = True
                                                        update_free_space(dict_online_after_start)
                                                        window['online-users'].update(
                                                            get_online_users(dict_online_after_start['onlineUserIds']))
                                                        set_lic_status_bar()
                                                        my_popup('Сервер перезагружен')
                                                        break
                                                    else:
                                                        break_flag2 = True
                                                        break_flag = True
                                                        break
                                    except Exception as e:
                                        print(f'{e}')
                                        logging.error('Не удалось перезагрузить сервер')
                                        my_popup('Не удалось перезагрузить сервер')
                                if ev_add_lic == '-KEYNAME-':
                                    window_add_lic['install-key'].update(disabled=False)
                                if ev_add_lic == 'install-key':
                                    window_install_key = make_confirm_window(
                                        'Вы уверены, что хотите установить новый ключ сервера?')
                                    while True:
                                        ev_install_key, val_install_key = window_install_key.Read()
                                        if ev_install_key == sg.WIN_CLOSED or ev_install_key == 'Exit':
                                            break
                                        if ev_install_key == 'noExit':
                                            window_install_key.close()
                                            break
                                        if ev_install_key == 'okExit':
                                            try:
                                                ssh, remotepath = get_ssh_connection()
                                                backup_command = 'cp $HOME/Omega/keys/pub.pem $HOME/Omega/keys/pub.pem.bak'
                                                if ip != '127.0.0.1':
                                                    stdin, stdout, stderr = ssh.exec_command(backup_command)
                                                    stdout = stdout.readlines()
                                                    output = ''
                                                    for line in stdout:
                                                        output = output + line
                                                    print(output)
                                                    ftp_client = ssh.open_sftp()
                                                    ftp_client.put(val_add_lic['-KEYNAME-'],
                                                                   '/home/omega/Omega/keys/pub.pem')
                                                    ftp_client.close()
                                                    change_state_command = 'echo -n 5 > /home/omega/Omega/.licenseState'
                                                    stdin, stdout, stderr = ssh.exec_command(change_state_command)
                                                    stdout = stdout.readlines()
                                                    ssh.close()
                                                    output = ''
                                                    for line in stdout:
                                                        output = output + line
                                                    print(output)
                                                else:
                                                    if check_os() != 'Windows':
                                                        process = subprocess.Popen(backup_command, shell=True,
                                                                                   stdout=subprocess.PIPE,
                                                                                   stderr=subprocess.PIPE)
                                                        try:
                                                            output = process.stdout.read().decode('utf-8').rstrip('\n')
                                                        except Exception as e:
                                                            print(f'{e}')
                                                        copy_command = 'cp ' + val_add_lic[
                                                            '-KEYNAME-'] + " $HOME/Omega/keys/pub.pem"
                                                        print(copy_command)
                                                        process = subprocess.Popen(copy_command, shell=True,
                                                                                   stdout=subprocess.PIPE,
                                                                                   stderr=subprocess.PIPE)
                                                        try:
                                                            output_copy = process.stdout.read().decode('utf-8').rstrip(
                                                                '\n')
                                                            print(f'Копирование ключа сервера - {output_copy}')
                                                        except Exception as e:
                                                            my_popup('Файл ключа не скопирован!')
                                                            print(f'{e}')
                                                    with open("/home/omega/Omega/.licenseState", mode='w') as f_lic_st:
                                                        f_lic_st.write("5")
                                                        print("файл записан")  # TODO
                                                my_popup('Новый ключ загружен!\n'
                                                         'Теперь можно загрузить новую лицензию')
                                                window_install_key.close()
                                                break
                                            except Exception as e:
                                                print(f'{e}')
                                if ev_add_lic == 'restore-key':
                                    window_restore_key = make_confirm_window(
                                        'Вы уверены, что хотите установить ключ сервера'
                                        ' по умолчанию?')
                                    while True:
                                        ev_restore_key, val_restore_key = window_restore_key.Read()
                                        if ev_restore_key == sg.WIN_CLOSED or ev_restore_key == 'Exit':
                                            break
                                        if ev_restore_key == 'noExit':
                                            window_restore_key.close()
                                            break
                                        if ev_restore_key == 'okExit':
                                            try:
                                                restore_command = 'cp $HOME/Omega/keys/.pub.default $HOME/Omega/keys/pub.pem'
                                                if ip != '127.0.0.1':
                                                    ssh, remotepath = get_ssh_connection()
                                                    stdin, stdout, stderr = ssh.exec_command(restore_command)
                                                    stdout = stdout.readlines()
                                                    output = ''
                                                    for line in stdout:
                                                        output = output + line
                                                    print(output)
                                                    change_state_command = 'echo -n 5 > /home/omega/Omega/.licenseState'
                                                    stdin, stdout, stderr = ssh.exec_command(change_state_command)
                                                    stdout = stdout.readlines()
                                                    ssh.close()
                                                    output = ''
                                                    for line in stdout:
                                                        output = output + line
                                                    print(output)
                                                    ssh.close()
                                                else:
                                                    if check_os() != 'Windows':
                                                        process = subprocess.Popen(restore_command, shell=True,
                                                                                   stdout=subprocess.PIPE,
                                                                                   stderr=subprocess.PIPE)
                                                        try:
                                                            output_copy = process.stdout.read().decode('utf-8').rstrip(
                                                                '\n')
                                                            print(
                                                                f'Восстановление ключа сервера по умолчанию - {output_copy}')
                                                        except Exception as e:
                                                            my_popup('Файл ключа не восстановлен!')
                                                            print(f'{e}')
                                                    with open("/home/omega/Omega/.licenseState", mode='w') as f_lic_st:
                                                        f_lic_st.write("5")
                                                        print("файл записан")  # TODO
                                                my_popup('Ключ восстановлен!\n '
                                                         'Теперь можно загрузить новую лицензию')
                                                window_restore_key.close()
                                                break
                                            except Exception as e:
                                                print(f'{e}')
                            additional_window = False
                        if event == 'Настройки':
                            additional_window = True
                            window_settings = make_settings()
                            timeout = 0
                            while True:
                                ev_set, val_set = window_settings.Read(1000)
                                change_settings_by_post = False
                                print(f'{ev_set}, {val_set}')
                                if ev_set == sg.WIN_CLOSED or ev_set == '-Exit-set-':
                                    window_settings.close()
                                    break
                                elif ev_set == '-Индивидуальный-таймаут-' \
                                        or ev_set == '-Групповой-таймаут-' \
                                        or ev_set == '-таймаут-окончания-' \
                                        or ev_set == '-таймаут-тонового-сигнала-' \
                                        or ev_set == '-таймаут-прослушивания-' \
                                        or ev_set == '-пинг-таймаут-':
                                    if val_set[ev_set].isdigit():
                                        window_settings[ev_set].update(
                                            background_color=omega_theme['INPUT'])
                                        if 0 < int(val_set[ev_set]) <= MAX_CALL_TM:
                                            window_settings[ev_set].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        else:
                                            window_settings[ev_set].update(background_color=button_color_2)
                                    else:
                                        window_settings[ev_set].update(background_color=button_color_2)
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                    change_settings_by_post = True
                                elif ev_set == '-Макс-аудио-порт-' \
                                        or ev_set == '-Мин-аудио-порт-':
                                    if val_set[ev_set].isdigit():
                                        window_settings[ev_set].update(
                                            background_color=omega_theme['INPUT'])
                                        if 1024 < int(val_set[ev_set]) <= 65535:
                                            window_settings[ev_set].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        else:
                                            window_settings[ev_set].update(background_color=button_color_2)
                                    else:
                                        window_settings[ev_set].update(background_color=button_color_2)
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                    change_settings_by_post = True
                                elif ev_set == '-глубина-сервера-':
                                    if val_set[ev_set].isdigit():
                                        window_settings[ev_set].update(
                                            background_color=omega_theme['INPUT'])
                                        if 0 < int(val_set[ev_set]) <= MAX_DEPTH_LOG:
                                            window_settings[ev_set].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        else:
                                            window_settings[ev_set].update(background_color=button_color_2)
                                    else:
                                        window_settings[ev_set].update(background_color=button_color_2)
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                elif ev_set == '-порт-ssh-':
                                    if val_set[ev_set].isdigit():
                                        window_settings[ev_set].update(
                                            background_color=omega_theme['INPUT'])
                                        if 0 < int(val_set[ev_set]) <= MAX_AUDIO_PORT:
                                            window_settings[ev_set].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        else:
                                            window_settings[ev_set].update(background_color=button_color_2)
                                    else:
                                        window_settings[ev_set].update(background_color=button_color_2)
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                elif ev_set == '-пароль-ssh-':
                                    window_settings[ev_set].update(
                                        background_color=omega_theme['INPUT'])
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                elif ev_set == '-логин-ssh-':
                                    window_settings[ev_set].update(
                                        background_color=omega_theme['INPUT'])
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                elif ev_set == '-auto-del-':
                                    if val_set[ev_set].isdigit():
                                        window_settings[ev_set].update(
                                            background_color=omega_theme['INPUT'])
                                        if MIN_DEL_DAYS <= int(val_set[ev_set]) <= MAX_DEL_DAYS:
                                            window_settings[ev_set].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        else:
                                            window_settings[ev_set].update(background_color=button_color_2)
                                    else:
                                        window_settings[ev_set].update(background_color=button_color_2)
                                    counter = 0
                                    window_settings['-Progress-Bar-'].update_bar(counter)
                                    window_settings['-OK-set-'].update(disabled=False)
                                    window_settings['-OK-set-'].update(button_color=button_color_2)
                                elif ev_set == '-OK-set-':
                                    if validate('settings'):
                                        if change_settings_by_post:
                                            settings_dict = {'privateCallTimeout': val_set['-Индивидуальный-таймаут-'],
                                                             'groupCallTimeout': val_set['-Групповой-таймаут-'],
                                                             'finalizeCallTimeout': val_set['-таймаут-окончания-'],
                                                             'finalizeTonalTimeout': val_set[
                                                                 '-таймаут-тонового-сигнала-'],
                                                             'ambientCallDuration': val_set['-таймаут-прослушивания-'],
                                                             'autoCleanDays': val_set['-auto-del-'],
                                                             'udpPortsRange': val_set['-Мин-аудио-порт-'] + '-' +
                                                                              val_set[
                                                                                  '-Макс-аудио-порт-']}
                                            try:
                                                res_update_set = requests.post(BASE_URL_SETTINGS,
                                                                               json=settings_dict,
                                                                               headers=HEADER_dict)
                                                if res_update_set.status_code == 200:
                                                    current_db += 1
                                                    logging.info(
                                                        f"Настройки изменены: "
                                                        f"Инд. вызов - {settings_dict['privateCallTimeout']}, "
                                                        f"Гр. вызов - {settings_dict['groupCallTimeout']}, "
                                                        f"Таймаут окончания вызова - {settings_dict['finalizeCallTimeout']}, "
                                                        f"Тональный вызов - {settings_dict['finalizeTonalTimeout']}, "
                                                        f"Скрытое прослушивание - {settings_dict['ambientCallDuration']}, "
                                                        f"Аудио порты - {settings_dict['udpPortsRange']}. "
                                                    )
                                                else:
                                                    logging.error(
                                                        f'Ошибка при изменении настроек - {res_update_set.status_code}')
                                                    my_popup("Ошибка при изменении настроек")
                                            except Exception as e:
                                                print(f'Не удалось обновить настройки - {e}')
                                                logging.error("Не удалось обновить настройки")
                                        ssh_change = False
                                        local_change = False
                                        if val_set['-пинг-таймаут-'] != str(ping_timeout):
                                            ping_timeout = int(val_set['-пинг-таймаут-'])
                                            local_change = True
                                        if val_set['-глубина-сервера-'] != str(LOG_DEPTH):
                                            LOG_DEPTH = int(val_set['-глубина-сервера-'])
                                            local_change = True
                                        if val_set['-порт-ssh-'] != str(SSH_PORT) or \
                                                val_set['-логин-ssh-'] != SSH_LOGIN or \
                                                val_set['-пароль-ssh-'] != SSH_PWD:
                                            SSH_PORT_OLD = copy.deepcopy(SSH_PORT)
                                            SSH_LOGIN_OLD = copy.deepcopy(SSH_LOGIN)
                                            SSH_PORT = int(val_set['-порт-ssh-'])
                                            SSH_LOGIN = val_set['-логин-ssh-']
                                            SSH_PWD = val_set['-пароль-ssh-']
                                            ssh_change = True
                                        if ssh_change:
                                            try:
                                                ssh, remotepath = get_ssh_connection(val_set['-пароль-ssh-'])
                                                window_settings['-логин-ssh-'].update(SSH_LOGIN)
                                                window_settings['-порт-ssh-'].update(SSH_PORT)
                                                change_config_file('ssh')
                                            except Exception as e:
                                                print(f'{e}')
                                                # noinspection PyUnboundLocalVariable
                                                val_set['-логин-ssh-'] = SSH_LOGIN_OLD
                                                # noinspection PyUnboundLocalVariable
                                                val_set['-порт-ssh-'] = SSH_PORT_OLD
                                                SSH_LOGIN = copy.deepcopy(SSH_LOGIN_OLD)
                                                SSH_PORT = copy.deepcopy(SSH_PORT_OLD)
                                                window_settings['-логин-ssh-'].update(SSH_LOGIN_OLD)
                                                window_settings['-порт-ssh-'].update(SSH_PORT_OLD)
                                                window_settings['-пароль-ssh-'].update('')
                                                if not local_change and not change_settings_by_post:
                                                    window_settings['-OK-set-'].update(disabled=True)
                                                    window_settings['-OK-set-'].update(button_color=button_color)
                                                    continue
                                        disable_input(window_settings)
                                        counter = 0
                                        while counter < 11:
                                            counter += 3
                                            sleep(0.5)
                                            window_settings['-Progress-Bar-'].update_bar(counter)
                                        enable_input(window_settings)
                                        window_settings['-OK-set-'].update(disabled=True)
                                        window_settings['-OK-set-'].update(button_color=button_color)
                                        my_popup("Настройки изменены")
                                        window_settings.close()
                                else:
                                    pass
                            additional_window = False
                        if event == '-AddUser-':
                            """
                            Новая модель с userType
                            """
                            additional_window = True
                            window_add_user = make_add_user_window()
                            window_add_user.Element('UserLogin').SetFocus()
                            password_clear = False
                            while True:
                                ev_add_user, val_add_user = window_add_user.Read()
                                print(ev_add_user, val_add_user)
                                if ev_add_user == sg.WIN_CLOSED or ev_add_user == 'Exit':
                                    break
                                elif ev_add_user == 'UserPassword':
                                    window_add_user['showPassword'].update(disabled=False)
                                    window_add_user['showPassword'].update(image_data=ICON_SHOW_BASE_64)
                                elif ev_add_user == 'user':
                                    window_add_user['addUserIndCallEn'].update(True, disabled=False)
                                    window_add_user['addUserIndMesEn'].update(True, disabled=False)
                                    window_add_user['addUserAllowDelChats'].update(False, disabled=True)
                                    window_add_user['addUserAllowPartialDrop'].update(False, disabled=True)
                                    window_add_user['UserPriority'].update('0')
                                elif ev_add_user == 'disp':
                                    window_add_user['addUserIndCallEn'].update(True, disabled=False)
                                    window_add_user['addUserIndMesEn'].update(True, disabled=False)
                                    window_add_user['addUserAllowDelChats'].update(False, disabled=False)
                                    window_add_user['addUserAllowPartialDrop'].update(False, disabled=False)
                                    window_add_user['UserPriority'].update('10')
                                elif ev_add_user == 'gw':
                                    window_add_user['addUserIndCallEn'].update(True, disabled=False)
                                    window_add_user['addUserIndMesEn'].update(False, disabled=True)
                                    window_add_user['addUserAllowDelChats'].update(False, disabled=True)
                                    window_add_user['addUserAllowPartialDrop'].update(False, disabled=True)
                                    window_add_user['UserPriority'].update('5')
                                elif ev_add_user == 'adm':
                                    window_add_user['addUserIndCallEn'].update(False, disabled=True)
                                    window_add_user['addUserIndMesEn'].update(False, disabled=True)
                                    window_add_user['addUserAllowDelChats'].update(True, disabled=False)
                                    window_add_user['addUserAllowPartialDrop'].update(True, disabled=False)
                                    window_add_user['UserPriority'].update('15')
                                elif ev_add_user == 'UserPriority':
                                    if val_add_user['UserPriority'] == '':
                                        window_add_user['UserPriority'].update(background_color=omega_theme['INPUT'],
                                                                               text_color=omega_theme['TEXT'])
                                    elif len(val_add_user['UserPriority']) > 2:
                                        window_add_user['UserPriority'].update(val_add_user['UserPriority'][:2])
                                    elif val_add_user['UserPriority'].isdigit():
                                        window_add_user['UserPriority'].update(background_color=omega_theme['INPUT'])
                                        if 0 <= int(val_add_user['UserPriority'][:2]) <= 15:
                                            window_add_user['UserPriority'].update(
                                                background_color=omega_theme['INPUT'],
                                                text_color=omega_theme['TEXT'])
                                        else:
                                            window_add_user['UserPriority'].update(background_color=button_color_2)
                                    else:
                                        window_add_user['UserPriority'].update(background_color=button_color_2)
                                elif ev_add_user == 'showPassword':
                                    if password_clear:
                                        window_add_user['UserPassword'].update(password_char='*')
                                        window_add_user['showPassword'].update(image_data=ICON_SHOW_BASE_64)
                                        password_clear = False
                                    else:
                                        window_add_user['UserPassword'].update(password_char='')
                                        window_add_user['showPassword'].update(image_data=ICON_HIDE_BASE_64)
                                        password_clear = True
                                    window_add_user.Element('UserPassword').SetFocus()
                                elif ev_add_user == 'addUserButton':
                                    if validate('add_user'):
                                        new_user_type = get_user_type('add_user')
                                        add_user_dict = {'login': val_add_user['UserLogin'],
                                                         'displayName': val_add_user['UserName'],
                                                         'password': val_add_user['UserPassword'],
                                                         'userType': new_user_type,
                                                         'priority': val_add_user['UserPriority']
                                                             if val_add_user['UserPriority'] else 1}
                                        try:
                                            res_add_user = requests.post(BASE_URL + 'addUser',
                                                                         json=add_user_dict, headers=HEADER_dict)
                                            if res_add_user.status_code == 200:
                                                current_db += 1
                                                logging.info(f"Пользователь {val_add_user['UserLogin']} добавлен")
                                                if new_user_type == user_type['dispatcher']:
                                                    logging.info(f"Пользователь {val_add_user['UserLogin']} "
                                                                 f'стал диспетчером')
                                                elif new_user_type == user_type['box']:
                                                    logging.info(f"Пользователь {val_add_user['UserLogin']} "
                                                                 f'для концентратора К500')
                                                elif new_user_type == user_type['admin']:
                                                    logging.info(f"Пользователь {val_add_user['UserLogin']} "
                                                                 f'стал администратором')
                                                if not val_add_user['addUserIndCallEn']:
                                                    res_add_user_en_ind = change_role(role.allow_ind_call,
                                                                                      val_add_user['addUserIndCallEn'],
                                                                                      res_add_user.text[1:-1])
                                                    if res_add_user_en_ind:
                                                        if res_add_user_en_ind.status_code == 200:
                                                            current_db += 1
                                                            if val_add_user['addUserIndCallEn']:
                                                                logging.info(
                                                                    f"'Пользователю {val_add_user['UserLogin']} "
                                                                    f'разрешено совершать индивидуальные вызовы')
                                                            else:
                                                                logging.info(
                                                                    f"Пользователю {val_add_user['UserLogin']} "
                                                                    f'запрещено совершать индивидуальные вызовы')
                                                        else:
                                                            if val_add_user['addUserIndCallEn']:
                                                                logging.error(
                                                                    f'Ошибка при разрешении индивидуальных вызовов - '
                                                                    f'{res_add_user_en_ind.status_code}')
                                                            else:
                                                                logging.error(
                                                                    f'Ошибка при запрещении индивидуальных вызовов - '
                                                                    f'{res_add_user_en_ind.status_code}')
                                                if not val_add_user['addUserIndMesEn']:
                                                    res_add_user_en_ind_mes = change_role(role.allow_ind_mes,
                                                                                          val_add_user[
                                                                                              'addUserIndMesEn'],
                                                                                          res_add_user.text[1:-1])
                                                    if res_add_user_en_ind_mes:
                                                        if res_add_user_en_ind_mes.status_code == 200:
                                                            current_db += 1
                                                            if val_add_user['addUserIndMesEn']:
                                                                logging.info(
                                                                    f"'Пользователю {val_add_user['UserLogin']} "
                                                                    f'разрешено отправлять индивидуальные сообщения')
                                                            else:
                                                                logging.info(
                                                                    f"Пользователю {val_add_user['UserLogin']} "
                                                                    f'запрещено отправлять индивидуальные сообщения')
                                                        else:
                                                            if val_add_user['addUserIndMesEn']:
                                                                logging.error(
                                                                    f'Ошибка при разрешении отправления индивидуальных сообщений - '
                                                                    f'{res_add_user_en_ind_mes.status_code}')
                                                            else:
                                                                logging.error(
                                                                    f'Ошибка при запрещении отправления индивидуальных сообщений - '
                                                                    f'{res_add_user_en_ind_mes.status_code}')
                                                if val_add_user['addUserAllowDelChats']:
                                                    res_add_user_en_del_chats = change_role(role.allow_delete_chats,
                                                                                            val_add_user[
                                                                                                'addUserAllowDelChats'],
                                                                                            res_add_user.text[1:-1])
                                                    if res_add_user_en_del_chats:
                                                        if res_add_user_en_del_chats.status_code == 200:
                                                            current_db += 1
                                                            if val_add_user['addUserAllowDelChats']:
                                                                logging.info(
                                                                    f"'Пользователю {val_add_user['UserLogin']} "
                                                                    f'разрешено удалять чаты')
                                                            else:
                                                                logging.info(
                                                                    f"Пользователю {val_add_user['UserLogin']} "
                                                                    f'запрещено удалять чаты')
                                                        else:
                                                            if val_add_user['addUserAllowDelChats']:
                                                                logging.error(
                                                                    f'Ошибка при разрешении удаления чатов - '
                                                                    f'{res_add_user_en_del_chats.status_code}')
                                                            else:
                                                                logging.error(
                                                                    f'Ошибка при запрещении удаления чатов - '
                                                                    f'{res_add_user_en_del_chats.status_code}')
                                                if val_add_user['addUserAllowPartialDrop']:
                                                    res_add_user_en_partial_drop = change_role(role.allow_partial_drop,
                                                                                               val_add_user[
                                                                                                   'addUserAllowPartialDrop'],
                                                                                               res_add_user.text[1:-1])
                                                    if res_add_user_en_partial_drop:
                                                        if res_add_user_en_partial_drop.status_code == 200:
                                                            current_db += 1
                                                            if val_add_user['addUserAllowPartialDrop']:
                                                                logging.info(
                                                                    f"'Пользователю {val_add_user['UserLogin']} "
                                                                    f'разрешено удалять данные БД')
                                                            else:
                                                                logging.info(
                                                                    f"Пользователю {val_add_user['UserLogin']} "
                                                                    f'запрещено удалять данные БД')
                                                        else:
                                                            if val_add_user['addUserAllowPartialDrop']:
                                                                logging.error(
                                                                    f'Ошибка при разрешении удаления данных БД - '
                                                                    f'{res_add_user_en_partial_drop.status_code}')
                                                            else:
                                                                logging.error(
                                                                    f'Ошибка при запрещении удаления данных БД - '
                                                                    f'{res_add_user_en_partial_drop.status_code}')
                                                if val_add_user['addUserBlock']:
                                                    res_block = block_user(val_add_user['addUserBlock'],
                                                                           res_add_user.text[1:-1])
                                                    if res_block:
                                                        if res_block.status_code == 200:
                                                            current_db += 1
                                                            if val_add_user['addUserBlock']:
                                                                logging.info(f"Пользователь "
                                                                             f"{val_add_user['UserLogin']}"
                                                                             f' заблокирован')
                                                            else:
                                                                logging.info(f"Пользователь "
                                                                             f"{val_add_user['UserLogin']}"
                                                                             f' разблокирован')
                                                        else:
                                                            if val_add_user['addUserBlock']:
                                                                logging.error(
                                                                    f'Ошибка при блокировании пользователя - '
                                                                    f'{res_block.status_code}')
                                                            else:
                                                                logging.error(
                                                                    f'Ошибка при разблокировании пользователя - '
                                                                    f'{res_block.status_code}')
                                                update_users()
                                                window_add_user.close()
                                                my_popup("Пользователь добавлен!")
                                            else:
                                                logging.error(f"Пользователь {val_add_user['UserLogin']} НЕ добавлен - "
                                                              f'{res_add_user.status_code}')
                                                my_popup("Пользователь не добавлен!")
                                        except Exception as e:
                                            print(f'Не удалось добавить абонента - {e}')
                                            logging.error("Не удалось добавить абонента")
                                else:
                                    window_add_user['addUserButton'].update(disabled=False)
                                    window_add_user['addUserButton'].update(button_color=button_color_2)
                            additional_window = False
                        if event == '-DelUser-':
                            additional_window = True
                            if not values['-users-']:
                                my_popup('Не выбран пользователь')
                            else:
                                if filter_status:
                                    del_user = filtered_users_list_of_dict[values['-users-'][0]]
                                else:
                                    del_user = users_from_db[values['-users-'][0]]
                                if del_user['login'] == 'admin':
                                    my_popup("Нельзя удалить пользователя admin")
                                else:
                                    window_del_user = make_confirm_window('Вы уверены, '
                                                                          'что хотите удалить пользователя ' + del_user[
                                                                              'login'] + '?')
                                    while True:
                                        ev_del_user, val_del_user = window_del_user.Read()
                                        if ev_del_user == sg.WIN_CLOSED or ev_del_user == 'Exit':
                                            break
                                        if ev_del_user == 'noExit':
                                            window_del_user.close()
                                            break
                                        if ev_del_user == 'okExit':
                                            try:
                                                res_del_user = requests.post(BASE_URL + 'deleteUser',
                                                                             json=del_user, headers=HEADER_dict)
                                                if res_del_user.status_code == 200:
                                                    current_db += 1
                                                    logging.info(f'Пользователь {del_user["name"]} удалён')
                                                    drop_db('users')
                                                    add_users(get_users_from_server())
                                                    users_from_db = get_users_from_db()
                                                    users_from_db.sort(key=lambda i: i['login'])
                                                    user_list, treedata_update_user = get_user_list(
                                                        users_from_db)  # TODO
                                                    del_users_in_groups_after_delete_user(del_user['id'])
                                                    if filter_status:
                                                        search_str = values['-filterUser-']
                                                        filtered_users = filter(
                                                            lambda x: search_str.lower() in x['login'].lower() or
                                                                      search_str.lower() in x['name'].lower(),
                                                            users_from_db)
                                                        filtered_users_list_of_dict = list(filtered_users)
                                                        filtered_users_list, treedata_update_user = get_user_list(
                                                            filtered_users_list_of_dict)
                                                        if not filtered_users_list:
                                                            window['-filterUser-'].update(
                                                                background_color=button_color_2)
                                                        window['-users-'].update(filtered_users_list)
                                                    else:
                                                        window['-users-'].update(user_list)
                                                    window['-TREE2-'].update(treedata_update_user)
                                                    window_del_user.close()
                                                    my_popup("Пользователь удалён!")
                                                    break
                                                else:
                                                    logging.error(f'Пользователь {del_user["name"]} НЕ удалён')
                                                    my_popup("Пользователь не удалён!")
                                            except Exception as e:
                                                print(f'Не удалось удалить абонента - {e}')
                                                logging.error("Не удалось удалить абонента")
                            additional_window = False
                        if event == '-CloneUser-':
                            additional_window = True
                            if not values['-users-']:
                                my_popup('Не выбран пользователь')
                            else:
                                if filter_status:
                                    user_clone = filtered_users_list_of_dict[values['-users-'][0]]
                                else:
                                    user_clone = users_from_db[values['-users-'][0]]
                                window_clone_user = make_clone_user_window(user_clone['name'])
                                window_clone_user.Element('CloneUserLogin').SetFocus()
                                password_clear = False
                                while True:
                                    ev_clone_user, val_clone_user = window_clone_user.Read()
                                    if ev_clone_user == sg.WIN_CLOSED or ev_clone_user == 'Exit':
                                        break
                                    if ev_clone_user == 'CloneUserPassword':
                                        window_clone_user['CloneUserShowPassword'].update(
                                            image_data=ICON_SHOW_BASE_64)
                                        window_clone_user['CloneUserShowPassword'].update(
                                            disabled=False)
                                    if ev_clone_user == 'CloneUserShowPassword':
                                        if password_clear:
                                            window_clone_user['CloneUserPassword'].update(password_char='*')
                                            window_clone_user['CloneUserShowPassword'].update(
                                                image_data=ICON_SHOW_BASE_64)
                                            password_clear = False
                                        else:
                                            window_clone_user['CloneUserPassword'].update(password_char='')
                                            window_clone_user['CloneUserShowPassword'].update(
                                                image_data=ICON_HIDE_BASE_64)
                                            password_clear = True
                                    if ev_clone_user == 'cloneUserButton':
                                        if validate('clone_user'):
                                            clone_user_login, \
                                                clone_user_name, \
                                                clone_user_password = val_clone_user.values()
                                            clone_res = True
                                            clone_user_dict = {'login': clone_user_login,
                                                               'displayName': clone_user_name,
                                                               'password': clone_user_password,
                                                               'userType': get_user_type(user_clone),
                                                               'priority': user_clone['priority']
                                                               }
                                            try:
                                                res_clone_user = requests.post(BASE_URL + 'addUser',
                                                                               json=clone_user_dict,
                                                                               headers=HEADER_dict)
                                                if res_clone_user.status_code == 200:
                                                    current_db += 1
                                                    logging.info(f'Новый пользователь {clone_user_login} клонирован')
                                                    original_groups = get_groups_for_user_from_db(user_clone['id'])
                                                    original_groups_ids = []
                                                    for or_gr in original_groups:
                                                        original_groups_ids.append(or_gr['id'])
                                                    user_from_server = res_clone_user.text[1:-1]
                                                    clone_dict = {'UserIds': [user_from_server],
                                                                  'addGroupIds': original_groups_ids,
                                                                  'removeGroupIds': []}
                                                    try:
                                                        res_clone_add_group = requests.post(BASE_URL +
                                                                                            'changeUserGroups',
                                                                                            json=clone_dict,
                                                                                            headers=HEADER_dict)
                                                        if res_clone_add_group.status_code == 200:
                                                            current_db += 1
                                                            logging.info(f'Группы для {clone_user_login} добавлены')
                                                            res_clone_user_en_ind = change_role(role.allow_ind_call,
                                                                                                user_clone['en_ind'],
                                                                                                user_from_server)
                                                            if res_clone_user_en_ind:
                                                                if res_clone_user_en_ind.status_code == 200:
                                                                    current_db += 1
                                                                    if user_clone['en_ind']:
                                                                        logging.info(
                                                                            f"'Пользователю {clone_user_login} "
                                                                            f'разрешено совершать индивидуальные вызовы')
                                                                    else:
                                                                        logging.info(f"Пользователю {clone_user_login} "
                                                                                     f'запрещено совершать индивидуальные вызовы')
                                                                else:
                                                                    if user_clone['en_ind']:
                                                                        logging.error(
                                                                            f'Ошибка при разрешении индивидуальных вызовов - '
                                                                            f'{res_clone_user_en_ind.status_code}')
                                                                    else:
                                                                        logging.error(
                                                                            f'Ошибка при запрещении индивидуальных вызовов - '
                                                                            f'{res_clone_user_en_ind.status_code}')
                                                                    clone_res = False
                                                            res_clone_user_en_ind_mes = change_role(role.allow_ind_mes,
                                                                                                    user_clone[
                                                                                                        'en_ind_mes'],
                                                                                                    user_from_server)
                                                            if res_clone_user_en_ind_mes:
                                                                if res_clone_user_en_ind_mes.status_code == 200:
                                                                    current_db += 1
                                                                    if user_clone['en_ind_mes']:
                                                                        logging.info(
                                                                            f"'Пользователю {clone_user_login} "
                                                                            f'разрешено отправлять индивидуальные сообщения')
                                                                    else:
                                                                        logging.info(f"Пользователю {clone_user_login} "
                                                                                     f'запрещено отправлять индивидуальные сообщения')
                                                                else:
                                                                    if user_clone['en_ind_mes']:
                                                                        logging.error(
                                                                            f'Ошибка при разрешении отправления индивидуальных сообщений - '
                                                                            f'{res_clone_user_en_ind_mes.status_code}')
                                                                    else:
                                                                        logging.error(
                                                                            f'Ошибка при запрещении отправления индивидуальных сообщений - '
                                                                            f'{res_clone_user_en_ind_mes.status_code}')
                                                                    clone_res = False
                                                            res_clone_user_en_del_chats = change_role(
                                                                role.allow_delete_chats,
                                                                user_clone['en_del_chats'],
                                                                user_from_server)
                                                            if res_clone_user_en_del_chats:
                                                                if res_clone_user_en_del_chats.status_code == 200:
                                                                    current_db += 1
                                                                    if user_clone['en_del_chats']:
                                                                        logging.info(
                                                                            f"'Пользователю {clone_user_login} "
                                                                            f'разрешено удалять чаты')
                                                                    else:
                                                                        logging.info(f"Пользователю {clone_user_login} "
                                                                                     f'запрещено удалять чаты')
                                                                else:
                                                                    if user_clone['en_del_chats']:
                                                                        logging.error(
                                                                            f'Ошибка при разрешении удаления чатов - '
                                                                            f'{res_clone_user_en_del_chats.status_code}')
                                                                    else:
                                                                        logging.error(
                                                                            f'Ошибка при запрещении удаления чатов - '
                                                                            f'{res_clone_user_en_del_chats.status_code}')
                                                                    clone_res = False
                                                            res_clone_user_en_partial_drop = change_role(
                                                                role.allow_partial_drop,
                                                                user_clone['en_partial_drop'],
                                                                user_from_server)
                                                            if res_clone_user_en_partial_drop:
                                                                if res_clone_user_en_partial_drop.status_code == 200:
                                                                    current_db += 1
                                                                    if user_clone['en_partial_drop']:
                                                                        logging.info(
                                                                            f"'Пользователю {clone_user_login} "
                                                                            f'разрешено удалять данные БД')
                                                                    else:
                                                                        logging.info(f"Пользователю {clone_user_login} "
                                                                                     f'запрещено удалять данные БД')
                                                                else:
                                                                    if user_clone['en_partial_drop']:
                                                                        logging.error(
                                                                            f'Ошибка при разрешении удаления данных БД - '
                                                                            f'{res_clone_user_en_partial_drop.status_code}')
                                                                    else:
                                                                        logging.error(
                                                                            f'Ошибка при запрещении удаления данных БД - '
                                                                            f'{res_clone_user_en_partial_drop.status_code}')
                                                                    clone_res = False
                                                            update_users_and_groups()
                                                            window_clone_user.close()
                                                            if clone_res:
                                                                my_popup("Пользователь клонирован!")
                                                            else:
                                                                my_popup("Пользователь клонирован с ошибками!")
                                                            break
                                                        else:
                                                            logging.error(f'Добавление групп для {clone_user_login} '
                                                                          f'НЕ выполнено - {res_clone_add_group.status_code}')
                                                            my_popup("Добавление групп не выполнено")
                                                    except Exception as e:
                                                        print(f'Не удалось добавить группы абоненту - {e}')
                                                        logging.error("Не удалось добавить группы абоненту")
                                                else:
                                                    logging.error(f'Новый пользователь {clone_user_login} НЕ добавлен')
                                                    my_popup("Пользователь не добавлен!")
                                            except Exception as e:
                                                print(f'Не удалось создать абонента - {e}')
                                                logging.error("Не удалось создать абонента")
                            additional_window = False
                        if event == '-BlockUser-':
                            additional_window = True
                            if not values['-users-']:
                                my_popup('Не выбран пользователь')
                            else:
                                users_from_db = get_users_from_db()
                                if filter_status:
                                    user_to_change = filtered_users_list_of_dict[values['-users-'][0]]
                                else:
                                    user_to_change = users_from_db[values['-users-'][0]]
                                block_status = get_block_status(user_to_change)
                                print(block_status)
                                if block_status is not None:
                                    if not block_status:
                                        confirm_text = 'Вы уверены, что хотите заблокировать пользователя '
                                    else:
                                        confirm_text = 'Вы уверены, что хотите разблокировать пользователя '
                                    window_block_user = make_confirm_window(confirm_text +
                                                                            user_to_change['name']
                                                                            + '?')
                                    while True:
                                        ev_block_user, val_block_user = window_block_user.Read()
                                        if ev_block_user == sg.WIN_CLOSED or ev_block_user == 'Exit':
                                            break
                                        if ev_block_user == 'noExit':
                                            window_block_user.close()
                                            break
                                        if ev_block_user == 'okExit':
                                            try:
                                                res_block = block_user(not block_status,
                                                                       user_to_change['id'])
                                                if res_block:
                                                    if res_block.status_code == 200:
                                                        current_db += 1
                                                        if not block_status:
                                                            logging.info(f"Пользователь "
                                                                         f"{user_to_change['name']}"
                                                                         f' заблокирован')
                                                        else:
                                                            logging.info(f"Пользователь "
                                                                         f"{user_to_change['name']}"
                                                                         f' разблокирован')
                                                    else:
                                                        if not block_status:
                                                            logging.error(
                                                                f'Ошибка при блокировании пользователя - '
                                                                f'{res_block.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при разблокировании пользователя - '
                                                                f'{res_block.status_code}')
                                                window_block_user.close()
                                                update_users()
                                                if block_status:
                                                    my_popup("Пользователь разблокирован!")
                                                else:
                                                    my_popup("Пользователь заблокирован!")
                                            except Exception as e:
                                                print(f'Не удалось заблокировать пользователя - {e}')
                                                logging.error("Не удалось заблокировать пользователя")
                            additional_window = False
                        if event == '-BlockGroup-':
                            additional_window = True
                            if not values['-groups2-']:
                                my_popup('Не выбрана группа')
                            else:
                                groups_from_db = get_groups_from_db()
                                if filter_status_group:
                                    group_to_change = filtered_groups_list_of_dict[values['-groups2-'][0]]
                                else:
                                    group_to_change = groups_from_db[values['-groups2-'][0]]
                                block_status = get_block_status_group(group_to_change)
                                print(block_status)
                                if block_status is not None:
                                    if not block_status:
                                        confirm_text = 'Вы уверены, что хотите заблокировать группу '
                                    else:
                                        confirm_text = 'Вы уверены, что хотите разблокировать группу '
                                    window_block_group = make_confirm_window(confirm_text +
                                                                             group_to_change['name']
                                                                             + '?')
                                    while True:
                                        ev_block_group, val_block_group = window_block_group.Read()
                                        if ev_block_group == sg.WIN_CLOSED or ev_block_group == 'Exit':
                                            break
                                        if ev_block_group == 'noExit':
                                            window_block_group.close()
                                            break
                                        if ev_block_group == 'okExit':
                                            try:
                                                res_block = block_group(not block_status,
                                                                        group_to_change['id'])
                                                if res_block:
                                                    if res_block.status_code == 200:
                                                        current_db += 1
                                                        if not block_status:
                                                            logging.info(f"Группа "
                                                                         f"{group_to_change['name']}"
                                                                         f' заблокирована')
                                                        else:
                                                            logging.info(f"Группа "
                                                                         f"{group_to_change['name']}"
                                                                         f' разблокирована')
                                                    else:
                                                        if not block_status:
                                                            logging.error(
                                                                f'Ошибка при блокировании группы - '
                                                                f'{res_block.status_code}')
                                                        else:
                                                            logging.error(
                                                                f'Ошибка при разблокировании группы - '
                                                                f'{res_block.status_code}')
                                                window_block_group.close()
                                                update_groups()
                                                if block_status:
                                                    my_popup("Группа разблокирована!")
                                                else:
                                                    my_popup("Группа заблокирована!")
                                            except Exception as e:
                                                print(f'Не удалось заблокировать группу - {e}')
                                                logging.error("Не удалось заблокировать группу")
                            additional_window = False
                        if event == '-filterUser-':
                            filter_status = True
                            if values['-filterUser-']:
                                window['-ClearFilterUser-'].update(disabled=False)
                                window['-filterUser-'].update(background_color='lightblue')
                                search_str = values['-filterUser-']
                                filtered_users = filter(lambda x: search_str.lower() in x['login'].lower() or
                                                                  search_str.lower() in x['name'].lower(),
                                                        users_from_db)
                                filtered_users_list_of_dict = list(filtered_users)
                                filtered_users_list, treedata2 = get_user_list(filtered_users_list_of_dict)
                                window['-users-'].update(filtered_users_list)
                                window['-TREE2-'].update(treedata2)
                                if not filtered_users_list:
                                    window['-filterUser-'].update(background_color=button_color_2)
                            else:
                                window['-filterUser-'].update(background_color=omega_theme['INPUT'])
                                user_list_after_filter_null, treedata2 = get_user_list(users_from_db)
                                window['-users-'].update(user_list_after_filter_null)
                                window['-TREE2-'].update(treedata2)
                                window['-ClearFilterUser-'].update(disabled=True)
                                filter_status = False
                        if event == '-ClearFilterUser-':
                            window['-filterUser-'].update('')
                            window['-filterUser-'].update(background_color=omega_theme['INPUT'])
                            user_list_after_filter_null, treedata2 = get_user_list(users_from_db)
                            window['-users-'].update(user_list_after_filter_null)
                            window['-TREE2-'].update(treedata2)
                            window.Element('-filterUser-').SetFocus()
                            window['-ClearFilterUser-'].update(disabled=True)
                            filter_status = False
                        if event == '-filterGroup-':
                            filter_status_group = True
                            if values['-filterGroup-']:
                                window['-ClearFilterGroup-'].update(disabled=False)
                                window['-filterGroup-'].update(background_color='lightblue')
                                search_str = values['-filterGroup-']
                                filtered_groups = filter(lambda x: search_str.lower() in x['name'].lower() or
                                                                   search_str.lower() in x['desc'].lower(),
                                                         groups_from_db)
                                filtered_groups_list_of_dict = list(filtered_groups)
                                filtered_groups_list, treedata = get_group_list(filtered_groups_list_of_dict)
                                window['-groups2-'].update(filtered_groups_list)
                                window['-TREE-'].update(treedata)
                                if not filtered_groups_list:
                                    window['-filterGroup-'].update(background_color=button_color_2)
                            else:
                                window['-filterGroup-'].update(background_color=omega_theme['INPUT'])
                                group_list_after_filter_null, treedata = get_group_list(groups_from_db)
                                window['-groups2-'].update(group_list_after_filter_null)
                                window['-TREE-'].update(treedata)
                                window['-ClearFilterGroup-'].update(disabled=True)
                                filter_status_group = False
                        if event == '-ClearFilterGroup-':
                            window['-filterGroup-'].update('')
                            window['-filterGroup-'].update(background_color=omega_theme['INPUT'])
                            group_list_after_filter_null, treedata = get_group_list(groups_from_db)
                            window['-groups2-'].update(group_list_after_filter_null)
                            window['-TREE-'].update(treedata)
                            window.Element('-filterGroup-').SetFocus()
                            window['-ClearFilterGroup-'].update(disabled=True)
                            filter_status_group = False
                        if event == '-filterJournal-':
                            filter_status_journal = True
                            output_text = get_logs()
                            if values['-filterJournal-']:
                                window['-ClearFilterJournal-'].update(disabled=False)
                                window['-filterJournal-'].update(background_color='lightblue')
                                if not output_text[1]:
                                    window['-filterJournal-'].update(background_color=button_color_2)
                            else:
                                window['-filterJournal-'].update(background_color=omega_theme['INPUT'])
                                filter_status_journal = False
                                window['-ClearFilterJournal-'].update(disabled=True)
                            window['journal'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogs'].update(count_string)
                        if event == '-ClearFilterJournal-':
                            window['-filterJournal-'].update('')
                            window['-filterJournal-'].update(background_color=omega_theme['INPUT'])
                            window.Element('-filterJournal-').SetFocus()
                            window['-ClearFilterJournal-'].update(disabled=True)
                            filter_status_journal = False
                            output_text = get_logs()
                            window['journal'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogs'].update(count_string)
                        if event == '-SaveLog-':
                            print(f'Открываем файл для записи')
                            try:
                                today = date.today()
                                today_format = today.strftime("%d-%m-%Y")
                                now = datetime.now()
                                current_time = now.strftime("%H-%M-%S")
                                print(current_time)
                                log_filename = 'log_' + today_format + '_' + current_time + '.txt'
                                print(log_filename)
                                full_log_path = Path(Path.cwd(), 'logs', log_filename)
                                os.makedirs('logs', exist_ok=True)
                                # noinspection PyUnboundLocalVariable
                                if output_text[0]:
                                    with open(full_log_path, 'w', encoding='cp1251') as log:
                                        log.write(output_text[0])
                                    my_popup(f'Файл {full_log_path} сохранён')
                                else:
                                    my_popup('Лог пуст!')
                            except IOError as e:
                                print(f'Не удалось записать в файл. {e}')
                                logging.error(f'Не удалось записать в файл. {e}')
                        if event == 'Tabs_journal':
                            if values['Tabs_journal'] == 'Tab1_journal':
                                output_text = get_logs()
                                window['journal'].update(output_text[0])
                                count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                                window['countLogs'].update(count_string)
                            elif values['Tabs_journal'] == 'Tab2_journal':
                                if not got_server_log:
                                    output_text_server = get_logs_server()
                                    if output_text_server == ['', 0, 0]:
                                        continue
                                        # try:
                                        #     window_ssh_credentials = make_credential_window()
                                        #     login_ssh_password_clear = False
                                        #     while True:
                                        #         ev_cred, val_cred = window_ssh_credentials.Read()
                                        #         print(f'{ev_cred}, {val_cred}')
                                        #         if ev_cred == sg.WIN_CLOSED or ev_cred == '-Exit-set-':
                                        #             window_ssh_credentials.close()
                                        #             break
                                        #         elif ev_cred == 'OK cred':
                                        #             print('ok')
                                        #         if ev_cred == 'showLoginPasswordCred':
                                        #             if login_ssh_password_clear:
                                        #                 window_ssh_credentials['ssh_password'].update(password_char='*')
                                        #                 window_ssh_credentials['showLoginPasswordCred'].update(
                                        #                     image_data=ICON_SHOW_BASE_64)
                                        #                 login_ssh_password_clear = False
                                        #             else:
                                        #                 window_ssh_credentials['ssh_password'].update(password_char='')
                                        #                 window_ssh_credentials['showLoginPasswordCred'].update(
                                        #                     image_data=ICON_HIDE_BASE_64)
                                        #                 login_ssh_password_clear = True
                                        #             window_ssh_credentials.Element('ssh_password').SetFocus()
                                        #         if ev_cred == 'OK cred':
                                        #             SSH_PORT, SSH_LOGIN, SSH_PWD = val_cred['ssh_port'], val_cred[
                                        #                 'ssh_login'], val_cred['ssh_password']
                                        #             window_ssh_credentials.close()
                                        #             break
                                        # except Exception as e:
                                        #     print(f'{e}')

                                        # output_text_server = get_logs_server()
                                    window['journalServer'].update(output_text_server[0])
                                    count_string = str(output_text_server[1]) + ' из ' + str(output_text_server[2])
                                    window['countLogsServer'].update(count_string)
                                    if output_text_server[2] == 0:
                                        window['-filterJournalServer-'].update(disabled=True)
                                        window['-ClearFilterJournalServer-'].update(disabled=True)
                                        window['-SaveLogServer-'].update(disabled=True)
                                        window['info_server'].update(disabled=True)
                                        window['warning_server'].update(disabled=True)
                                        window['fail_server'].update(disabled=True)
                                    else:
                                        window['-filterJournalServer-'].update(disabled=False)
                                        window['-ClearFilterJournalServer-'].update(disabled=False)
                                        window['-SaveLogServer-'].update(disabled=False)
                                        window['info_server'].update(disabled=False)
                                        window['warning_server'].update(disabled=False)
                                        window['fail_server'].update(disabled=False)
                        if event == '-UpdateLogServer-':
                            output_text_server = get_logs_server()
                            if output_text_server[1] == 0:
                                if filter_status_journal_server:
                                    window['-filterJournalServer-'].update(background_color=button_color_2)
                            else:
                                if filter_status_journal_server:
                                    window['-filterJournalServer-'].update(background_color='lightblue')
                            window['journalServer'].update(output_text_server[0])
                            count_string = str(output_text_server[1]) + ' из ' + str(output_text_server[2])
                            window['countLogsServer'].update(count_string)
                            if output_text_server[2] == 0:
                                window['-filterJournalServer-'].update(disabled=True)
                                window['-ClearFilterJournalServer-'].update(disabled=True)
                                window['-SaveLogServer-'].update(disabled=True)
                                window['info_server'].update(disabled=True)
                                window['warning_server'].update(disabled=True)
                                window['fail_server'].update(disabled=True)
                            else:
                                window['-filterJournalServer-'].update(disabled=False)
                                window['-ClearFilterJournalServer-'].update(disabled=False)
                                window['-SaveLogServer-'].update(disabled=False)
                                window['info_server'].update(disabled=False)
                                window['warning_server'].update(disabled=False)
                                window['fail_server'].update(disabled=False)
                        if event == '-filterJournalServer-':
                            filter_status_journal_server = True
                            output_text = filter_logs_server()
                            if values['-filterJournalServer-']:
                                window['-ClearFilterJournalServer-'].update(disabled=False)
                                window['-filterJournalServer-'].update(background_color='lightblue')
                                if not output_text[1]:
                                    window['-filterJournalServer-'].update(background_color=button_color_2)
                            else:
                                window['-filterJournalServer-'].update(background_color=omega_theme['INPUT'])
                                filter_status_journal_server = False
                                window['-ClearFilterJournalServer-'].update(disabled=True)
                            window['journalServer'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogsServer'].update(count_string)
                        if event == '-ClearFilterJournalServer-':
                            window['-filterJournalServer-'].update('')
                            window['-filterJournalServer-'].update(background_color=omega_theme['INPUT'])
                            window.Element('-filterJournalServer-').SetFocus()
                            window['-ClearFilterJournalServer-'].update(disabled=True)
                            filter_status_journal_server = False
                            output_text = filter_logs_server()
                            window['journalServer'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogsServer'].update(count_string)
                        if event == '-SaveLogServer-':
                            print(f'Открываем файл для записи')
                            try:
                                today = date.today()
                                today_format = today.strftime("%d-%m-%Y")
                                now = datetime.now()
                                current_time = now.strftime("%H-%M-%S")
                                print(current_time)
                                log_filename = 'log_server_' + today_format + '_' + current_time + '.txt'
                                print(log_filename)
                                full_log_path = Path(Path.cwd(), 'logs', log_filename)
                                os.makedirs('logs', exist_ok=True)
                                # noinspection PyUnboundLocalVariable
                                if output_text_server[0]:
                                    with open(full_log_path, 'w', encoding='utf-8') as log:
                                        log.write(output_text_server[0])
                                    my_popup(f'Файл {full_log_path} сохранён')
                                else:
                                    my_popup('Лог пуст!')
                            except IOError as e:
                                print(f'Не удалось записать в файл. {e}')
                                logging.error(f'Не удалось записать в файл. {e}')
                        if event == '-AddGroup-':
                            additional_window = True
                            window_add_group = make_add_group_window()
                            window_add_group.Element('GroupName').SetFocus()
                            while True:
                                ev_add_group, val_add_group = window_add_group.Read()
                                print(ev_add_group, val_add_group)
                                if ev_add_group == sg.WIN_CLOSED or ev_add_group == 'Exit':
                                    break
                                elif ev_add_group == 'addGroupButton':
                                    if validate('add_group'):
                                        new_group_name = val_add_group['GroupName']
                                        new_group_desc = val_add_group['description']
                                        new_group_is_emergency = int(val_add_group['emergency'])
                                        new_group_blocked = int(val_add_group['addGroupBlock'])
                                        add_group_dict = {'name': new_group_name,
                                                          'description': new_group_desc,
                                                          'groupType': new_group_is_emergency}
                                        try:
                                            res_add_user = requests.post(BASE_URL + 'addGroup',
                                                                         json=add_group_dict, headers=HEADER_dict)
                                            if res_add_user.status_code == 200:
                                                current_db += 1
                                                logging.info(f'Группа {new_group_name} добавлена')
                                                if val_add_group['addGroupBlock']:
                                                    res_block = block_group(new_group_blocked, res_add_user.text[1:-1])
                                                    if res_block:
                                                        if res_block.status_code == 200:
                                                            current_db += 1
                                                            if new_group_blocked:
                                                                logging.info(f"Группа "
                                                                             f"{new_group_name}"
                                                                             f' заблокирована')
                                                        else:
                                                            if new_group_blocked:
                                                                logging.error(
                                                                    f'Ошибка при блокировании группы - '
                                                                    f'{res_block.status_code}')
                                                update_groups()
                                                window_add_group.close()
                                                my_popup("Группа добавлена!")
                                                break
                                            else:
                                                logging.error(f'Группа {new_group_name} НЕ добавлена')
                                                my_popup("Группа не добавлена!")
                                                window_add_group.Element('GroupName').SetFocus()
                                        except Exception as e:
                                            print(f'Не удалось добавить группу - {e}')
                                            logging.error("Не удалось добавить группу")
                                else:
                                    window_add_group['addGroupButton'].update(disabled=False)
                                    window_add_group['addGroupButton'].update(button_color=button_color_2)
                            additional_window = False
                        if event == '-DelGroup-':
                            additional_window = True
                            if not values['-groups2-']:
                                my_popup('Не выбрана группа')
                            else:
                                if filter_status_group:
                                    del_group = filtered_groups_list_of_dict[values['-groups2-'][0]]
                                else:
                                    del_group = groups_from_db[values['-groups2-'][0]]
                                window_del_group = make_confirm_window('Вы уверены, '
                                                                       'что хотите удалить группу ' + del_group[
                                                                           'name'] + '?')
                                while True:
                                    ev_del_group, val_del_group = window_del_group.Read()
                                    if ev_del_group == sg.WIN_CLOSED or ev_del_group == 'Exit':
                                        break
                                    if ev_del_group == 'noExit':
                                        window_del_group.close()
                                        break
                                    if ev_del_group == 'okExit':
                                        try:
                                            res_del_group = requests.post(BASE_URL + 'deleteGroup',
                                                                          json=del_group, headers=HEADER_dict)
                                            if res_del_group.status_code == 200:
                                                current_db += 1
                                                logging.info(f'Группа {del_group["name"]} удалена')
                                                drop_db('groups')
                                                add_groups(get_groups_from_server())
                                                groups_from_db = get_groups_from_db()
                                                groups_from_db.sort(key=lambda i: i['name'])
                                                treedata_update_group = sg.TreeData()
                                                group_list = list()
                                                for group_from_db in groups_from_db:
                                                    group_list.append([group_from_db['id'], group_from_db['name'],
                                                                       group_from_db['desc']])
                                                    treedata_update_group.insert('', group_from_db['id'], '',
                                                                                 values=[group_from_db['name'],
                                                                                         group_from_db['desc']],
                                                                                 icon=check[0])
                                                del_users_in_groups_after_delete_group(del_group['id'])
                                                if filter_status_group:
                                                    search_str = values['-filterGroup-']
                                                    filtered_groups = filter(
                                                        lambda x: search_str.lower() in x['name'].lower() or
                                                                  search_str.lower() in x['desc'].lower(),
                                                        groups_from_db)
                                                    filtered_groups_list_of_dict = list(filtered_groups)
                                                    filtered_groups_list = list()
                                                    for filtered_group_list_of_dict in filtered_groups_list_of_dict:
                                                        filtered_groups_list.append([filtered_group_list_of_dict['id'],
                                                                                     filtered_group_list_of_dict[
                                                                                         'name'],
                                                                                     filtered_group_list_of_dict[
                                                                                         'desc']])
                                                    if not filtered_groups_list:
                                                        window['-filterGroup-'].update(background_color=button_color_2)
                                                    window['-groups2-'].update(filtered_groups_list)
                                                else:
                                                    window['-groups2-'].update(group_list)
                                                window['-TREE-'].update(treedata_update_group)
                                                window_del_group.close()
                                                my_popup("Группа удалена!")
                                                break
                                            else:
                                                logging.error(f'Группа {del_group["name"]} НЕ удалена - '
                                                              f'{res_del_group.status_code}')
                                                my_popup("Группа не удалена!")
                                        except Exception as e:
                                            print(f'Не удалось удалить группу - {e}')
                                            logging.error("Не удалось удалить группу")
                            additional_window = False
                        if event == '-Start-':
                            additional_window = True
                            try:
                                ssh, remotepath = get_ssh_connection()
                                start_command = 'sudo systemctl restart omega'
                                if ip != '127.0.0.1':
                                    ssh, remotepath = get_ssh_connection()
                                    stdin, stdout, stderr = ssh.exec_command(start_command)
                                    stdout = stdout.readlines()
                                    ssh.close()
                                    output = ''
                                    for line in stdout:
                                        output = output + line
                                    print(output)
                                else:
                                    process = subprocess.Popen(start_command, shell=True,
                                                               stdout=subprocess.PIPE,
                                                               stderr=subprocess.PIPE)
                                for i in range(3):
                                    sleep(2)
                                    res_ping = ''
                                    try:
                                        res_ping = requests.get(BASE_URL_PING, timeout=1)
                                    except Exception as e:
                                        print(f"Сервер не отвечает, {e}")
                                    if res_ping == '':
                                        print('Нет ответа сервера')
                                        if i == 2:
                                            logging.critical(f'Сервер не отвечает - {res_ping}')
                                            my_popup("Сервер не отвечает")
                                    else:
                                        if res_ping.status_code == 200:
                                            logging.info(f'Сервер запущен администратором')
                                            print(f'{res_ping.text}')
                                            dict_online_after_start = json.loads(res_ping.text)
                                            update_text = ('Онлайн: обновление...' + ', БД: ' +
                                                           str(dict_online_after_start["databaseVersion"]) +
                                                           (', Резервный' if dict_online_after_start["isReserved"]
                                                            else ', Основной'))
                                            update_text2 = update_free_space(server_status)
                                            server_status['online'] = dict_online_after_start["onlineUsersCount"]
                                            server_status['db'] = dict_online_after_start["databaseVersion"]
                                            window['-StatusBar-'].update(update_text,
                                                                         background_color=(button_color_2 if
                                                                                           dict_online_after_start[
                                                                                               "isReserved"] else status_bar_color))
                                            window['-StatusBar2-'].update(update_text2)
                                            window['-Start-'].update(disabled=True)
                                            window['-Stop-'].update(disabled=False)
                                            TOKEN = get_token(BASE_URL_AUTH)
                                            HEADER_dict = {"Authorization": "Bearer " + TOKEN}
                                            if TOKEN:
                                                server_status['run'] = True
                                                print(server_status)
                                                update_users_and_groups()
                                                window['-Menu-'].update([
                                                    ['Сервер', ['Установить лицензию...', 'Настройки', 'Очистка БД',
                                                                ['Частично', 'Полностью']]],
                                                    ['Помощь', 'О программе'], ])
                                                update_text = ('Онлайн: ' + str(server_status["online"]) + ', БД: '
                                                               + str(server_status["db"]) +
                                                               (', Резервный' if server_status["isReserved"]
                                                                else ', Основной'))
                                                update_text2 = update_free_space(server_status)
                                                window['-StatusBar-'].update(update_text,
                                                                             background_color=(button_color_2 if
                                                                                               server_status[
                                                                                                   "isReserved"] else status_bar_color))
                                                window['-StatusBar2-'].update(update_text2)
                                                set_buttons_disabled(False)
                                                server_status['run'] = True
                                                update_free_space(dict_online_after_start)
                                                window['online-users'].update(
                                                    get_online_users(dict_online_after_start['onlineUserIds']))
                                                set_lic_status_bar()
                                                break
                                            else:
                                                break_flag2 = True
                                                break_flag = True
                                                break
                            except Exception as e:
                                print(f'{e}')
                                logging.error('Не удалось запустить сервер')
                                my_popup('Не удалось запустить сервер')
                            additional_window = False
                        if event == '-Stop-':
                            additional_window = True
                            res = ''
                            # noinspection PyBroadException
                            try:
                                res = requests.get(BASE_URL + 'stopServer', headers=HEADER_dict)
                            except Exception as e:
                                print("Сервер недоступен")
                                logging.warning(f"Сервер не отвечает на запрос выключения")
                            if res:
                                if res.status_code == 200:
                                    print("Сервер выключается")
                                    logging.warning(f"Сервер выключается администратором - {res.status_code}")
                                else:
                                    print(f"Сервер не может выключиться - {res.status_code}")
                                    logging.warning(f"Сервер не может выключиться - {res.status_code}")
                            num = 0
                            hard_stop = False
                            f_br = False
                            while True:
                                sleep(1)
                                res_ping = False
                                try:
                                    res_ping = requests.get(BASE_URL_PING, timeout=1)
                                except Exception as e:
                                    print(f"Сервер не отвечает, {e}")
                                if res_ping:
                                    print('Сервер НЕ остановлен')
                                    logging.warning(f'Сервер НЕ остановлен администратором')
                                    if num == 10:
                                        my_popup('Сервер НЕ остановлен')  # TODO
                                        if not hard_stop:
                                            window_confirm = make_confirm_window('Хотите остановить сервис локально?')
                                            while True:
                                                ev_confirm, val_confirm = window_confirm.Read()
                                                if ev_confirm == 'okExit':
                                                    stop_command = 'sudo systemctl stop omega'
                                                    if ip == '127.0.0.1':
                                                        process = subprocess.Popen(stop_command, shell=True,
                                                                                   stdout=subprocess.PIPE,
                                                                                   stderr=subprocess.PIPE)
                                                    else:
                                                        ssh, remotepath = get_ssh_connection()
                                                        stop_command = 'sudo systemctl stop omega'
                                                        stdin, stdout, stderr = ssh.exec_command(stop_command)
                                                        stdout = stdout.readlines()
                                                        ssh.close()
                                                        output = ''
                                                        for line in stdout:
                                                            output = output + line
                                                        print(output)
                                                    num = 0
                                                    window_confirm.close()
                                                    hard_stop = True
                                                    break
                                                if ev_confirm == sg.WIN_CLOSED or ev_confirm == 'Exit':
                                                    f_br = True
                                                    break
                                                if ev_confirm == 'noExit':
                                                    window_confirm.close()
                                                    f_br = True
                                                    break
                                        else:
                                            break
                                    if f_br:
                                        break
                                    num += 1
                                else:
                                    logging.warning(f'Сервер остановлен администратором')
                                    my_popup('Сервер остановлен')
                                    window['-StatusBar-'].update('Сервер не запущен', background_color=button_color_2)
                                    window['-StatusBar2-'].update('', background_color=button_color_2)
                                    window['-StatusBar3-'].update('', background_color=button_color_2)
                                    window['-Start-'].update(disabled=False)
                                    window['-Stop-'].update(disabled=True)
                                    window['-users-'].update([[]])
                                    window['-groups2-'].update([[]])
                                    clear_treedata = sg.TreeData()
                                    window['-TREE-'].update(clear_treedata)
                                    window['-TREE2-'].update(clear_treedata)
                                    set_buttons_disabled()
                                    window['Apply'].update(disabled=True)
                                    window['Apply2'].update(disabled=True)
                                    window['-Menu-'].update([
                                        ['Сервер',
                                         ['Установить лицензию...', '!Настройки', 'Очистка БД',
                                          ['Частично', 'Полностью']]],
                                        ['Помощь', 'О программе'], ])
                                    server_status['run'] = False
                                    update_free_space({'freeSpace': 0, 'spaceTotal': 1})
                                    window['online-users'].update('')
                                    break
                            additional_window = False
                        if event == 'Tabs':
                            if values['Tabs'] == 'Tab3':
                                output_text = get_logs()
                                window['journal'].update(output_text[0])
                                count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                                window['countLogs'].update(count_string)
                        if event == 'info':
                            if filter_journal_info:
                                filter_journal_info = False
                            else:
                                filter_journal_info = True
                            output_text = get_logs()
                            window['journal'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogs'].update(count_string)
                        if event == 'warning':
                            if filter_journal_warning:
                                filter_journal_warning = False
                            else:
                                filter_journal_warning = True
                            output_text = get_logs()
                            window['journal'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogs'].update(count_string)
                        if event == 'error':
                            if filter_journal_error:
                                filter_journal_error = False
                            else:
                                filter_journal_error = True
                            output_text = get_logs()
                            window['journal'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogs'].update(count_string)
                        if event == 'critical':
                            if filter_journal_critical:
                                filter_journal_critical = False
                            else:
                                filter_journal_critical = True
                            output_text = get_logs()
                            window['journal'].update(output_text[0])
                            count_string = str(output_text[1]) + ' из ' + str(output_text[2])
                            window['countLogs'].update(count_string)
                        if event == 'info_server':
                            if filter_journal_info_server:
                                filter_journal_info_server = False
                            else:
                                filter_journal_info_server = True
                            output_text_server = filter_logs_server()
                            window['journalServer'].update(output_text_server[0])
                            count_string = str(output_text_server[1]) + ' из ' + str(output_text_server[2])
                            window['countLogsServer'].update(count_string)
                        if event == 'warning_server':
                            if filter_journal_warn_server:
                                filter_journal_warn_server = False
                            else:
                                filter_journal_warn_server = True
                            output_text_server = filter_logs_server()
                            window['journalServer'].update(output_text_server[0])
                            count_string = str(output_text_server[1]) + ' из ' + str(output_text_server[2])
                            window['countLogsServer'].update(count_string)
                        if event == 'fail_server':
                            if filter_journal_fail_server:
                                filter_journal_fail_server = False
                            else:
                                filter_journal_fail_server = True
                            output_text_server = filter_logs_server()
                            window['journalServer'].update(output_text_server[0])
                            count_string = str(output_text_server[1]) + ' из ' + str(output_text_server[2])
                            window['countLogsServer'].update(count_string)
                        if event == '-checkAllGroups-':
                            if not values['-users-']:
                                my_popup('Не выбран пользователь')
                                window['-checkAllGroups-'].update(False)
                            else:
                                if filter_status:
                                    # noinspection PyTypeChecker
                                    user_id = filtered_users_list_of_dict[values['-users-'][0]]['id']
                                else:
                                    user_id = users_from_db[values['-users-'][0]]['id']
                                all_group_ids = []
                                for group_from_all in groups_from_db:
                                    all_group_ids.append(group_from_all['id'])
                                tree.metadata = []
                                if values['-checkAllGroups-']:
                                    for group_id_for_tree in all_group_ids:
                                        tree.metadata.append(group_id_for_tree)
                                        tree.update(key=group_id_for_tree, icon=check[1])
                                else:
                                    for group_id_for_tree in all_group_ids:
                                        tree.update(key=group_id_for_tree, icon=check[0])
                                window['Apply'].update(disabled=False)
                        if event == '-checkAllUsers-':
                            if not values['-groups2-']:
                                my_popup('Не выбрана группа')
                                window['-checkAllUsers-'].update(False)
                            else:
                                if filter_status:
                                    # noinspection PyTypeChecker
                                    group_id = filtered_groups_list_of_dict[values['-groups2-'][0]]['id']
                                else:
                                    group_id = groups_from_db[values['-groups2-'][0]]['id']
                                all_user_ids = []
                                for user_from_all in users_from_db:
                                    all_user_ids.append(user_from_all['id'])
                                tree2.metadata = []
                                if values['-checkAllUsers-']:
                                    for user_id_for_tree in all_user_ids:
                                        tree2.metadata.append(user_id_for_tree)
                                        tree2.update(key=user_id_for_tree, icon=check[1])
                                else:
                                    for user_id_for_tree in all_user_ids:
                                        tree2.update(key=user_id_for_tree, icon=check[0])
                                window['Apply2'].update(disabled=False)
                        if event == '-dropDB-' or event == 'Полностью':
                            additional_window = True
                            window_confirm = make_confirm_window('Вы уверены, что хотите удалить всю БД и все файлы?')
                            while True:
                                ev_confirm, val_confirm = window_confirm.Read()
                                if ev_confirm == 'okExit':
                                    try:
                                        res_drop_db = requests.get(BASE_URL + 'drop',
                                                                   headers=HEADER_dict)
                                        if res_drop_db.status_code == 200:
                                            logging.info('Удаляем всю БД и все данные')
                                            logging.info('Стоп лога')
                                        else:
                                            logging.info('Проблема с удалением БД!')
                                    except Exception as e:
                                        print(f'Не удалось удалить данные - {e}')
                                        logging.error("Не удалось удалить данные")
                                    window_confirm.close()
                                if ev_confirm == sg.WIN_CLOSED or ev_confirm == 'Exit':
                                    print('Закрыл окно выхода')
                                    break
                                if ev_confirm == 'noExit':
                                    print('Закрыл окно выхода')
                                    window_confirm.close()
                                    break
                            additional_window = False
                        if event == '-partially-dropDB-' or event == 'Частично':
                            additional_window = True
                            window_confirm = make_confirm_window('Вы уверены, что хотите удалить '
                                                                 'все данные, кроме абонентов и групп?')
                            while True:
                                ev_confirm, val_confirm = window_confirm.Read()
                                if ev_confirm == 'okExit':
                                    try:
                                        res_drop_db = requests.get(BASE_URL + 'partiallyDrop',
                                                                   headers=HEADER_dict)
                                        if res_drop_db.status_code == 200:
                                            current_db += 1
                                            logging.info('Удаляем всё, кроме абонентов и групп')
                                            logging.info('Стоп лога')
                                            my_popup('БД частично удалена')
                                        else:
                                            logging.info('Проблема с удалением всего, кроме абонентов и групп!')
                                    except Exception as e:
                                        print(f'Не удалось очистить БД - {e}')
                                        logging.error("Не удалось очистить БД")
                                    window_confirm.close()
                                if ev_confirm == sg.WIN_CLOSED or ev_confirm == 'Exit':
                                    print('Закрыл окно выхода')
                                    break
                                if ev_confirm == 'noExit':
                                    print('Закрыл окно выхода')
                                    window_confirm.close()
                                    break
                            additional_window = False
    window_login.close()

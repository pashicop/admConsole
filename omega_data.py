import requests
import json
import sqlite3
import logging
from main import my_popup, check
import PySimpleGUI as sg


SYMBOL_X_SMALL = '✗'
ICON_FOLDER = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsSAAALEgHS3X78AAABnUlEQVQ4y8WSv2rUQRSFv7vZgJFFsQg2EkWb4AvEJ8hqKVilSmFn3iNvIAp21oIW9haihBRKiqwElMVsIJjNrprsOr/5dyzml3UhEQIWHhjmcpn7zblw4B9lJ8Xag9mlmQb3AJzX3tOX8Tngzg349q7t5xcfzpKGhOFHnjx+9qLTzW8wsmFTL2Gzk7Y2O/k9kCbtwUZbV+Zvo8Md3PALrjoiqsKSR9ljpAJpwOsNtlfXfRvoNU8Arr/NsVo0ry5z4dZN5hoGqEzYDChBOoKwS/vSq0XW3y5NAI/uN1cvLqzQur4MCpBGEEd1PQDfQ74HYR+LfeQOAOYAmgAmbly+dgfid5CHPIKqC74L8RDyGPIYy7+QQjFWa7ICsQ8SpB/IfcJSDVMAJUwJkYDMNOEPIBxA/gnuMyYPijXAI3lMse7FGnIKsIuqrxgRSeXOoYZUCI8pIKW/OHA7kD2YYcpAKgM5ABXk4qSsdJaDOMCsgTIYAlL5TQFTyUIZDmev0N/bnwqnylEBQS45UKnHx/lUlFvA3fo+jwR8ALb47/oNma38cuqiJ9AAAAAASUVORK5CYII='
ICON_DISPATCHER5_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHlWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDI0LTA0LTE1VDE2OjQ5OjM4KzAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI0LTA0LTE2VDExOjIxOjI1KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNC0wNC0xNlQxMToyMToyNSswMzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6M2RkMjc3MmQtMzA0OS0xMzQ0LWEwYzQtODc2ZjA5OTlhYTU1IiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6YTVjYzZlNzUtMWI1My0wOTRhLWI2OWYtNDgwMGUxNDVjNzE0IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YWE1ODJjM2ItZTY1ZS1lODQzLWEwMTctNzk2MmZiM2FiZDRlIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIxIiBwaG90b3Nob3A6SUNDUHJvZmlsZT0iRG90IEdhaW4gMjUlIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphYTU4MmMzYi1lNjVlLWU4NDMtYTAxNy03OTYyZmIzYWJkNGUiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTVUMTY6NDk6MzgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NTJkNmM4MjQtMzUwMy0yYjRkLTgwOGUtZTFkYTQ2YzdkZjMzIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE2OjU4OjEyKzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjNkZDI3NzJkLTMwNDktMTM0NC1hMGM0LTg3NmYwOTk5YWE1NSIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxMToyMToyNSswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8cGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8cmRmOkJhZz4gPHJkZjpsaT5hZG9iZTpkb2NpZDpwaG90b3Nob3A6MDIyZjExMTQtZDI0Yi01YTQ2LTgzMGYtY2FiY2NlY2MyMThmPC9yZGY6bGk+IDxyZGY6bGk+eG1wLmRpZDphYTU4MmMzYi1lNjVlLWU4NDMtYTAxNy03OTYyZmIzYWJkNGU8L3JkZjpsaT4gPC9yZGY6QmFnPiA8L3Bob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7/QLZEAAAAXUlEQVQokZWSQRLAIAgDE4f/f5meLMWAWm5K3ARGOu5qXOpgALdQ5yuMg1ZAxrygZ/LqY9lgmzHeT3mVuiGqQ0GstyBEep1XFt6NZb1ZrkWTp5dOT/xmP7sC+PF7HrUXHileph67AAAAAElFTkSuQmCC'
ICON_DISPATCHER5_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHlWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDI0LTA0LTE1VDE2OjQ5OjM4KzAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI0LTA0LTE2VDExOjIyOjE4KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNC0wNC0xNlQxMToyMjoxOCswMzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6YTg2NTI3YWItYWNhNS03NTRlLWIwOWMtZDQ1M2FmNGQ0MWI4IiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6NGI1ZTliNWMtNmU4MC0yYjRmLTk2NDUtZWQ4YmU3NmQxODU4IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YWE1ODJjM2ItZTY1ZS1lODQzLWEwMTctNzk2MmZiM2FiZDRlIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIxIiBwaG90b3Nob3A6SUNDUHJvZmlsZT0iRG90IEdhaW4gMjUlIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphYTU4MmMzYi1lNjVlLWU4NDMtYTAxNy03OTYyZmIzYWJkNGUiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTVUMTY6NDk6MzgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NTJkNmM4MjQtMzUwMy0yYjRkLTgwOGUtZTFkYTQ2YzdkZjMzIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE2OjU4OjEyKzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmE4NjUyN2FiLWFjYTUtNzU0ZS1iMDljLWQ0NTNhZjRkNDFiOCIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxMToyMjoxOCswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8cGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8cmRmOkJhZz4gPHJkZjpsaT5hZG9iZTpkb2NpZDpwaG90b3Nob3A6MDIyZjExMTQtZDI0Yi01YTQ2LTgzMGYtY2FiY2NlY2MyMThmPC9yZGY6bGk+IDxyZGY6bGk+eG1wLmRpZDphYTU4MmMzYi1lNjVlLWU4NDMtYTAxNy03OTYyZmIzYWJkNGU8L3JkZjpsaT4gPC9yZGY6QmFnPiA8L3Bob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5GyJ8IAAAAXUlEQVQoka2SOxLAIAhEF8c7ef8yp1o71LAQi9jBPB6f0Yi71y45dOAppcMcBGAp55LmCYIa2Y2V8wXywMXUmTF0UEZ5hWiknjcePFmr580iuDvO7T+NK/YS+/33TMfVEi+1sMEeAAAAAElFTkSuQmCC'
ICON_ADMIN_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAF7GlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDI0LTA0LTE1VDE3OjU3OjE4KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNC0wNC0xNVQxODowMTowOSswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNC0wNC0xNVQxODowMTowOSswMzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjEiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJEb3QgR2FpbiAyNSUiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NGYxMTQ1NjgtNDVjNi1iYzRkLWI1NDQtNjQ5OGY5M2Y3MTQ5IiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6MWU5NmM4MTEtNTM1Mi04ODQyLWE1ZTItYWJkZTkxNmEzOTdjIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MTUzNWI5ZWYtNmI0MS0xNDRlLTlmYmUtMzBjM2ZjZDhlZWViIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDoxNTM1YjllZi02YjQxLTE0NGUtOWZiZS0zMGMzZmNkOGVlZWIiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTVUMTc6NTc6MTgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NGYxMTQ1NjgtNDVjNi1iYzRkLWI1NDQtNjQ5OGY5M2Y3MTQ5IiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE4OjAxOjA5KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+CXpKCwAAAGxJREFUKJGNUkEOACAICuf/v2yHMk1sy5MBkVGwEYW9MAwqqRIXwRohrBKMyAIMmWBk905Uz4zJa/iKKtkfyVq5XO+dMVkWn6N/Sl8ONUft5ukuIyGrRU+wEgtP7+4kJcgAGUmB83w3gt9vNgGRr0IhIPi9dwAAAABJRU5ErkJggg=='
ICON_ADMIN_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGuWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDI0LTA0LTE1VDE3OjU3OjE4KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNC0wNC0xNlQxODowNDoyMiswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNC0wNC0xNlQxODowNDoyMiswMzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjEiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJEb3QgR2FpbiAyNSUiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NzJlODQ3ZGUtMWE3MS03NDQ4LTkyYzMtYmUwYjMyZjg1MjJkIiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6YzdjZWY2MDQtMDAxMy0zZDQyLTkyOTAtNjMyMGU3ZmFkMWI3IiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MTUzNWI5ZWYtNmI0MS0xNDRlLTlmYmUtMzBjM2ZjZDhlZWViIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDoxNTM1YjllZi02YjQxLTE0NGUtOWZiZS0zMGMzZmNkOGVlZWIiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTVUMTc6NTc6MTgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NGYxMTQ1NjgtNDVjNi1iYzRkLWI1NDQtNjQ5OGY5M2Y3MTQ5IiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE4OjAxOjA5KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjcyZTg0N2RlLTFhNzEtNzQ0OC05MmMzLWJlMGIzMmY4NTIyZCIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxODowNDoyMiswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pr5wm3oAAABzSURBVCiRjVBBDsAwCILGP+3/t/3KXdoNtE3mxQYRKbwhlbPzg67ZR6OwIEbMNmjImABt0BEEACKR4otGttMCSBka5sR/nUqPsslCeGUGflacFGqOsfNjTu102d5prtMUzfWydIcMPfJj4N1fCdyNp1GlHvNzIi7KO75jAAAAAElFTkSuQmCC'
ICON_GW5_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHSWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDI0LTA0LTE1VDE2OjQ5OjM4KzAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI0LTA0LTE2VDExOjMzOjU2KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyNC0wNC0xNlQxMTozMzo1NiswMzowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6OWIxNWMzOTgtOGQyYS0yNjQyLWE5N2YtOGFmYjI1NWVhZmU0IiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6ODZhMzdlNzItNjcxOS03MjQ5LWJkMWItYjJhOGI4Njc1ZDJlIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6YWE1ODJjM2ItZTY1ZS1lODQzLWEwMTctNzk2MmZiM2FiZDRlIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIxIiBwaG90b3Nob3A6SUNDUHJvZmlsZT0iRG90IEdhaW4gMjUlIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphYTU4MmMzYi1lNjVlLWU4NDMtYTAxNy03OTYyZmIzYWJkNGUiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTVUMTY6NDk6MzgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NTJkNmM4MjQtMzUwMy0yYjRkLTgwOGUtZTFkYTQ2YzdkZjMzIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE2OjU4OjEyKzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjliMTVjMzk4LThkMmEtMjY0Mi1hOTdmLThhZmIyNTVlYWZlNCIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxMTozMzo1NiswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8cGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8cmRmOkJhZz4gPHJkZjpsaT54bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZTwvcmRmOmxpPiA8L3JkZjpCYWc+IDwvcGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PoPz/YQAAABaSURBVCiRrVJBDsAgCKOG/3+5HoxxHagsWS8ELE1tAK2GVuTlRFDrlkiAZiARlxPVJ+2DR9j120O5rOhzYzqL/UDTdj2DOvXlQl29Zx7d5In5IUpBPcffr6cD6dMaIZAQIcAAAAAASUVORK5CYII='
ICON_GW5_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAMemlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0wNC0xNVQxNjo0OTozOCswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNC0wNC0xNlQxODowMToxMiswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMDQtMTZUMTg6MDE6MTIrMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjRkOTQ4MmJkLWE3MzMtZDU0Mi1iZjcwLTA1NTM2MzkxZDBmNSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmJhMzkzOWQ5LTJhZWUtOWE0OC1iMjc3LWZkNGU1Mzg0MTc5YiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZSIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMSIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9IkRvdCBHYWluIDI1JSI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YWE1ODJjM2ItZTY1ZS1lODQzLWEwMTctNzk2MmZiM2FiZDRlIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE2OjQ5OjM4KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjUyZDZjODI0LTM1MDMtMmI0ZC04MDhlLWUxZGE0NmM3ZGYzMyIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNVQxNjo1ODoxMiswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo2NDQzYWZlOC0yNGZmLTg4NDItYWE1Yi02N2M1Y2I5OTFkOGMiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTZUMTE6MzQ6NTYrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGltYWdlL3BuZyB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBpbWFnZS9wbmcgdG8gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NmU3ODdkNTctMmRiYS00OTQ2LWIyM2QtNWRiYTBmM2JhNjU4IiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE2VDExOjM0OjU2KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjZmZTA1N2JlLTMyMWYtMTc0ZS04ZGM1LTc0ZjU0ZWI4YmRjNCIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxODowMToxMiswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo0ZDk0ODJiZC1hNzMzLWQ1NDItYmY3MC0wNTUzNjM5MWQwZjUiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTZUMTg6MDE6MTIrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NmZlMDU3YmUtMzIxZi0xNzRlLThkYzUtNzRmNTRlYjhiZGM0IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjZlNzg3ZDU3LTJkYmEtNDk0Ni1iMjNkLTVkYmEwZjNiYTY1OCIgc3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZSIvPiA8cGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8cmRmOkJhZz4gPHJkZjpsaT54bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZTwvcmRmOmxpPiA8L3JkZjpCYWc+IDwvcGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Ptnf9I4AAABgSURBVCiRrZJLDoAwCEQfhjt5/52calxpf9S0ibMDJvNJMLGGY5GXE0MBBFHZ2ZULCEMYwPlp/dK2Mzrz2s/FNhVpsiiZKYq9vQC1Wy8pKti48yROWs9nhx7Lre3377kB27QVRIFFa7IAAAAASUVORK5CYII='
ICON_RADIO5_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAMemlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0wNC0xNVQxNjo0OTozOCswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNC0wNC0xNlQxODowMDoyNSswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMDQtMTZUMTg6MDA6MjUrMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmM1OGI5OTliLTY5YTQtMTk0OC05MjkxLTI4NzZhNWZmYmFmNSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmZhMTA4MmRjLWMyODQtYzM0OS04NjRkLTQ3ZWEyNDkwMWU5YiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZSIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMSIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9IkRvdCBHYWluIDI1JSI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YWE1ODJjM2ItZTY1ZS1lODQzLWEwMTctNzk2MmZiM2FiZDRlIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE2OjQ5OjM4KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjBmNjg2OThjLWQ0ZTAtMjQ0Yy1hOGRjLTgyMzI4Yzc1ZDg5ZiIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNVQxNjo1MzoxNyswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDozYzkzMTIyOS0wMDIyLTkzNDktYTllOC0yNzEyOTg4MmM2YjQiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTZUMTE6MjQ6MjgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGltYWdlL3BuZyB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBpbWFnZS9wbmcgdG8gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZmQ5Yzk5ZTMtZTgxYi02NDQzLTk0NmUtNTZjNDc5OWZjMGNmIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE2VDExOjI0OjI4KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjUzY2Y4YTQ0LWQzYjYtOTA0NS04NjdlLTY3NzI1ZjRkMmIwOSIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxODowMDoyNSswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNThiOTk5Yi02OWE0LTE5NDgtOTI5MS0yODc2YTVmZmJhZjUiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTZUMTg6MDA6MjUrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NTNjZjhhNDQtZDNiNi05MDQ1LTg2N2UtNjc3MjVmNGQyYjA5IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOmZkOWM5OWUzLWU4MWItNjQ0My05NDZlLTU2YzQ3OTlmYzBjZiIgc3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZSIvPiA8cGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8cmRmOkJhZz4gPHJkZjpsaT54bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZTwvcmRmOmxpPiA8L3JkZjpCYWc+IDwvcGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PgFN2P0AAABQSURBVCiRtZDRCkAhCEO36P9/2R66lZAtutGBwFQ2Jg0VAgZ+H7TuIE2dBdGiBYLIbhw5nltnV/cokfJVmK21iPLTmu7JRYO45ltFCeVNHAWkphAeUJWaZAAAAABJRU5ErkJggg=='
ICON_RADIO5_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAQAAAC8EZeQAAAACXBIWXMAAAsTAAALEwEAmpwYAAAMbmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDggNzkuMTY0MDM2LCAyMDE5LzA4LzEzLTAxOjA2OjU3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNC0wNC0xNVQxNjo0OTozOCswMzowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyNC0wNC0xNlQxODowMCswMzowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjQtMDQtMTZUMTg6MDArMDM6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjRlOWI3Y2MyLTE1YjEtNGI0OC1hNzU0LThjNDQ1MGVlOWY2ZSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmZkNWRlZmUzLWE3NjItZDM0My1hMjJhLTIxYTkxMzFmZTBjYSIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZSIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMSIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9IkRvdCBHYWluIDI1JSI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YWE1ODJjM2ItZTY1ZS1lODQzLWEwMTctNzk2MmZiM2FiZDRlIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE1VDE2OjQ5OjM4KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjBmNjg2OThjLWQ0ZTAtMjQ0Yy1hOGRjLTgyMzI4Yzc1ZDg5ZiIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNVQxNjo1MzoxNyswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDozYzkzMTIyOS0wMDIyLTkzNDktYTllOC0yNzEyOTg4MmM2YjQiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTZUMTE6MjQ6MjgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGltYWdlL3BuZyB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBpbWFnZS9wbmcgdG8gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZmQ5Yzk5ZTMtZTgxYi02NDQzLTk0NmUtNTZjNDc5OWZjMGNmIiBzdEV2dDp3aGVuPSIyMDI0LTA0LTE2VDExOjI0OjI4KzAzOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjlmNDNjOTI2LTU5NTUtNzQ0My04NjQ3LTUwMmI0YzU2MzBmMiIgc3RFdnQ6d2hlbj0iMjAyNC0wNC0xNlQxODowMCswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjb252ZXJ0ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImRlcml2ZWQiIHN0RXZ0OnBhcmFtZXRlcnM9ImNvbnZlcnRlZCBmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo0ZTliN2NjMi0xNWIxLTRiNDgtYTc1NC04YzQ0NTBlZTlmNmUiIHN0RXZ0OndoZW49IjIwMjQtMDQtMTZUMTg6MDArMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6OWY0M2M5MjYtNTk1NS03NDQzLTg2NDctNTAyYjRjNTYzMGYyIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOmZkOWM5OWUzLWU4MWItNjQ0My05NDZlLTU2YzQ3OTlmYzBjZiIgc3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZSIvPiA8cGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8cmRmOkJhZz4gPHJkZjpsaT54bXAuZGlkOmFhNTgyYzNiLWU2NWUtZTg0My1hMDE3LTc5NjJmYjNhYmQ0ZTwvcmRmOmxpPiA8L3JkZjpCYWc+IDwvcGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PpMLSxEAAABTSURBVCiRY/zPAAEnGRj+MzBCOQzmDOiACUMEB8Cm8D/Df0xBFiRpBmwKSLaaBYkN9wo2kynyDEGr8XiFTKsZkTBehf8Z8IQmbU3ECxjxhgkSAACvlhAe3wPfBwAAAABJRU5ErkJggg=='
# ICON_GROUP_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAEuSURBVDiN5dLPK+VhFAbwz5drhFjdUWwUGz/KTqTZMAsNC2RhYWvHxs6CkhK2VpSmqalZiZqdZG/IjvJjgYU/QH6VhMX33Lrp3vsPzLN533Oep+ec95w3URwz+IoMDrFVQgsa0Rn3fozkcbPBV2AYXTmiPM4fGMQXjKEGe3gIvhp1mMIR2tGGk7IQ9GIJf6LlPUwiCdMhHOMZB/iFDiGGS4zjIqqdYz9M37CGxzAcRQv+iUQO39GKzXCfiIpQhd+4xjTOsI23JMg5vOAO36KThciJZ6wiGwWy6MMizKMpT7ihMBKsSzcBtVguQyVuItmDnSIG7/iL7ojv8Zr5NIcGnBYxgFvpunOzqc/gCiuRaJH+jaciBm3S/9Ac8c/kkyCDAekqC+EJu3gt0eV/hw//0zcb5BjnMQAAAABJRU5ErkJggg=='
# ICON_GROUP_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAEESURBVDiN7dLbSsNgEATgLzHaikWLp6JWEUQEFXohvv9DeAARi6JiwQO0pd60Wi+ygRBon8C5yZ+Z+XdnN0nMxgnqSPCJ5zlesIxmnFtol7TT0NPg1wthIZ472A3DATL0MCn5lnCML6xhFf00DFu4wVNE7uEotBR7cfEHH+hGEVmYhtF5GNwginQwxV0pTRuN2IukNGcrYj1E9cPoWIzwiFGMMcALpkmIZ/jFGPt4x1VwxRgXWMEtatHwGs5DKIyXZuMyPLCIThrEKMjNiDYLr9iI8xjTrGKooz+nwLd82cVuall07wSxjfuSoYqmfP5GvHeTiiGR/1TVZAUmeJN/2n8E/gA2RTPEVlwNRgAAAABJRU5ErkJggg=='
# ICON_GROUP_ALARM_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAFHSURBVDiN5dG/S9dxEAbw19nXJKEmC2oJEqIIGoIowkWFIoN+TA6tjS1tDQURSLU6FUQIQS5m0CbhroJjUDpYQ7S4RKQV4jV872vfwU//QDe9757n/dxzd6Ehkjs4iBaWgpkmbufDkeR0vUeS613Y3cJ7k2vJ2Q4WRbiMM1jDcazjdfC18Iv4iavaTk7gVzDdU0IXgongVVl+h1tJJHtxBcvYDBaCKZxSZFhNxrGC/uBjMo8JbGMy+FGCNzCIxZ0RyuZoWXte6jexWfA+vMQn3MYHzAbbkW3wHn7jG4bKyYNo19QYTzBQDQYwjIeS+8nRDjF51nClSJ4mvZXvTx71oC/4XLzzeLObQJB4i3OVf8dWq3sPOIz3uwlUfMFY/t3NoRbWksdVGMSeZKNB4CQO4FjlL7q7y/ZZL6G/QWADc8HWP1z+d/EHoCBb63p/n7EAAAAASUVORK5CYII='
# ICON_GROUP_ALARM_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAEZSURBVDiN7dHbSpxRDAXgL78DIp6ttoq1QkFEBS/E938KmZsith7QUqyIiBQd48XOtIM4PkHX1c5eyUpWEsYg2cYkAr+Ds3G5w4KpZKHen5L1EW6n+C5ZT5aGXFTCGhZxj1n8wXnwUPwqBproGeYwCE67EloO+sGPEr3C1yrutAY3VXQdnGAeeiVwl3zBHSaixT+T/abhW/CULfiMGVz/tTD0XaMdl/pmjQ0T+F4Wt6rReZCRjdzFMx6xgV84ivY3tHGAafTrOh/Rl+xlI9SWD9+51GGJSXrJfocu2mjwARfjBIpbKu9PyN6rhCncviPwgI38t5vJHu5r27CC45GE15jX/M9UfBKjbLarrGmLfQsDXEY77X8UXgDS3lhF3Vq1dAAAAABJRU5ErkJggg=='
ICON_GROUP_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAYAAAAWGF8bAAAAAXNSR0IArs4c6QAAAHFJREFUOE/llEkKACAMA/X/j1YUKmlsXbA3Pbk0E7pgTsErB/PSDljIcBevgCgWYbvz9uKlTPAg4hWE4RjbDRjIrl7KVjYTEMvFIO6dW0tM4VRkmQ0Dq+ANPNUG3PhNnT8HhjaFYTdNUVpvnp7nMOzTqddhJhHD7MjLAAAAAElFTkSuQmCC'
ICON_GROUP_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAYAAAAWGF8bAAABN2lDQ1BBZG9iZSBSR0IgKDE5OTgpAAAokZWPv0rDUBSHvxtFxaFWCOLgcCdRUGzVwYxJW4ogWKtDkq1JQ5ViEm6uf/oQjm4dXNx9AidHwUHxCXwDxamDQ4QMBYvf9J3fORzOAaNi152GUYbzWKt205Gu58vZF2aYAoBOmKV2q3UAECdxxBjf7wiA10277jTG+38yH6ZKAyNguxtlIYgK0L/SqQYxBMygn2oQD4CpTto1EE9AqZf7G1AKcv8ASsr1fBBfgNlzPR+MOcAMcl8BTB1da4Bakg7UWe9Uy6plWdLuJkEkjweZjs4zuR+HiUoT1dFRF8jvA2AxH2w3HblWtay99X/+PRHX82Vun0cIQCw9F1lBeKEuf1UYO5PrYsdwGQ7vYXpUZLs3cLcBC7dFtlqF8hY8Dn8AwMZP/fNTP8gAAAAJcEhZcwAACxMAAAsTAQCanBgAAAXCaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0OCA3OS4xNjQwMzYsIDIwMTkvMDgvMTMtMDE6MDY6NTcgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjQtMDUtMDhUMTQ6MDcrMDM6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDI0LTA1LTA4VDE0OjM0OjQwKzAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI0LTA1LTA4VDE0OjM0OjQwKzAzOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpjZjBhMmM4ZC1hM2ZiLTc2NDUtODgzZS04YTZkYmQ0ZmEyYzQiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDplNGY5N2U1Mi1lZThhLTk0NGYtYjI0Yi02NTg5MjAwNTJkY2MiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDoxMDJmZDEwZS0yNzNmLTg3NGEtODBiYi1jM2NjNTRmZTEyN2YiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjEwMmZkMTBlLTI3M2YtODc0YS04MGJiLWMzY2M1NGZlMTI3ZiIgc3RFdnQ6d2hlbj0iMjAyNC0wNS0wOFQxNDowNyswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjZjBhMmM4ZC1hM2ZiLTc2NDUtODgzZS04YTZkYmQ0ZmEyYzQiIHN0RXZ0OndoZW49IjIwMjQtMDUtMDhUMTQ6MzQ6NDArMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6AGvszAAAAd0lEQVQ4jc2UUQrAIAxDX4cH382zr8k2mymsHwsI2oTY1mJIohJbqRvQACLC8fvkDMC1ymbE2X7GA2PJaQYGqbYtiNwlaTwkZT10Jil/7eFp+CkzST228igz05u2fA7/b+h6OIPXms/hzXzgJPX1HOxVU4uo/r4OIzYvD1hjctwAAAAASUVORK5CYII='
ICON_GROUP_ALARM_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAYAAAAWGF8bAAABN2lDQ1BBZG9iZSBSR0IgKDE5OTgpAAAokZWPv0rDUBSHvxtFxaFWCOLgcCdRUGzVwYxJW4ogWKtDkq1JQ5ViEm6uf/oQjm4dXNx9AidHwUHxCXwDxamDQ4QMBYvf9J3fORzOAaNi152GUYbzWKt205Gu58vZF2aYAoBOmKV2q3UAECdxxBjf7wiA10277jTG+38yH6ZKAyNguxtlIYgK0L/SqQYxBMygn2oQD4CpTto1EE9AqZf7G1AKcv8ASsr1fBBfgNlzPR+MOcAMcl8BTB1da4Bakg7UWe9Uy6plWdLuJkEkjweZjs4zuR+HiUoT1dFRF8jvA2AxH2w3HblWtay99X/+PRHX82Vun0cIQCw9F1lBeKEuf1UYO5PrYsdwGQ7vYXpUZLs3cLcBC7dFtlqF8hY8Dn8AwMZP/fNTP8gAAAAJcEhZcwAACxMAAAsTAQCanBgAAAXCaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0OCA3OS4xNjQwMzYsIDIwMTkvMDgvMTMtMDE6MDY6NTcgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjQtMDUtMDhUMTQ6MDcrMDM6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDI0LTA1LTA4VDE0OjMyOjQ0KzAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI0LTA1LTA4VDE0OjMyOjQ0KzAzOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo4YjA3NzQ4ZS1iYjcwLThmNDktOTc0YS04ZDJjNjhlNWYxZGMiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo1M2IwNjhlMS0zMmJiLTM3NGItYjc1Zi0zNTFkOTU4NTI2NmQiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZGQyZWFjYi03ZjMwLTBlNGUtOGU5MS01ODdhMzE5ZWM3ZTUiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjZkZDJlYWNiLTdmMzAtMGU0ZS04ZTkxLTU4N2EzMTllYzdlNSIgc3RFdnQ6d2hlbj0iMjAyNC0wNS0wOFQxNDowNyswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo4YjA3NzQ4ZS1iYjcwLThmNDktOTc0YS04ZDJjNjhlNWYxZGMiIHN0RXZ0OndoZW49IjIwMjQtMDUtMDhUMTQ6MzI6NDQrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6NWkvtAAAAcklEQVQ4jc1USQ7AQAjCxv9/2Z7aGAu1Jh7KaRYGMZixiMAmjlU1AA4AMFP31T4npi5dPDayjg/cR8vSKgHletmzhFRq9DwL5oqdiOzECzFDPQrCv7lThy13fQ7/L6gGu4PkXoI10UkoVHDk4rXS9vd1AonCGieXjNioAAAAAElFTkSuQmCC'
ICON_GROUP_ALARM_BLOCK_BASE64 = b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAQCAYAAAAWGF8bAAABN2lDQ1BBZG9iZSBSR0IgKDE5OTgpAAAokZWPv0rDUBSHvxtFxaFWCOLgcCdRUGzVwYxJW4ogWKtDkq1JQ5ViEm6uf/oQjm4dXNx9AidHwUHxCXwDxamDQ4QMBYvf9J3fORzOAaNi152GUYbzWKt205Gu58vZF2aYAoBOmKV2q3UAECdxxBjf7wiA10277jTG+38yH6ZKAyNguxtlIYgK0L/SqQYxBMygn2oQD4CpTto1EE9AqZf7G1AKcv8ASsr1fBBfgNlzPR+MOcAMcl8BTB1da4Bakg7UWe9Uy6plWdLuJkEkjweZjs4zuR+HiUoT1dFRF8jvA2AxH2w3HblWtay99X/+PRHX82Vun0cIQCw9F1lBeKEuf1UYO5PrYsdwGQ7vYXpUZLs3cLcBC7dFtlqF8hY8Dn8AwMZP/fNTP8gAAAAJcEhZcwAACxMAAAsTAQCanBgAAAXCaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0OCA3OS4xNjQwMzYsIDIwMTkvMDgvMTMtMDE6MDY6NTcgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjQtMDUtMDhUMTQ6MDcrMDM6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDI0LTA1LTA4VDE0OjM1OjE4KzAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI0LTA1LTA4VDE0OjM1OjE4KzAzOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpkZmQwZTA2OC01MmVjLTYyNDItODM4Zi05YzUyZjE0ZjYwMTciIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDowNTkxZjljNC03ODA2LTY4NGItYTI1Ni00YjgxOThiZDY2YTQiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo4NmRmYjViMy1jYjJmLWVmNGMtYmVmMC1jNGRmNTQ1MjQzNGIiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjg2ZGZiNWIzLWNiMmYtZWY0Yy1iZWYwLWM0ZGY1NDUyNDM0YiIgc3RFdnQ6d2hlbj0iMjAyNC0wNS0wOFQxNDowNyswMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjAgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpkZmQwZTA2OC01MmVjLTYyNDItODM4Zi05YzUyZjE0ZjYwMTciIHN0RXZ0OndoZW49IjIwMjQtMDUtMDhUMTQ6MzU6MTgrMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4DBcL1AAAAeElEQVQ4jc1UQQrAIAxLhw/359lhTDaXrMJ6WKCgTYhtFYMkKrGVugFoAIAIx/dkf+DSZTNitc54AM+WdQUaUtsWRO4QmQ+SaobORPOXGZ6G3yojR27lUjLTm7b8Hf7f0M0wg9eSBIE5ush5jhwxP+y1Kl4Q1d/XDnOjO/8gcnz3AAAAAElFTkSuQmCC'


# DB funcs
def create_db():
    try:
        with open('adm.db', 'w'):
            print('Файл БД создан')
        con = sqlite3.connect('adm.db')
        cur = con.cursor()
        sql_to_create = """BEGIN TRANSACTION;
                            CREATE TABLE IF NOT EXISTS "Users_in_Groups" (
                                "id"	INTEGER NOT NULL UNIQUE,
                                "user_id"	INTEGER NOT NULL,
                                "group_id"	INTEGER NOT NULL,
                                "is_boss"	INTEGER DEFAULT 0,
                                PRIMARY KEY("id" AUTOINCREMENT),
                                FOREIGN KEY("group_id") REFERENCES "Groups"("id"),
                                FOREIGN KEY("user_id") REFERENCES "Users"("id")
                            );
                            CREATE TABLE IF NOT EXISTS "Users" (
                                "id"	TEXT NOT NULL UNIQUE,
                                "Login"	TEXT NOT NULL,
                                "Password"	TEXT NOT NULL DEFAULT '********',
                                "Display_name"	TEXT NOT NULL,
                                "is_dispatcher"	INTEGER DEFAULT 0,
                                "is_admin"	INTEGER DEFAULT 0,
                                "is_blocked"	INTEGER DEFAULT 0,
                                "is_gw"	INTEGER DEFAULT 0,
                                "previous_type"	INTEGER DEFAULT 0,
                                "role_en_ind"	INTEGER DEFAULT 1,
                                "role_en_ind_mes"	INTEGER DEFAULT 1,
                                "role_en_del_chats" INTEGER DEFAULT 0,
                                "role_en_partial_drop" INTEGER DEFAULT 0,
                                "role_changer" INTEGER DEFAULT 0,
                                "role_screen_shooter" INTEGER DEFAULT 0,
                                "role_amb_caller" INTEGER DEFAULT 0,
                                "role_amb_callee" INTEGER DEFAULT 0,
                                "role_missing_msg_rv" INTEGER DEFAULT 0,
                                "role_allow_LLA" INTEGER DEFAULT 0,
                                "role_allow_LLA_client" INTEGER DEFAULT 0,
                                "role_mfc" INTEGER DEFAULT 0,
                                "fix_device" INTEGER DEFAULT 0,
                                "role_multiple_devices" INTEGER DEFAULT 0,
                                "priority" INTEGER DEFAULT 1,
                                "organization_id" TEXT DEFAULT '',
                                PRIMARY KEY("id"),
                                FOREIGN KEY("organization_id") REFERENCES "Organizations"("id")
                            );
                            CREATE TABLE IF NOT EXISTS "Groups" (
                                "id"	TEXT NOT NULL UNIQUE,
                                "Name"	TEXT NOT NULL,
                                "description"	TEXT DEFAULT NULL,
                                "priority"	INTEGER DEFAULT 0,
                                "is_broadcast"	INTEGER DEFAULT 0,
                                "is_emergency"	INTEGER DEFAULT 0,
                                "is_disabled"	INTEGER DEFAULT 0,
                                "organization_id" TEXT DEFAULT '',
                                PRIMARY KEY("id"),
                                FOREIGN KEY("organization_id") REFERENCES "Organizations"("id")
                            );
                            CREATE TABLE IF NOT EXISTS "Organizations" (
                                "id"	TEXT NOT NULL UNIQUE,
                                "Name"	TEXT NOT NULL UNIQUE,
                                PRIMARY KEY("id")
                            );
                            COMMIT;
                        """
        cur.executescript(sql_to_create)
        con.commit()
        con.close()
    except Exception as e:
        print(f'Не удалось создать БД - {e}')
        logging.error(f'Не удалось создать БД - {e}')
        my_popup(f'Не удалось создать БД - {e}')


def drop_db(table):
    try:
        con = sqlite3.connect('adm.db')
        cur = con.cursor()
        db_delete_groups = "delete from Groups"
        db_delete_users = "delete from Users"
        db_delete_orgs = "delete from Organizations"
        db_delete_users_in_groups = "delete from Users_in_groups"
        db_delete_users_in_groups_seq = "delete from sqlite_sequence where name='Users_in_Groups'"
        if table == 'all':
            cur.execute(db_delete_users)
            cur.execute(db_delete_groups)
            cur.execute(db_delete_orgs)
            cur.execute(db_delete_users_in_groups)
            cur.execute(db_delete_users_in_groups_seq)
        elif table == 'users':
            cur.execute(db_delete_users)
        elif table == 'groups':
            cur.execute(db_delete_groups)
        elif table == 'orgs':
            cur.execute(db_delete_orgs)
        elif table == 'user_in_groups':
            cur.execute(db_delete_users_in_groups)
            cur.execute(db_delete_users_in_groups_seq)
        con.commit()
        con.close()
    except Exception as e:
        print(f'{e}')
        my_popup('Не удалось удалить таблицу БД')


# get from server
def get_users_from_server(url, header) -> list[dict]:
    """
    Get users from server
    :param url:
    :param header:
    :return:
    """
    try:
        res = requests.get(url + 'users', headers=header)
        if res:
            if res.status_code == 200:
                users = json.loads(res.text)
                return users
            else:
                print(f'Не удалось запросить пользователей - {res.status_code}')
                logging.error(f"Не удалось запросить пользователей - {res.status_code}")
                my_popup(f'Не удалось запросить пользователей - {res.status_code}')
                return []
        else:
            print(f'Не удалось запросить пользователей - нет ответа от сервера')
            logging.error("Не удалось запросить пользователей - нет ответа от сервера")
            my_popup('Не удалось запросить пользователей - нет ответа от сервера')
            return []
    except Exception as e:
        print(f'Не удалось запросить пользователей - {e}')
        logging.error("Не удалось запросить пользователей")
        my_popup('Не удалось запросить пользователей')
        return []


def get_groups_from_server(url, header) -> list[dict]:
    try:
        res = requests.get(url + 'groups', headers=header)
        if res:
            if res.status_code == 200:
                groups = json.loads(res.text)
                return groups
            else:
                print(f'Не удалось запросить групп - {res.status_code}')
                logging.error(f"Не удалось запросить групп - {res.status_code}")
                my_popup(f'Не удалось запросить групп - {res.status_code}')
                return []
        else:
            print(f'Не удалось запросить групп - нет ответа от сервера')
            logging.error("Не удалось запросить групп - нет ответа от сервера")
            my_popup('Не удалось запросить групп - нет ответа от сервера')
            return []
    except Exception as e:
        print(f'Не удалось запросить групп - {e}')
        logging.error("Не удалось запросить групп")
        my_popup('Не удалось запросить групп')
        return []


def get_orgs_from_server(url, header) -> list[dict]:
    try:
        res = requests.get(url + '/all', headers=header)
        if res:
            if res.status_code == 200:
                orgs = json.loads(res.text)
                return orgs
                # drop_db('orgs')
                # add_orgs(orgs)
            else:
                print(f'Не удалось запросить организации - {res.status_code}')
                logging.error(f"Не удалось запросить организации - {res.status_code}")
                my_popup(f'Не удалось запросить организации - {res.status_code}')
                return []
        else:
            print(f'Не удалось запросить организации - нет ответа от сервера')
            logging.error("Не удалось запросить организации - нет ответа от сервера")
            my_popup('Не удалось запросить организации - нет ответа от сервера')
            return []
    except Exception as e:
        print(f'Не удалось запросить организации - {e}')
        logging.error("Не удалось запросить организации")
        my_popup('Не удалось запросить организации')
        return []
    # return get_list_orgs(orgs)


# def get_list_orgs(org_list_of_dict: list):
#     org_list_of_list = []
#     if org_list_of_dict:
#         for org in org_list_of_dict:
#             org_list = []
#             org_list.append(org['id'] if org['id'] else '')
#             org_list.append(org['name'] if org['name'] else '')
#             org_list_of_list.append(org_list)
#     return org_list_of_list


# support defs for user
def get_user_dict(user):
    return {'login': user[1],
            'name': user[3],
            'id': user[0],
            'is_dispatcher': user[4],
            'is_admin': user[5],
            'is_blocked': user[6],
            'is_gw': user[7],
            'previous_type': user[8],
            'role_en_ind': user[9],
            'role_en_ind_mes': user[10],
            'role_en_del_chats': user[11],
            'role_en_partial_drop': user[12],
            'role_changer': user[13],
            'role_screen_shooter': user[14],
            'role_amb_caller': user[15],
            'role_amb_callee': user[16],
            'role_missing_msg_rv': user[17],
            'role_allow_LLA': user[18],
            'role_allow_LLA_client': user[19],
            'role_mfc': user[20],
            'fix_device': user[21],
            'role_multiple_devices': user[22],
            'priority': user[23],
            'organization_id': user[24],
            }


def get_group_dict(group):
    return {'name': group[1],
            'id': group[0],
            'desc': group[2],
            'is_emergency': group[5],
            'is_disabled': group[6],
            'organization_id': group[7]
            }


# get from db
# users
def get_users_from_db() -> list[dict]:
    """
    Get users from DB sorted by user login in list[dict]
    Uses in:
    - initial
    - modify_user
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from users')
    users = cur.fetchall()
    users_for_table = list()
    for user in users:
        user_for_table = get_user_dict(user)
        users_for_table.append(user_for_table)
    con.close()
    users_for_table.sort(key=lambda i: i['login'])
    return users_for_table


def get_user_by_id_from_db(user_id) -> dict:
    """
    Get user from DB in dict
    Uses in:
    - users-tree
    - del-user
    - clone-user
    -
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute("select * from users where id='" + user_id + "'")
    user = cur.fetchone()
    user_for_table = get_user_dict(user)
    con.close()
    return user_for_table


def get_user_list_treedata_full() -> (sg.TreeData, sg.TreeData):
    """
    Get user list in treedata for Tab Users and additional users in Tab Groups
    Uses in:
    - building main window
    - update_all()
    :return:
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from users')
    users = cur.fetchall()
    con.close()
    td = sg.TreeData()
    user_treedata = sg.TreeData()
    orgs = get_orgs_from_db()
    for org in orgs:
        td.Insert(parent='', key=org['id'], text=org['name'], values=[], icon=ICON_FOLDER)
    for user in users:
        user_for_td = get_user_dict(user)
        current_icon = ICON_DISPATCHER5_BASE64 if user_for_td['is_dispatcher'] and not user_for_td[
            'is_blocked'] else ICON_DISPATCHER5_BLOCK_BASE64 if user_for_td['is_dispatcher'] and user_for_td[
            'is_blocked'] else ICON_ADMIN_BASE64 if user_for_td['is_admin'] and not user_for_td[
            'is_blocked'] else ICON_ADMIN_BLOCK_BASE64 if user_for_td['is_admin'] and user_for_td[
            'is_blocked'] else ICON_GW5_BASE64 if user_for_td['is_gw'] and not user_for_td[
            'is_blocked'] else ICON_GW5_BLOCK_BASE64 if user_for_td['is_gw'] and user_for_td[
            'is_blocked'] else ICON_RADIO5_BLOCK_BASE64 if user_for_td['is_blocked'] else ICON_RADIO5_BASE64
        td.Insert(parent=user_for_td['organization_id'],
                  key=(user_for_td['id'] + '.' + user_for_td['organization_id']),
                  text=user_for_td['login'],
                  values=[user_for_td['id'],
                          user_for_td['login'],
                          user_for_td['name'],
                          u'\u0020\u0020\u0020\u2713' if user_for_td['is_dispatcher'] else '',
                          u'\u0020\u0020\u0020\u2713' if user_for_td['is_admin'] else '',
                          u'\u0020\u0020\u0020\u2713' if user_for_td['is_gw'] else '',
                          (u'\u0020\u0020\u0020' + SYMBOL_X_SMALL) if user_for_td['is_blocked'] else ''],
                  icon=current_icon
                  )
        if users != [{}]:
            user_treedata.insert('', user_for_td['id'], '',
                                 values=[user_for_td['login'],
                                         user_for_td['name']],
                                 icon=check[0])
    for key, node in td.tree_dict.items():
        children = node.children
        node.children = sorted(children, key=lambda child: child.text)
    for key2, node2 in user_treedata.tree_dict.items():
        children2 = node2.children
        node2.children = sorted(children2, key=lambda child: child.values[0])
    return td, user_treedata


def get_user_list_treedata() -> sg.TreeData:
    """
    Get users with full info in treedata
    Uses in:
    - collapse/expand users in orgs
    :return:
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from users')
    users = cur.fetchall()
    con.close()
    td = sg.TreeData()
    orgs = get_orgs_from_db()
    for org in orgs:
        td.Insert(parent='', key=org['id'], text=org['name'], values=[], icon=ICON_FOLDER)
    for user in users:
        user_for_td = get_user_dict(user)
        current_icon = ICON_DISPATCHER5_BASE64 if user_for_td['is_dispatcher'] and not user_for_td[
            'is_blocked'] else ICON_DISPATCHER5_BLOCK_BASE64 if user_for_td['is_dispatcher'] and user_for_td[
            'is_blocked'] else ICON_ADMIN_BASE64 if user_for_td['is_admin'] and not user_for_td[
            'is_blocked'] else ICON_ADMIN_BLOCK_BASE64 if user_for_td['is_admin'] and user_for_td[
            'is_blocked'] else ICON_GW5_BASE64 if user_for_td['is_gw'] and not user_for_td[
            'is_blocked'] else ICON_GW5_BLOCK_BASE64 if user_for_td['is_gw'] and user_for_td[
            'is_blocked'] else ICON_RADIO5_BLOCK_BASE64 if user_for_td['is_blocked'] else ICON_RADIO5_BASE64
        td.Insert(parent=user_for_td['organization_id'],
                  key=(user_for_td['id'] + '.' + user_for_td['organization_id']),
                  text=user_for_td['login'],
                  values=[user_for_td['id'],
                          user_for_td['login'],
                          user_for_td['name'],
                          u'\u0020\u0020\u0020\u2713' if user_for_td['is_dispatcher'] else '',
                          u'\u0020\u0020\u0020\u2713' if user_for_td['is_admin'] else '',
                          u'\u0020\u0020\u0020\u2713' if user_for_td['is_gw'] else '',
                          (u'\u0020\u0020\u0020' + SYMBOL_X_SMALL) if user_for_td['is_blocked'] else ''],
                  icon=current_icon
                  )
    for key, node in td.tree_dict.items():
        children = node.children
        node.children = sorted(children, key=lambda child: child.text)
    return td


# groups
def get_groups_from_db() -> list[dict]:
    """
    Get groups from DB sorted by group name in list[dict]
    Uses in:
    - initial
    - modify_group
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from groups')
    groups = cur.fetchall()
    groups_for_table = list()
    for group in groups:
        group_for_table = {'name': group[1],
                           'id': group[0],
                           'desc': group[2],
                           'is_emergency': group[5],
                           'is_disabled': group[6],
                           'organization_id': group[7]}
        groups_for_table.append(group_for_table)
    con.close()
    groups_for_table.sort(key=lambda i: i['name'])
    return groups_for_table


def get_group_by_id_from_db(group_id) -> dict:
    """
    Get group from DB in dict
    Uses in:
    - groups-tree
    //- del-user
    //- clone-user
    -
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute("select * from groups where id='" + group_id + "'")
    group = cur.fetchone()
    group_for_table = get_group_dict(group)
    con.close()
    return group_for_table


def get_group_name_by_id_from_db(gr_id) -> dict:
    """
    Get group from DB in dict
    Uses in:
    - Apply group changes to user
    :param gr_id:
    :return:
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    db_query_group_name_by_id = "Select name from Groups where id = '" + gr_id + "'"
    cur.execute(db_query_group_name_by_id)
    group_name = cur.fetchone()[0]
    con.close()
    return group_name


def get_group_list_treedata_full() -> (sg.TreeData, sg.TreeData):
    """
    Get group list in treedata for Tab Groups and additional groups in Tab Users
    Uses in:
    - building main window
    - update_all()
    :return:
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from groups')
    groups = cur.fetchall()
    con.close()
    td = sg.TreeData()
    group_treedata = sg.TreeData()
    orgs = get_orgs_from_db()
    for org in orgs:
        td.Insert(parent='', key=org['id'], text=org['name'], values=[], icon=ICON_FOLDER)
    for group in groups:
        group_for_td = get_group_dict(group)
        current_icon = ICON_GROUP_ALARM_BASE64 if group_for_td['is_emergency'] and not group_for_td['is_disabled'] \
            else ICON_GROUP_ALARM_BLOCK_BASE64 if group_for_td['is_emergency'] and group_for_td['is_disabled'] \
            else ICON_GROUP_BASE64 if not group_for_td['is_disabled'] \
            else ICON_GROUP_BLOCK_BASE64
        td.Insert(parent=group_for_td['organization_id'],
                  key=(group_for_td['id'] + '.' + group_for_td['organization_id']),
                  text=group_for_td['name'],
                  values=[group_for_td['id'],
                          group_for_td['name'],
                          group_for_td['desc'],
                          u'\u0020\u0020\u0020\u2713' if group_for_td['is_emergency'] else '',
                          (u'\u0020\u0020\u0020' + SYMBOL_X_SMALL) if group_for_td['is_disabled'] else ''],
                  icon=current_icon
                  )
        if groups != [{}]:
            group_treedata.insert('', group_for_td['id'], '',
                                 values=[group_for_td['name'],
                                         group_for_td['desc']],
                                 icon=check[0])
    for key, node in td.tree_dict.items():
        children = node.children
        node.children = sorted(children, key=lambda child: child.text)
    for key2, node2 in group_treedata.tree_dict.items():
        children2 = node2.children
        node2.children = sorted(children2, key=lambda child: child.values[0])
    return td, group_treedata


def get_group_list_treedata() -> sg.TreeData:
    """
    Get groups with full info in treefata
    Uses in:
    - collapse/expand users in orgs
    :return:
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from groups')
    groups = cur.fetchall()
    con.close()
    td = sg.TreeData()
    orgs = get_orgs_from_db()
    for org in orgs:
        td.Insert(parent='', key=org['id'], text=org['name'], values=[], icon=ICON_FOLDER)
    for group in groups:
        group_for_td = get_group_dict(group)
        current_icon = ICON_GROUP_ALARM_BASE64 if group_for_td['is_emergency'] and not group_for_td['is_disabled'] \
            else ICON_GROUP_ALARM_BLOCK_BASE64 if group_for_td['is_emergency'] and group_for_td['is_disabled'] \
            else ICON_GROUP_BASE64 if not group_for_td['is_disabled'] \
            else ICON_GROUP_BLOCK_BASE64
        td.Insert(parent=group_for_td['organization_id'],
                  key=(group_for_td['id'] + '.' + group_for_td['organization_id']),
                  text=group_for_td['name'],
                  values=[group_for_td['id'],
                          group_for_td['name'],
                          group_for_td['desc'],
                          u'\u0020\u0020\u0020\u2713' if group_for_td['is_emergency'] else '',
                          (u'\u0020\u0020\u0020' + SYMBOL_X_SMALL) if group_for_td['is_disabled'] else ''],
                  icon=current_icon
                  )
    for key, node in td.tree_dict.items():
        children = node.children
        node.children = sorted(children, key=lambda child: child.text)
    return td


# orgs
def get_orgs_from_db() -> list[dict]:
    """
    Get orgs from DB sorted by org name in list[dict]
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from Organizations')
    orgs = cur.fetchall()
    orgs_dict = list()
    for org in orgs:
        org_dict = {'name': org[1],
                         'id': org[0]
                         }
        orgs_dict.append(org_dict)
    con.close()
    orgs_dict.sort(key=lambda i: i['name'])
    return orgs_dict


def get_orgs_from_db_list() -> list[list]:
    """
    Get orgs from DB sorted by org name in list[list]
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from Organizations')
    orgs = cur.fetchall()
    orgs_list = list()
    for org in orgs:
        org_list = [org[0], org[1]]
        orgs_list.append(org_list)
    con.close()
    orgs_list.sort(key=lambda i: i[1])
    return orgs_list


def get_orgs_from_db_list_names() -> list:
    """
    Get orgs names from DB sorted by org name in list
    """
    con = sqlite3.connect('adm.db')
    cur = con.cursor()
    cur.execute('select * from Organizations')
    orgs = cur.fetchall()
    orgs_list = list()
    for org in orgs:
        orgs_list.append(org[1])
    con.close()
    orgs_list.sort()
    return orgs_list


def get_id_by_org(name):
    try:
        con = sqlite3.connect('adm.db')
        cur = con.cursor()
        db_query_org = "Select id FROM Organizations WHERE Name = '" + name + "'"
        cur.execute(db_query_org)
        org_id = cur.fetchone()[0]
        con.close()
        return org_id
    except Exception as e:
        print(f'{e}')
        return ''
